<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
<description>
    <title-info>
        <genre>antique</genre>
        <author><first-name>Swaroop</first-name><middle-name>C H (Перевод: Владимир</middle-name><last-name>Смоляр)</last-name></author>
        <book-title>A Byte of Python (Russian)</book-title>
        <lang>en</lang>
    </title-info>
    <document-info>
        <author><first-name>Swaroop</first-name><middle-name>C H (Перевод: Владимир</middle-name><last-name>Смоляр)</last-name></author>
        <program-used>calibre 4.99.5</program-used>
        <date>17.12.2023</date>
        <id>27244684-d21c-415d-ac4d-d85ae5ab6496</id>
        <version>1.0</version>
    </document-info>
    <publish-info>
    </publish-info>
</description>
<body>
<section>
<p><image l:href="#img_0"/></p>
<p>A Byte of Python (Russian)</p>
<p>Версия 2.02</p>
<p>Swaroop C H (Перевод: Владимир Смоляр)</p>
<p>26 апреля 2020</p>
<p>Оглавление</p>
<p><strong>1 Обложка</strong></p>
<p><strong>1</strong></p>
<p>1.1</p>
<p>«Укус Питона» – «A Byte of Python» по-русски . . . . . . . . . . . . . . . . .</p>
<p>1</p>
<p>1.2</p>
<p>Кто читает «A Byte of Python»? . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>1</p>
<p>1.3</p>
<p>Лицензия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>5</p>
<p>1.4</p>
<p>Читать . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>5</p>
<p>1.5</p>
<p>Купить книгу . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>6</p>
<p>1.6</p>
<p>Скачать . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>6</p>
<p>1.7</p>
<p>Книга на вашем родном языке . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>6</p>
<p><strong>2 Переводы</strong></p>
<p><strong>7</strong></p>
<p>2.1</p>
<p>Доступные переводы<strong>переводы </strong>. . . . . . . . . . . . . . . . . . . . . . . . . . .</p>
<p>7</p>
<p><strong>3 Предисловие</strong></p>
<p><strong>16</strong></p>
<p>3.1</p>
<p>Для кого эта книга . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</p>
<p>3.2</p>
<p>Немного истории . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16</p>
<p>3.3</p>
<p>Состояние книги . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17</p>
<p>3.4</p>
<p>Официальная веб-страница . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18</p>
<p>3.5</p>
<p>К размышлению . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18</p>
<p><strong>4 Введение</strong></p>
<p><strong>19</strong></p>
<p>4.1</p>
<p>Особенности Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19</p>
<p>4.2</p>
<p>Python 2 против 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</p>
<p>4.3</p>
<p>Что говорят программисты . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22</p>
<p><strong>5 Установка</strong></p>
<p><strong>24</strong></p>
<p>5.1</p>
<p>Установка в GNU/Linux и BSD . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24</p>
<p>5.2</p>
<p>Установка в Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25</p>
<p>5.3</p>
<p>Для пользователей Mac OS X . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26</p>
<p>5.4</p>
<p>Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27</p>
<p>i</p>
<p><strong>6 Первые шаги</strong></p>
<p><strong>28</strong></p>
<p>6.1</p>
<p>Использование командной строки интерпретатора . . . . . . . . . . . . . . . 28</p>
<p>6.2</p>
<p>Выбор редактора . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29</p>
<p>6.3</p>
<p>Использование программных файлов . . . . . . . . . . . . . . . . . . . . . . . 30</p>
<p>6.4</p>
<p>Получение помощи . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34</p>
<p>6.5</p>
<p>Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35</p>
<p><strong>7 Основы</strong></p>
<p><strong>36</strong></p>
<p>7.1</p>
<p>Комментарии . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36</p>
<p>7.2</p>
<p>Литеральные константы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37</p>
<p>7.3</p>
<p>Числа . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37</p>
<p>7.4</p>
<p>Строки . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37</p>
<p>7.5</p>
<p>Переменные . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40</p>
<p>7.6</p>
<p>Имена идентификаторов . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41</p>
<p>7.7</p>
<p>Типы данных . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41</p>
<p>7.8</p>
<p>Объекты . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41</p>
<p>7.9</p>
<p>Логические и физические строки . . . . . . . . . . . . . . . . . . . . . . . . . 43</p>
<p>7.10 Отступы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44</p>
<p>7.11 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46</p>
<p><strong>8 Операторы и выражения</strong></p>
<p><strong>47</strong></p>
<p>8.1</p>
<p>Операторы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47</p>
<p>8.2</p>
<p>Порядок вычисления . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51</p>
<p>8.3</p>
<p>Изменение порядка вычисления . . . . . . . . . . . . . . . . . . . . . . . . . . 53</p>
<p>8.4</p>
<p>Ассоциативность . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53</p>
<p>8.5</p>
<p>Выражения . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53</p>
<p>8.6</p>
<p>Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54</p>
<p><strong>9 Поток команд</strong></p>
<p><strong>55</strong></p>
<p>9.1</p>
<p>Оператор if . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55</p>
<p>9.2</p>
<p>Оператор while . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58</p>
<p>9.3</p>
<p>Цикл for . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59</p>
<p>9.4</p>
<p>Оператор break . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61</p>
<p>9.5</p>
<p>Оператор continue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62</p>
<p>9.6</p>
<p>Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63</p>
<p><strong>10 Функции</strong></p>
<p><strong>64</strong></p>
<p>10.1 Параметры функций . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65</p>
<p>10.2 Локальные переменные . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66</p>
<p>10.3 Зарезервированное слово «global» . . . . . . . . . . . . . . . . . . . . . . . . . 67</p>
<p>10.4 Зарезервированное слово «nonlocal» . . . . . . . . . . . . . . . . . . . . . . . 68</p>
<p>10.5 Значения аргументов по умолчанию . . . . . . . . . . . . . . . . . . . . . . . 69</p>
<p>10.6 Ключевые аргументы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70</p>
<p>10.7 Переменное число параметров . . . . . . . . . . . . . . . . . . . . . . . . . . . 71</p>
<p>10.8 Только ключевые параметры . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72</p>
<p>ii</p>
<p>10.9 Оператор «return» . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73</p>
<p>10.10 Строки документации . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74</p>
<p>10.11 Аннотации . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75</p>
<p>10.12 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75</p>
<p><strong>11 Модули</strong></p>
<p><strong>76</strong></p>
<p>11.1 Файлы байткода .pyc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78</p>
<p>11.2 Оператор from … import … . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78</p>
<p>11.3 Имя модуля – __name__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79</p>
<p>11.4 Создание собственных модулей . . . . . . . . . . . . . . . . . . . . . . . . . . 80</p>
<p>11.5 Функция dir . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82</p>
<p>11.6 Пакеты . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83</p>
<p>11.7 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84</p>
<p><strong>12 Структуры данных</strong></p>
<p><strong>85</strong></p>
<p>12.1 Список . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85</p>
<p>12.2 Краткое введение в объекты и классы . . . . . . . . . . . . . . . . . . . . . . . 85</p>
<p>12.3 Кортеж . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88</p>
<p>12.4 Словарь . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89</p>
<p>12.5 Последовательности . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92</p>
<p>12.6 Множество . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94</p>
<p>12.7 Ссылки . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95</p>
<p>12.8 Ещё о строках . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96</p>
<p>12.9 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97</p>
<p><strong>13 Решение задач</strong></p>
<p><strong>98</strong></p>
<p>13.1 Задача . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98</p>
<p>13.2 Решение . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99</p>
<p>13.3 Вторая версия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101</p>
<p>13.4 Третья версия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103</p>
<p>13.5 Четвёртая версия . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105</p>
<p>13.6 Дополнительные усовершенствования . . . . . . . . . . . . . . . . . . . . . . 106</p>
<p>13.7 Процесс разработки программного обеспечения . . . . . . . . . . . . . . . . 107</p>
<p>13.8 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107</p>
<p><strong>14 Объектно-ориентированное программирование</strong></p>
<p><strong>108</strong></p>
<p>14.1 self . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109</p>
<p>14.2 Классы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109</p>
<p>14.3 Методы объектов . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110</p>
<p>14.4 Метод __init__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111</p>
<p>14.5 Переменные класса и объекта . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112</p>
<p>14.6 Наследование . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115</p>
<p>14.7 Метаклассы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118</p>
<p>14.8 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120</p>
<p>iii</p>
<p><strong>15 Ввод-вывод</strong></p>
<p><strong>121</strong></p>
<p>15.1 Ввод от пользователя . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121</p>
<p>15.2 Файлы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123</p>
<p>15.3 Pickle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124</p>
<p>15.4 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125</p>
<p><strong>16 Исключения</strong></p>
<p><strong>126</strong></p>
<p>16.1 Ошибки . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126</p>
<p>16.2 Исключения . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126</p>
<p>16.3 Обработка исключений . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127</p>
<p>16.4 Вызов исключения . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128</p>
<p>16.5 Try .. Finally . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129</p>
<p>16.6 Оператор with . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130</p>
<p>16.7 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131</p>
<p><strong>17 Стандартная библиотека</strong></p>
<p><strong>132</strong></p>
<p>17.1 Модуль sys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132</p>
<p>17.2 Модуль logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133</p>
<p>17.3 Серия «Модуль недели» . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135</p>
<p>17.4 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135</p>
<p><strong>18 Дополнительно</strong></p>
<p><strong>136</strong></p>
<p>18.1 Передача кортежей . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136</p>
<p>18.2 Специальные методы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137</p>
<p>18.3 Блоки в одно выражение . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137</p>
<p>18.4 Lambda-формы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138</p>
<p>18.5 Генераторы списков . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138</p>
<p>18.6 Передача кортежей и словарей в функции . . . . . . . . . . . . . . . . . . . . 139</p>
<p>18.7 exec и eval . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140</p>
<p>18.8 Оператор assert . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140</p>
<p>18.9 Функция repr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141</p>
<p>18.10 Управляющие последовательности . . . . . . . . . . . . . . . . . . . . . . . . 141</p>
<p>18.11 Необрабатываемые строки . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142</p>
<p>18.12 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142</p>
<p><strong>19 Что дальше</strong></p>
<p><strong>143</strong></p>
<p>19.1 Упражнения . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144</p>
<p>19.2 Примеры программ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144</p>
<p>19.3 Вопросы и ответы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144</p>
<p>19.4 Советы и рекомендации . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145</p>
<p>19.5 Учебники . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145</p>
<p>19.6 Видео . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145</p>
<p>19.7 Обсуждение . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145</p>
<p>19.8 Новости . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145</p>
<p>19.9 Установка библиотек . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146</p>
<p>iv</p>
<p>19.10 Графические программы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146</p>
<p>19.11 Резюме по инструментам ГИП . . . . . . . . . . . . . . . . . . . . . . . . . . . 147</p>
<p>19.12 Различные реализации . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147</p>
<p>19.13 Функциональное программирование (для хорошо подготовленных чита-</p>
<p>телей) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148</p>
<p>19.14 Резюме . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148</p>
<p><strong>20 Приложение: FLOSS</strong></p>
<p><strong>149</strong></p>
<p>20.1 Free/Libre and Open Source Software (FLOSS) . . . . . . . . . . . . . . . . . . . 149</p>
<p><strong>21 Приложение: о книге</strong></p>
<p><strong>152</strong></p>
<p>21.1 Колофон . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152</p>
<p>21.2 Об авторе . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153</p>
<p><strong>22 Приложение: История версий</strong></p>
<p><strong>154</strong></p>
<p><strong>23 Приложение: Инструкция по переводу</strong></p>
<p><strong>158</strong></p>
<p>v</p>
<p><strong>Обложка</strong></p>
<p>1.1 «Укус Питона» – «A Byte of Python» по-русски</p>
<p><strong>Примечание: </strong>От автора перевода</p>
<p>Перед вами перевод популярной книги <strong>«A Byte of Python»</strong>1 на русский язык.</p>
<p>Автор книги – <strong>Swaroop Chitlur</strong>.</p>
<p>Автор русского перевода – <strong>Владимир Смоляр</strong>2</p>
<p>Настоящий перевод основан на версии 2.0 оригинальной книги и имеет версию <strong>2.0.2</strong></p>
<p>Свежую версию оригинала книги можно просмотреть <a l:href="https://python.swaroopch.com/">здесь. </a></p>
<p>«A Byte of Python» – это свободная книга по программированию на языке Python. Она</p>
<p>может служить учебным пособием или руководством по языку Python для начинающей</p>
<p>аудитории. Если ваши знания о компьютере ограничиваются тем, как сохранять текстовые файлы, эта книга для вас.</p>
<p>Настоящая книга описывает язык Python 3, несмотря на то, что Python 2 всё ещё более</p>
<p>распространён (более детально об этом см. раздел  <emphasis>Python 2 против 3</emphasis>).</p>
<p>1.2 Кто читает «A Byte of Python»?</p>
<p>Вот что люди говорят о настоящей книге:</p>
<p> <emphasis>«Лучшее, что мне удалось найти – «A Byte of Python» – просто блестящая книга для начинающих. Она хорошо написана, основные понятия доступно объясняются на наглядных</emphasis></p>
<p> <emphasis>примерах.»</emphasis></p>
<p>– Syed Talal (19 лет)</p>
<p>1 Название книги «A Byte of Python» (дословно – «Байт Питона») по-английски звучит так же, как и «A Bite of Python» – «Укус Питона» ( <emphasis>прим.перев. </emphasis>)</p>
<p>2 Сообщения об ошибках и предложения по улучшению перевода просьба присылать на e-mail: v_2e@ukr.net.</p>
<p>1</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p> <emphasis>«Это лучший учебник для начинающих из всех, что я видел! Спасибо вам за ваш труд.»</emphasis></p>
<p>– Walt Michalik (wmich50-at-theramp-dot-net)</p>
<p> <emphasis>«Вы написали лучший учебник по Python из тех, что я встречал в Сети. Отличная работа. </emphasis></p>
<p> <emphasis>Спасибо!»</emphasis></p>
<p>– Joshua Robin (joshrob-at-poczta-dot-onet-dot-pl)</p>
<p> <emphasis>«Превосходный вводный курс в программирование #Python для начинающих»</emphasis></p>
<p>– Shan Rajasekaran</p>
<p> <emphasis>«Привет! Я из Доминиканской Республики. Меня зовут Павел. Недавно я прочитал вашу книгу «A Byte of Python», и нахожу её замечательной :). Я многому научился на приведённых</emphasis></p>
<p> <emphasis>примерах. Ваша книга – отличный помощник таким новичкам, как я…»</emphasis></p>
<p>– Pavel Simo (pavel-dot-simo-at-gmail-dot-com)</p>
<p> <emphasis>«Недавно я закончил читать «A Byte of Python» и подумал, что я обязательно должен поблагодарить вас. Было грустно дойти до последних страниц, так как это означало возвращение</emphasis></p>
<p> <emphasis>к тупым и скучным руководствам O’Reilly или чего-то подобного для изучения Python. В любом случае я очень благодарен вам за вашу книгу.»</emphasis></p>
<p>– Samuel Young (sy-one-three-seven-at-gmail-dot-com)</p>
<p> <emphasis>«Уважаемый Swaroop, я прохожу курс, который ведёт преподаватель, совсем не заинтересо-ванный в преподавании. Мы пользуемся книгой «Изучаем Python», второе издание O’Reilly. Но</emphasis></p>
<p> <emphasis>она совсем не для начинающих студентов, практически без каких-либо знаний о программировании, и преподавателя, который должен работать кем-нибудь другим. Огромное спасибо</emphasis></p>
<p> <emphasis>вам за вашу книгу. Без неё я так бы никогда ничего и не понял о Python и программировании</emphasis></p>
<p> <emphasis>вообще. Тысяча благодарностей! Вы умеете «разбить мысль на части» до такого уровня,</emphasis> <emphasis>чтобы начинающим было легко понять, а далеко не каждый на это способен.»</emphasis></p>
<p>– Joseph Duarte (jduarte1-at-cfl-dot-rr-dot-com)</p>
<p> <emphasis>«Я в восторге от вашей книги! Это самый лучший учебник по Python, кроме того полезный</emphasis></p>
<p> <emphasis>и как справочник. Просто блестяще! Настоящий шедевр! Так держать!»</emphasis></p>
<p><strong>1.2. Кто читает «A Byte of Python»? </strong></p>
<p>2</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>– Chris-André Sommerseth</p>
<p> <emphasis>«Пишу вам, чтобы поблагодарить за написание и публикацию в сети «A Byte of Python». Я</emphasis></p>
<p> <emphasis>предпринимал попытки изучить Python в течение нескольких месяцев, прежде чем наткнулся на вашу книгу. И хотя я достиг небольших успехов с pyGame, мне никак не удавалось закончить программу. </emphasis></p>
<p> <emphasis>Благодаря вашему упрощению многих понятий, Python теперь кажется мне вполне дости-жимой целью. Кажется, теперь я наконец-то освоил основы и могу продолжать идти к своей</emphasis></p>
<p> <emphasis>настоящей цели – разработке игр. </emphasis></p>
<p> <emphasis>…</emphasis></p>
<p> <emphasis>Ещё раз спасибо ОГРОМНОЕ за размещение такого структурированного и полезного путе-водителя по основам программирования в Интернете. Он провёл меня через ООП, разъяснив</emphasis></p>
<p> <emphasis>то, что не смогли разъяснить два учебника.»</emphasis></p>
<p>– Matt Gallivan (m-underscore-gallivan12-at-hotmail-dot-com)</p>
<p> <emphasis>«Я бы хотел поблагодарить вас за вашу книгу «A byte of python», которая кажется мне самым лучшим средством для изучения Python. Мне 15 лет, я живу в Египте. Зовут меня Ах-мед. Python – мой второй язык программирования. В школе я изучал Visual Basic 6, но мне</emphasis></p>
<p> <emphasis>он не понравился, а изучать Python мне по-настоящему нравится. Мне удалось написать</emphasis></p>
<p> <emphasis>программу «Адресная книга». Теперь я буду больше программировать сам и читать чужие</emphasis></p>
<p> <emphasis>программы на Python (если вы подскажете мне подходящий их источник). Также я намерен</emphasis></p>
<p> <emphasis>приступить к изучению Java, и если бы вы могли порекомендовать мне пособие по Java, столь</emphasis></p>
<p> <emphasis>же хорошее, как ваше, это бы мне очень помогло. Спасибо.»</emphasis></p>
<p>– Ahmed Mohammed (sedo-underscore-91-at-hotmail-dot-com)</p>
<p> <emphasis>«Замечательным источником для начинающих, желающих узнать больше о Python может</emphasis></p>
<p> <emphasis>послужить пособие «A Byte of Python», написанное Swaroop C H в 110 страницах. Оно отлич-но написано, легко воспринимается и, возможно, это лучшее из существующих введение в</emphasis></p>
<p> <emphasis>программирование на Python»</emphasis></p>
<p>– Drew Ames в статье «Scripting Scribus», опубликованной на Linux.com</p>
<p> <emphasis>«Вчера я прошёл почти весь «Byte of Python» на своём Nokia N800, и он показался мне наиболее</emphasis></p>
<p> <emphasis>лёгким и лаконичным введением в Python из всех, что я встречал. Настоятельно рекомендую</emphasis></p>
<p> <emphasis>его как отправную точку для изучающих Python.»</emphasis></p>
<p>– Jason Delport в своём блоге</p>
<p><strong>1.2. Кто читает «A Byte of Python»? </strong></p>
<p>3</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p> <emphasis>«Byte of Vim и Python», написанные @swaroopch, на мой взгляд, наилучшие образцы техниче-ской документации. Прекрасно читаются #FeelGoodFactor</emphasis></p>
<p>– Surendran говорит в Твиттере</p>
<p> <emphasis>«»Byte of python» – безусловно лучший»</emphasis></p>
<p> <emphasis>(в ответ на вопрос «Посоветуйте хороший и недорогой ресурс для изучения основ Python.»)</emphasis></p>
<p>– Justin LoveTrue пишет на странице Facebook</p>
<p> <emphasis>«Книга «Byte of Python» очень помогла. Спасибо, bigtime :)»</emphasis></p>
<p>– Chinmay</p>
<p> <emphasis>«Всегда был поклонником «A Byte of Python» – написанного как для новичков, так и для опытных программистов.»</emphasis></p>
<p>– Patrick Harrington, в ответе на StackOverflow</p>
<p><strong>Даже NASA</strong></p>
<p>Эта книга используется даже в НАСА! Ею пользуются в лаборатории реактив-</p>
<p>ного движения3 в рамках проекта «Сеть дальней космической связи»4.</p>
<p><strong>Учебные курсы</strong></p>
<p>Эта книга используется в качестве учебного материала в различных учебных</p>
<p>заведениях</p>
<p>• Курс «Принципы языков программирования» в университете Vrije, Ам-</p>
<p>стердам</p>
<p>• Курс «Основы машинных вычислений» в Калифорнийском Университе-</p>
<p>те в Дэвисе</p>
<p>• Курс «Программирование на Python» в Гарвардском университете</p>
<p>• Курс «Введение в программирование» в Университете Лидса</p>
<p>• Курс «Введение в разработку приложений» в Бостонском Университете</p>
<p>3 <a l:href="http://www.jpl.nasa.gov/">Jet Propulsion Laboratory </a>( <emphasis>прим.перев. </emphasis>) 4 <a l:href="https://web.archive.org/web/20130614003212/http%3a//dsnra.jpl.nasa.gov/software/Python/byte-of-python/output/byteofpython_html/">Deep Space Network </a>( <emphasis>прим.перев. </emphasis>) <strong>1.2. Кто читает «A Byte of Python»? </strong></p>
<p>4</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• Курс «Методы информационных технологий в метеорологии» в Универ-</p>
<p>ситете Оклахомы</p>
<p>• Курс «Обработка геоданных» в Университете штата Мичиган</p>
<p>• Курс «Многоагентные системы семантической паутины» в Университете</p>
<p>Эдинбурга</p>
<p>1.3 Лицензия</p>
<p>Настоящая книга распространяется на условиях лицензии <a l:href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-</a></p>
<p><a l:href="http://creativecommons.org/licenses/by-sa/3.0/">Share Alike 3.0 Unported. </a></p>
<p>Это означает, что:</p>
<p>• Вы имеете право копировать, распространять и передавать её другим</p>
<p>• Вы имеете право использовать фрагменты этой книги в своих текстах</p>
<p>• Вы имеете право использовать её в коммерческих целях</p>
<p>Внимание:</p>
<p>• При продаже электронной или печатной версии этой книги в её описании необходимо в явной форме указать, что она распространяется <strong>не </strong>от имени её первоначаль-ного автора.</p>
<p>• Во введении или на титульной странице должно быть указано первичное авторство</p>
<p>в форме ссылки на страницу <a l:href="http://www.swaroopch.com/notes/Python">http://www.swaroopch.com/notes/Python </a>с ясным указанием на то, что исходный текст книги может быть найден по этому адресу.</p>
<p>• Все фрагменты программ/сценарии, представленные в этой книге, распространяют-ся на условиях Модифицированной лицензии BSD5, если явно не указано обратное.</p>
<p>1.4 Читать</p>
<p>Вы можете <a l:href="http://svp.pp.ua/AByteOfPython/preface.html">приступить к чтению </a>книги в браузере прямо сейчас.</p>
<p><a l:href="http://wombat.org.ua/AByteOfPython/preface.html">(запасная ссылка</a>) 5 <a l:href="https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22Revised_BSD_License.22.2C_.22New_BSD_License.22.2C_or_.22Modified_BSD_License.22.29">3-clause BSD license </a>( <emphasis>прим.перев. </emphasis>) <strong>1.3. Лицензия</strong></p>
<p>5</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>1.5 Купить книгу</p>
<p>Чтобы иметь возможность почитать эту книгу без подключения к Интернету, а также</p>
<p>поддержать её дальнейшую разработку и усовершенствование, вы можете <a l:href="http://www.swaroopch.com/buybook">купить её пе-</a></p>
<p><a l:href="http://www.swaroopch.com/buybook">чатный вариант </a>(на английском языке).</p>
<p>1.6 Скачать</p>
<p>• <a l:href="http://svp.pp.ua/AByteOfPython/AByteofPythonRussian.pdf">В виде PDF-файла </a>(самая свежая версия)</p>
<p><a l:href="http://wombat.org.ua/AByteOfPython/AByteofPythonRussian.pdf">запасная ссылка</a></p>
<p>• <a l:href="http://svp.pp.ua/AByteOfPython/AByteofPythonRussian.epub">В формате EPUB </a>(без ручного форматирования).</p>
<p><a l:href="http://wombat.org.ua/AByteOfPython/AByteofPythonRussian.epub">запасная ссылка</a></p>
<p>• <a l:href="https://github.com/swaroopch/byte_of_python">Полный исходник</a></p>
<p><strong>Если вы хотите поддержать продолжение разработки этой книги, </strong><a l:href="http://www.swaroopch.com/buybook">купите её печатную</a></p>
<p><a l:href="http://www.swaroopch.com/buybook">копию </a><strong>. </strong></p>
<p>1.7 Книга на вашем родном языке</p>
<p>Если вы хотите почитать эту книгу или помочь перевести её на другие языки, перейдите</p>
<p>на страницу  <emphasis>Переводы</emphasis>.</p>
<p><strong>1.5. Купить книгу</strong></p>
<p>6</p>
<p><strong>Переводы</strong></p>
<p>Благодаря многим неутомимым добровольцам, Существует много переводов этой книги</p>
<p>на разные естественные языки.</p>
<p>Если вы хотите помочь с переводом, просмотрите список волонтёров для соответствующих языков внизу и решите, стоит ли вам начать новый перевод или помочь уже существующему проекту.</p>
<p>Если вы решили начать новый перевод, прочитайте, пожалуйста,  <emphasis>инструкцию по переводу</emphasis>.</p>
<p>2.1 Доступные переводыпереводы</p>
<p>2.1.1 Арабский</p>
<p>Ниже приведена ссылка на арабскую версию. Благодарность <strong>Ashraf Ali Khalaf </strong>за</p>
<p>перевод книги. Вы можете прочитать всю книгу в Интернете  <emphasis>по этому адресу</emphasis></p>
<p> <emphasis>&lt;http://www.khaledhosny.org/byte-of-python/index.html&gt; </emphasis> или скачать её с <a l:href="http://downloads.sourceforge.net/omlx/byteofpython_arabic.pdf?use_mirror%3dosdn">sourceforge.net. </a>Подробнее см. <a l:href="http://itwadi.com/byteofpython_arabi">здесь. </a></p>
<p>2.1.2 Бразильский португальский</p>
<p>Существует два перевода:</p>
<p><a l:href="http://www.samueldiasneto.com/aprendendopython/index.html">Samuel Dias Neto </a>(samuel.arataca-at-gmail-dot-com) осуществил первый перевод</p>
<p>этой книги на бразильский португальский для версии Python 2.3.5.</p>
<p>Перевод Samuel’я доступен на странице <a l:href="http://www.samueldiasneto.com/aprendendopython/index.html">aprendendopython</a>.</p>
<p><a l:href="http://rodrigoamaral.net">Rodrigo Amaral </a>(rodrigoamaral-at-gmail-dot-com) принялся за перевод книги на</p>
<p>бразильский португальский.</p>
<p>Перевод Rodrigo доступен на странице <a l:href="http://www.swaroopch.org/notes/Python_pt-br%3aIndice">http://www.swaroopch.org/notes/</a></p>
<p><a l:href="http://www.swaroopch.org/notes/Python_pt-br%3aIndice">Python_pt-br:Indice </a>.</p>
<p>7</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2.1.3 Каталонский</p>
<p><strong>Moises Gomez </strong>(moisesgomezgiron-at-gmail-dot-com) приступил к переводу книги на каталонский язык. Перевод находится в процессе, и был доступен на страницах <a l:href="http://www.swaroopch.com/notes/">erstwhile wiki</a>.</p>
<p><strong>Moisès Gómez</strong>:</p>
<p>«Я разработчик и преподаватель программирования (обычно для людей без</p>
<p>предварительной подготовки).</p>
<p>Некоторое время назад мне понадобилось изучить Python, и книга Swaroop’а</p>
<p>очень помогла мне. Просто, понятно и достаточно полно. Как раз то, что мне</p>
<p>было нужно.</p>
<p>После этого я подумал, что такая книга может пригодиться и другим людям в</p>
<p>моей стране. Но английский язык может стать преградой для некоторых.</p>
<p>Так почему бы мне не перевести её? И я сделал это для предыдущей версии</p>
<p>книги.</p>
<p>В моей стране два государственных языка. Я выбрал каталонский, так как подумал, что на более распространённый испанский её наверняка переведёт кто-нибудь другой.»</p>
<p>2.1.4 Китайский</p>
<p>Китайскую версию можно найти на <a l:href="http://www.swaroopch.org/notes/Python_cn%3aTable_of_Contents">http://www.swaroopch.org/notes/Python_cn:Table_of_</a></p>
<p><a l:href="http://www.swaroopch.org/notes/Python_cn%3aTable_of_Contents">Contents </a>.</p>
<p><strong>Juan Shen </strong>(orion-underscore-val-at-163-dot-com) приступил к переводу книги на китайский</p>
<p>язык.</p>
<p>Она доступна по адресу <a l:href="http://www.pycn.org/python在线手册">http://www.pycn.org/python%E5%9C%A8%E7%BA%BF%E6%89%8B%</a></p>
<p><a l:href="http://www.pycn.org/python在线手册">E5%86%8C </a>.</p>
<p>«Я аспирант отдела беспроводных телекоммуникаций в Пекинском техноло-</p>
<p>гическом университете, Китай. В настоящее время я занимаюсь исследова-</p>
<p>нием синхронизации, регулировки канала передачи данных и многопользо-</p>
<p>вательским определением системы с многими несущими частотами CDMA.</p>
<p>Python является моим основным языком программирования для ежедневно-</p>
<p>го моделирования и расчётов. По большей части, с использованием Python</p>
<p>Numeric. Я познакомился с Python всего пол года назад, но как вы могли видеть, это действительно очень лёгкий для понимания и освоения язык, и вместе с тем, очень эффективный. Как и предупреждал в своей книге Swaroop,</p>
<p>«Теперь это мой любимый язык программирования».</p>
<p>«A Byte of Python» был моим учебником по Python. Он просто и эффектив-</p>
<p>но вводит вас в мир Python в кратчайшие сроки. Он не слишком длинный,</p>
<p>но покрывает практически все важные темы о Python. Я считаю, «A Byte of</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>8</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Python» нужно всегда рекомендовать новичкам в качестве первого учебника.</p>
<p>Я посвящаю свой перевод миллионам потенциальных пользователей Python</p>
<p>в Китае.»</p>
<p>2.1.5 Традиционный китайский</p>
<p><strong>Fred Lin </strong>(gasolin-at-gmail-dot-com) приступил к переводу книги на традиционный китайский язык.</p>
<p>Она доступна по адресу <a l:href="http://code.google.com/p/zhpy/wiki/ByteOfZhpy">http://code.google.com/p/zhpy/wiki/ByteOfZhpy </a>.</p>
<p>Любопытной особенностью этого перевода является то, что он содержит исходные тексты</p>
<p>на  <emphasis>китайском Python </emphasis> наряду с оригинальными текстами на Python.</p>
<p><strong>Fred Lin</strong>:</p>
<p>«Я работаю инженером программного обеспечения сетевых устройств в Delta</p>
<p>Network. Кроме того, я участник разработки веб-инструментария TurboGears.</p>
<p>Как евангелист Python (:-p) я нуждаюсь в некотором материале, опираясь на</p>
<p>который я смогу популяризовать язык Python. Я обнаружил, что «A Byte of</p>
<p>Python» нашёл золотую середину между книгами для новичков и для опыт-</p>
<p>ных программистов. «A Byte of Python» подробно излагает основы Python в</p>
<p>разумных объёмах.</p>
<p>Мой перевод поначалу основывался на версии на упрощённом китайском</p>
<p>языке, но со временем в него было внесено множество изменений для под-</p>
<p>держания его в соответствии с текущими версиями книги.</p>
<p>Последние версии перевода на традиционный китайский также отличаются</p>
<p>наличием исходных кодов программ на китайском Python, благодаря проекту</p>
<p>«zhpy», существующему с августа 2007 года.</p>
<p>zhpy (произносится как «Зэд.Аш.Пи» или «зиппи») является эдакой надстрой-кой над Python, переводящей Python на традиционный или упрощённый ки-</p>
<p>тайский. Этот проект существует, прежде всего, в образовательных целях.</p>
<p>2.1.6 Французский</p>
<p><strong>Gregory </strong>(coulix-at-ozforces-dot-com-dot-au) начал перевод книги на французский язык.</p>
<p><strong>Gérard Labadie </strong>(Palmipede) закончил перевод книги. Она доступна на <a l:href="http://www.swaroopch.org/notes/Python_fr%3aTable_des_Matières">http://www. </a></p>
<p><a l:href="http://www.swaroopch.org/notes/Python_fr%3aTable_des_Matières">swaroopch.org/notes/Python_fr:Table_des_Mati%C3%A8res </a>.</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>9</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2.1.7 Немецкий</p>
<p><strong>Lutz Horn </strong>(lutz-dot-horn-at-gmx-dot-de), <strong>Bernd Hengelein </strong>(bernd-dot-hengelein-at-gmail-dot-com) и <strong>Christoph Zwerschke </strong>(cito-at-online-dot-de) начали перевод на немецкий язык.</p>
<p>Их перевод находится на <a l:href="http://abop-german.berlios.de">http://abop-german.berlios.de </a>.</p>
<p><strong>Lutz Horn </strong>говорит:</p>
<p>«Мне 32 года, я закончил математический факультет Гейдельбергского уни-</p>
<p>верситета в Германии. В настоящее время я работаю программистом в обще-</p>
<p>ственном проекте по созданию веб-портала компьютерных наук в Германии.</p>
<p>Основной язык, который я использую на работе, – Java, но «за кулисами» я</p>
<p>стараюсь делать как можно больше на Python. Особенно легко удаётся про-</p>
<p>изводить анализ текста и конвертацию на Python. Я не очень знаком с ин-</p>
<p>струментариями для графического интерфейса, так как по большей части за-</p>
<p>нимаюсь веб-программированием, где интерфейс пользователя формируется</p>
<p>такими Java-инструментами как Struts. В настоящее время я стараюсь больше</p>
<p>применять функциональное программирование и генераторы. После корот-</p>
<p>кого взгляда на Ruby я был впечатлён использованием блоков в этом языке.</p>
<p>Мне также нравится динамическая природа таких языков, как Python и Ruby, поскольку это даёт мне возможность делать то, что невозможно сделать в более статических языках, как Java. Я стал искать какой-нибудь вводный курс в</p>
<p>программирование, подходящий для полного не-программиста. Я нашёл кни-</p>
<p>ги «How to Think Like a Computer Scientist: Learning with Python» и «Dive into Python». Первая книга хороша для новичков, но слишком длинна для перевода. Вторая не подходит для новичков. А вот «A Byte of Python», как мне</p>
<p>кажется, попадает как раз между этими двумя, так как не слишком длинна,</p>
<p>написана по существу, но вместе с тем, достаточно подробна для обучения</p>
<p>новичка. Помимо этого, мне понравилась простая структура DocBook, кото-</p>
<p>рая позволяет переводить текст, а также генерировать результирующий текст</p>
<p>в различных форматах как по волшебству.»</p>
<p><strong>Bernd Hengelein </strong>говорит:</p>
<p>«Мы с Лутцем собираемся переводить книгу на немецкий язык вместе. Мы</p>
<p>начали с Введения и Предисловия, но мы будем информировать вас по мере</p>
<p>продвижения.</p>
<p>Теперь пару слов о себе. Мне 34 года, и я играюсь с компьютерами с 1980-х, когда «Commodore C64» повелевал детскими комнатами. После того, как я получил образование в области компьютерных наук, я начал работать програм-</p>
<p>мистом. В настоящее время я работаю в области медицинской визуализации</p>
<p>в одной из крупнейших немецких компаний. И хотя основным языком, ко-</p>
<p>торым я (вынужденно) пользуюсь на работе, является C++, я постоянно ищу</p>
<p>новые пространства для освоения. В прошлом году я влюбился в чудесный</p>
<p>язык Python одновременно за его возможности и красоту. Где-то в Интернете</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>10</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>я читал о человеке, который сказал, что ему нравится Python, потому что программы на нём выглядят красиво. На мой взгляд, он совершенно прав. Когда я</p>
<p>начинал изучать Python, я заметил, что хорошей документации на немецком</p>
<p>языке по нему было очень мало. Когда же я наткнулся на вашу книгу, мне</p>
<p>в голову пришла внезапная идея перевести её на немецкий. К счастью, ана-</p>
<p>логичная идея пришла в голову и Лутцу, благодаря чему теперь мы можем</p>
<p>разделить работу. С нетерпением жду продуктивного сотрудничества!»</p>
<p>2.1.8 Греческий</p>
<p>Греческое сообщество Ubuntu <a l:href="http://wiki.ubuntu-gr.org/byte-of-python-el">перевело книгу на греческий язык</a>, для использования</p>
<p>в уроках Python на своём форуме. Для более подробной информации свяжитесь с</p>
<p><a l:href="https://twitter.com/savvasradevic">@savvasradevic. </a></p>
<p>2.1.9 Индонезийский</p>
<p><strong>Daniel </strong>(daniel-dot-mirror-at-gmail-dot-com) переводит книгу на индонезийский язык на</p>
<p><a l:href="http://python.or.id/moin.cgi/ByteofPython">http://python.or.id/moin.cgi/ByteofPython </a>.</p>
<p><strong>W. Priyambodo </strong>также изъявил желание перевести книгу на индонезийский. Перевод находится в процессе на странице <a l:href="http://www.swaroopch.org/notes/Python_id%3aDaftar_Isi">http://www.swaroopch.org/notes/Python_id:Daftar_Isi </a>.</p>
<p>2.1.10 Итальянский</p>
<p><strong>Enrico Morelli </strong>(mr-dot-mlucci-at-gmail-dot-com) и <strong>Massimo Lucci </strong>(morelli-at-cerm-dot-unifi-dot-it) взялись за перевод книги на итальянский язык.</p>
<p>Итальянский перевод расположен на www.gentoo.it/Programmazione/byteofpython . Новый</p>
<p>перевод находится в процессе здесь: <a l:href="http://www.swaroopch.org/notes/Python_it%3aPrefazione">http://www.swaroopch.org/notes/Python_it:Prefazione </a>.</p>
<p><strong>Massimo Lucci </strong>и <strong>Enrico Morelli</strong>:</p>
<p>«Мы работаем в университете Флоренции (Италия) – на факультете хи-</p>
<p>мии. Я (Massimo) в качестве инженера и системного администратора ЯМР-</p>
<p>спектрометров, а Enrico – в качестве инженера и системного администратора</p>
<p>параллельных / кластерных систем. Мы программируем на Python уже около</p>
<p>семи лет, а на платформах Linux мы работаем уже около десяти лет. Мы ад-</p>
<p>министрируем веб-страницу www.gentoo.it для дистрибутива Gentoo/Linux, а</p>
<p>также страницу www.nmr.it (в данный момент в разработке) о приложениях</p>
<p>и использовании ядерного магнитного резонанса. Вот и всё! На нас произвёл</p>
<p>впечатление тот живой язык, которым написана эта книга, и мы считаем, что</p>
<p>это очень важно для представления Python новым пользователям (например,</p>
<p>сотням студентов и исследователей из наших лабораторий).»</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>11</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2.1.11 Японский</p>
<p>Японская версия доступна на <a l:href="http://www.swaroopch.org/notes/Python_ja%3aTable_of_Contents">http://www.swaroopch.org/notes/Python_ja:Table_of_Contents</a></p>
<p>.</p>
<p><strong>Shunro Dozono </strong>(dozono-at-gmail-dot-com) переводит книгу на японский язык.</p>
<p>2.1.12 Монгольский</p>
<p><strong>Ariunsanaa Tunjin </strong>(luftballons2010-at-gmail-dot-com) принялся за перевод книги на мон-гольский язык.</p>
<p> <emphasis>Обновление от 22 ноября 2009г </emphasis>: <strong>Ariunsanaa </strong>на грани завершения перевода.</p>
<p>2.1.13 Норвежский (bokmål)</p>
<p><strong>Eirik Vågeskar </strong>(<a l:href="http://www.swaroopch.org/notes/User%3aVages">http://www.swaroopch.org/notes/User:Vages</a>) – студент <a l:href="http://no.wikipedia.org/wiki/Sandvika_videregående_skole">Sandvika videregående</a></p>
<p><a l:href="http://no.wikipedia.org/wiki/Sandvika_videregående_skole">skole </a>в Норвегии, <a l:href="http://forbedre.blogspot.com/">блоггер, </a>и в данный момент переводит книгу на норвежский язык</p>
<p>(bokmål). Перевод находится в процессе. Вы можете взглянуть на него здесь: <a l:href="http://www.swaroopch.org/notes/Python_nb-no%3aInnholdsfortegnelse">http://www. </a></p>
<p><a l:href="http://www.swaroopch.org/notes/Python_nb-no%3aInnholdsfortegnelse">swaroopch.org/notes/Python_nb-no:Innholdsfortegnelse </a>.</p>
<p><strong>Eirik Vågeskar</strong>:</p>
<p>«Я всегда хотел программировать, но поскольку я разговариваю на малорас-</p>
<p>пространённом языке, процесс обучения был всегда затруднён. Большинство</p>
<p>пособий и книг написано на техническом английском языке, так что боль-</p>
<p>шинство выпускников школы даже не обладают достаточным словарным за-</p>
<p>пасом, чтобы понять, о чём идёт речь. Но как только я нашёл эту книгу, мои</p>
<p>проблемы сразу разрешились. «A Byte of Python» простым нетехническим</p>
<p>языком объясняет язык программирования, который так же прост, и это де-</p>
<p>лает изучение Python увлекательным. После прочтения половины книги, я</p>
<p>понял, что её стоит перевести. Я надеюсь, что перевод поможет людям, ока-завшимся в похожей ситуации (особенно, молодым), а может быть даже и вы-</p>
<p>зовет интерес к языку среди людей с меньшими техническими знаниями.»</p>
<p>2.1.14 Польский</p>
<p><strong>Dominik Kozaczko </strong>(dkozaczko-at-gmail-dot-com) приступил к переводу книги на польский.</p>
<p>Перевод находится в процессе, и его главная страница расположена здесь: <a l:href="http://wiki.lo5.bielsko.pl/index.php/Ukąś_Pythona">Ukąś Pythona</a>.</p>
<p> <emphasis>Обновление </emphasis>: По состоянию на 2 октября 2009г. перевод завершён. Благодарности Домини-ку, двум его студентам и их другу за потраченное время и усилия!</p>
<p><strong>Dominik Kozaczko: </strong>«Я преподаватель компьютерных наук и информационных технологий.»</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>12</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2.1.15 Португальский</p>
<p><strong>Fidel Viegas </strong>(fidel-dot-viegas-at-gmail-dot-com) взялся за перевод книги на португальский</p>
<p>язык.</p>
<p>2.1.16 Румынский</p>
<p><strong>Paul-Sebastian Manole </strong>(brokenthorn-at-gmail-dot-com) начал перевод книги на румынский</p>
<p>язык.</p>
<p><strong>Paul-Sebastian Manole</strong>:</p>
<p>«Я студент второго курса факультета компьютерных наук в университете Spiru Haret University, в Румынии. Хотя, я больше программист-самоучка и решил</p>
<p>изучить новый язык – Python. Из Интернета я узнал, что нет лучшего пути</p>
<p>для этого, чем книга «A Byte of Python». Вот насколько популярна эта кни-га (поздравляю её автора с тем, что ему удалось написать такую лёгкую для</p>
<p>восприятия книгу). Мне начал нравиться Python, и я решил помочь перево-</p>
<p>дом последней версии книги Swaroop’а на румынский язык. И хотя я и могу</p>
<p>оказаться первым с такой инициативой, если у вас есть желание помочь мне, присоединяйтесь.»</p>
<p>Перевод производится на <a l:href="http://www.swaroopch.org/notes/Python_ro">http://www.swaroopch.org/notes/Python_ro </a>.</p>
<p>2.1.17 Русский</p>
<p><strong>Владимир Смоляр </strong>(v_2e-at-ukr-dot-net) перевёл книгу на русский язык. Текущую версию</p>
<p>перевода можно найти на <a l:href="http://wombat.org.ua/AByteOfPython">http://wombat.org.ua/AByteOfPython </a>.</p>
<p>2.1.18 Украинский</p>
<p><strong>Averkiev Andrey </strong>(averkiyev-at-ukr-dot-net) взялся за перевод книги на украинский язык</p>
<p>(насколько позволяет время).</p>
<p>2.1.19 Словацкий</p>
<p><strong>Albertio Ward </strong>(albertioward-at-gmail-dot-com) перевёл книгу на словацкий язык на</p>
<p>fatcow.com/edu/python-swaroopch-sl/ :</p>
<p>«Мы являемся некоммерческой организацией под названием «Переводы для</p>
<p>обучения». Мы представляем собой группу людей, преимущественно, студен-</p>
<p>тов и преподавателей Славянского университета. Среди нас есть студенты разных факультетов: лингвистики, химии, биологии и т.д. Мы стараемся отыски-2.1. Доступные переводыпереводы</p>
<p>13</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>вать в Интернете интересные публикации, полезные для нас или наших кол-</p>
<p>лег. Иногда мы сами находим статьи, а иногда наши преподаватели помогают</p>
<p>нам подобрать материал для перевода. После получения разрешения авторов</p>
<p>статьи мы переводим статьи и публикуем их в нашем блоге, доступном на-</p>
<p>шим коллегам и друзьям. Такие переводы часто бывают полезны студентам</p>
<p>при обучении.</p>
<p>Почему я выбрал именно вашу книгу для перевода? Я сделал это для того,</p>
<p>чтобы помочь болгарам понять книгу в деталях. Оценив новизну и важность</p>
<p>обсуждаемых в книге тем, я понял, что она весьма актуальна для населения</p>
<p>моей страны. Поэтому я думаю, она будет популярна. И в данном случае будет</p>
<p>отсутствовать языковой барьер, так как он устранён моим переводом.»</p>
<p>2.1.20 Испанский</p>
<p><strong>Alfonso de la Guarda Reyes </strong>(alfonsodg-at-ictechperu-dot-net), <strong>Gustavo Echeverria </strong>(gustavo-dot-echeverria-at-gmail-dot-com), <strong>David Crespo Arroyo </strong>(davidcrespoarroyo-at-hotmail-dot-com) и <strong>Cristian Bermudez Serna </strong>(crisbermud-at-hotmail-dot-com) приступили к переводу</p>
<p>книги на испанский язык. Перевод находится в процессе. Вы можете читать испанский</p>
<p>(аргентинский) перевод на странице <a l:href="http://www.swaroopch.org/notes/Python_es-ar%3aTabla_de_Contenidos">http://www.swaroopch.org/notes/Python_es-ar:Tabla_</a></p>
<p><a l:href="http://www.swaroopch.org/notes/Python_es-ar%3aTabla_de_Contenidos">de_Contenidos </a>.</p>
<p><strong>Gustavo Echeverria </strong>говорит:</p>
<p>«Я работаю программистом в Аргентине. По большей части я использую тех-</p>
<p>нологии C# и .NET на работе, но для моих собственных проектов – только</p>
<p>Python и Ruby. Я узнал о Python довольно давно, и сразу же остановился на</p>
<p>нём. Вскоре после моего знакомства с Python я обнаружил эту книгу, и она</p>
<p>помогла мне в изучении этого языка. Тогда я решил перевести её на испан-</p>
<p>ский язык. Теперь, после нескольких обращений я начал переводить «A Byte of Python» вместе с Maximiliano Soler.»</p>
<p><strong>Cristian Bermudez Serna </strong>говорит:</p>
<p>«Я студент факультета телекоммуникаций в университете Antioquia (Колум-</p>
<p>бия). Несколько месяцев назад я решил изучать Python и обнаружил эту замечательную книгу, после чего решил подключиться к её переводу на испанский</p>
<p>язык.»</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>14</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2.1.21 Шведский</p>
<p><strong>Mikael Jacobsson </strong>(leochingkwake-at-gmail-dot-com) решил перевести эту книгу на швед-ский язык.</p>
<p>2.1.22 Турецкий</p>
<p><strong>Türker SEZER </strong>(tsezer-at-btturk-dot-net) и <strong>Bugra Cakir </strong>(bugracakir-at-gmail-dot-com) начали</p>
<p>перевод книги на турецкий язык. Где турецкая версия? Bitse de okusak.</p>
<p><strong>Примечание: </strong>Замените -at- на @ , -dot- на . и -underscore- на _ в адресах электронной почты, указанных на этой странице. Дефисы во всех остальных местах адреса</p>
<p>оставьте как есть.</p>
<p><strong>2.1. Доступные переводыпереводы</strong></p>
<p>15</p>
<p><strong>Предисловие</strong></p>
<p>Python – это, пожалуй, один из немногих языков программирования, простых в освоении</p>
<p>и одновременно мощных. Это очень важно и для начинающих, и для специалистов, но</p>
<p>что ещё важнее – на нём приятно программировать. Настоящая книга призвана помочь</p>
<p>вам в изучении этого замечательного языка и показать, как можно быстро и безболезнен-но делать многие вещи – в сущности, это такое себе «Идеальное противоядие против всех</p>
<p>ваших проблем в программировании».</p>
<p>3.1 Для кого эта книга</p>
<p>Эта книга служит путеводителем или учебным пособием для изучения языка программирования Python. Она нацелена, преимущественно, на новичков. Тем не менее, она будет</p>
<p>полезна и опытным программистам.</p>
<p>Автор задумал эту книгу так, чтобы изучить Python по ней смог любой, кто умеет хотя</p>
<p>бы сохранять текстовые файлы, впрочем, и опыт программирования этому не помеха.</p>
<p>Если у вас таки имеется предварительный опыт программирования, вас наверняка заин-тересуют различия между Python и вашим любимым языком программирования, многие из которых специально выделены в тексте. Однако, считаю своим долгом предупре-дить вас о том, что вскоре вашим любимым языком программирования всё равно станет</p>
<p>Python!</p>
<p>3.2 Немного истории</p>
<p>Впервые я обратился к Python, когда мне понадобилось написать установщик для своей программы «Diamond», чтобы упростить процесс установки. Мне пришлось выбирать</p>
<p>между привязками Python и Perl к библиотеке Qt. Я поискал информацию в сети на эту</p>
<p>тему и наткнулся на <a l:href="http://pythonology.org/success%26story%3desr">статью Эрика С. Реймонда</a>, известного и уважаемого хакера, в которой он рассказывает о том, как Python стал его любимым языком программирования.</p>
<p>Также я выяснил, что привязки PyQt были более зрелыми по сравнению с Perl-Qt. Так я</p>
<p>определился с выбором в пользу Python.</p>
<p>16</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>После этого я начал искать хорошую книгу по Python. И не нашёл! Конечно, я нашёл</p>
<p>несколько книг O’Reilly, но они были либо слишком дорогими, либо больше походили на</p>
<p>справочник, нежели на учебник. Так что мне пришлось довольствоваться документаци-ей, поставляемой в комплекте с Python. Но она оказалась слишком краткой и неполной.</p>
<p>Безусловно, она дала мне некоторое представление о том, что такое Python, но этого было</p>
<p>явно недостаточно. Мне её хватало, поскольку я имел предыдущий опыт программирования, но она никоим образом не подходила для новичков.</p>
<p>Примерно через пол года после моих первых шагов в Python я установил последнюю (на</p>
<p>тот момент) версию Red Hat Linux 9.0 и начал играться с KWord. Я был в восторге от него, и вдруг мне пришло в голову написать в нём некоторые мысли о Python. Я рассчитывал</p>
<p>написать несколько страниц, но объём быстро вырос до 30 страниц. Тогда я решил всерьёз</p>
<p>придать этому тексту форму книги. После  <emphasis>множества </emphasis> переписываний она достигла того</p>
<p>состояния, в котором она уже могла служить полезным пособием по изучению языка</p>
<p>Python. Я смотрю на свою книгу как на свой вклад и дань сообществу свободного ПО.</p>
<p>Эта книга была начата как мои личные заметки о Python, и я до сих пор смотрю на неё</p>
<p>так же, хотя и приложил немало усилий к тому, чтобы сделать её более подходящей для</p>
<p>других :)</p>
<p>И конечно, в духе свободного ПО, я получил множество конструктивных предложений, критики и отзывов от читателей, которые помогли мне значительно улучшить книгу.</p>
<p>3.3 Состояние книги</p>
<p>В октябре 2012 года были внесены некоторые исправления, обновления, а также по прось-бам нескольких пользователей страницы этой книги были переформатированы при помощи Pandoc для того, чтобы сделать возможным автоматическое генерирование электронных книг на их основе.</p>
<p>В редакции за декабрь 2008 года (по сравнению с предыдущим серьёзным пересмотром в</p>
<p>марте 2005 года) были добавлены сведения, связанные с выходом Python 3.0.</p>
<p>Эта книга нуждается в помощи своих читателей по обнаружению не очень хорошо, не</p>
<p>очень понятно или попросту неверно написанных частей. Если у вас есть такие предложения, пожалуйста, обращайтесь <a l:href="http://www.swaroopch.com/contact/">к самому автору книги </a>или  <emphasis>к автору перевода</emphasis>, который</p>
<p>вы читаете.</p>
<p><strong>3.3. Состояние книги</strong></p>
<p>17</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>3.4 Официальная веб-страница</p>
<p>Официальная страница этой книги находится по адресу <a l:href="https://python.swaroopch.com">https://python.swaroopch.com </a>, где</p>
<p>вы можете прочитать саму книгу, скачать её последнюю версию, <a l:href="http://www.swaroopch.com/buybook">купить её печатный ва-</a></p>
<p><a l:href="http://www.swaroopch.com/buybook">риант </a>и оставить свои отзывы.</p>
<p>3.5 К размышлению</p>
<p>«Существует два способа составления программ: первый состоит в том, чтобы</p>
<p>сделать её настолько простой, чтобы в ней явно не было ошибок; второй – в</p>
<p>том, чтобы сделать её настолько сложной, чтобы в ней не было явных оши-</p>
<p>бок.»</p>
<p>– C. A. R. Hoare</p>
<p>«Успех в жизни – не столько вопрос таланта и возможностей, сколько концен-трации и настойчивости.»</p>
<p>– C. W. Wendte</p>
<p><strong>3.4. Официальная веб-страница</strong></p>
<p>18</p>
<p><strong>Введение</strong></p>
<p>Python – один из тех редких языков программирования, которые одновременно претен-дуют на звание  <emphasis>простых </emphasis> и  <emphasis>мощных</emphasis>. Вас приятно удивит то, как легко можно сосредоточиться на решении поставленной задачи, а не на синтаксисе и структуре языка, на котором вы программируете.</p>
<p>Официально Python представляют так:</p>
<p>Python – это простой в освоении и мощный язык программирования. Он</p>
<p>предоставляет эффективные высокоуровневые структуры данных, а также</p>
<p>простой, но эффективный подход к объектно-ориентированному программи-</p>
<p>рованию. Его элегантный синтаксис и динамическая типизация наряду с тем, что он является интерпретируемым, делают его идеальным языком для написания сценариев и быстрой разработки приложений в различных областях и</p>
<p>на большинстве платформ.</p>
<p>В следующем разделе мы рассмотрим эти особенности более детально.</p>
<p>История названия</p>
<p>Гвидо ван Россум, создатель языка Python, назвал его так в честь телешоу на</p>
<p>BBC под названием «Летающий цирк Монти Пайтона»1, а вовсе не потому, что он любит змей, убивающих животных обвиванием своего длинного тела</p>
<p>вокруг них и задавливанием.</p>
<p>4.1 Особенности Python</p>
<p>4.1.1 Простой</p>
<p>Python – простой и минималистичный язык. Чтение хорошей программы на Python очень</p>
<p>напоминает чтение английского текста, хотя и достаточно строгого! Такая псевдо-кодовая</p>
<p>природа Python является одной из его самых сильных сторон. Она позволяет вам сосредоточиться на решении задачи, а не на самом языке.</p>
<p>1 «Monty Python’s Flying Circus» ( <emphasis>прим.перев. </emphasis>)</p>
<p>19</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>4.1.2 Лёгкий в освоении</p>
<p>Как вы увидите, на Python чрезвычайно легко начать программировать. Python обладает</p>
<p>исключительно простым синтаксисом, как уже отмечалось выше.</p>
<p>4.1.3 Свободный и открытый</p>
<p>Python – это пример свободного и открытого программного обеспечения –  <emphasis>FLOSS</emphasis></p>
<p>(Free/Libré and Open Source Software). Проще говоря, вы имеете право свободно распространять копии этого программного обеспечения, читать его исходные тексты, вносить</p>
<p>изменения, а также использовать его части в своих программах. В основе свободного ПО</p>
<p>лежит идея сообщества, которое делится своими знаниями. Это одна из причин, по которым Python так хорош: он был создан и постоянно улучшается сообществом, которое</p>
<p>просто хочет сделать его лучше.</p>
<p>4.1.4 Язык высокого уровня</p>
<p>При написании программы на Python вам никогда не придётся отвлекаться на такие низ-коуровневые детали, как управление памятью, используемой вашей программой, и т.п.</p>
<p>4.1.5 Портируемый</p>
<p>Благодаря своей открытой природе, Python был портирован на много платформ (т.е. изменён таким образом, чтобы работать на них). Все ваши программы смогут запускаться</p>
<p>на любой из этих платформ без каких-либо изменений, если только вы избегали использования системно-зависимых функций.</p>
<p>Python можно использовать в GNU/Linux, Windows, FreeBSD, Macintosh, Solaris, OS/2, Amiga, AROS, AS/400, BeOS, OS/390, z/OS, Palm OS, QNX, VMS, Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE и даже на PocketPC!</p>
<p>Вы можете даже использовать такую платформу, как <a l:href="http://kivy.org/">Kivy </a>для создания игр для iOS</p>
<p>(iPhone, iPad) и Android.</p>
<p>4.1.6 Интерпретируемый</p>
<p>Это требует некоторого пояснения.</p>
<p>Программа, написанная на компилируемом языке программирования, как например, C</p>
<p>или C++, преобразуется из исходного языка (т.е. C или C++) в язык, понятный компью-теру (бинарный код, т.е. нули и единицы) при помощи компилятора с применением</p>
<p><strong>4.1. Особенности Python</strong></p>
<p>20</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>разнообразных флагов и параметров. Когда вы запускаете такую программу, компонов-щик/загрузчик копирует программу с диска в оперативную память и запускает её.</p>
<p>Python же, напротив, не требует компиляции в бинарный код. Программа просто  <emphasis>выполняется </emphasis> из исходного текста. Python сам преобразует этот исходный текст в некоторую про-межуточную форму, называемую байткодом, а затем переводит его на машинный язык и</p>
<p>запускает. Всё это заметно облегчает использование Python, поскольку нет необходимости заботиться о компиляции программы, подключении и загрузке нужных библиотек и</p>
<p>т.д. Вместе с тем, это делает программы на Python намного более переносимыми, так как</p>
<p>достаточно их просто скопировать на другой компьютер, и они работают!</p>
<p>4.1.7 Объектно-ориентированный</p>
<p>Python</p>
<p>поддерживает</p>
<p>как</p>
<p>процедурно-ориентированное,</p>
<p>так</p>
<p>и</p>
<p>объектно-</p>
<p>ориентированное программирование. В  <emphasis>процедурно-ориентированных </emphasis> языках программы</p>
<p>строятся на основе процедур или функций, которые представляют собой просто-напросто</p>
<p>многократно используемые фрагменты программы. В  <emphasis>объектно-ориентированных </emphasis> языках программирования программы строятся на основе объектов, объединяющих в себе</p>
<p>данные и функционал. Python предоставляет простые, но мощные средства для ООП, особенно в сравнении с такими большими языками программирования, как C++ или</p>
<p>Java.</p>
<p>4.1.8 Расширяемый</p>
<p>Если вам нужно, чтобы некоторая критическая часть программы работала очень быстро</p>
<p>или вы вынуждены скрыть часть алгоритма, вы можете написать эту часть программы</p>
<p>на C или C++, а затем вызывать её из программы на Python.</p>
<p>4.1.9 Встраиваемый</p>
<p>Python можно встраивать в программы на C/C++, чтобы предоставлять возможности написания сценариев их пользователям.</p>
<p>4.1.10 Обширные библиотеки</p>
<p>Стандартная библиотека Python просто огромна. Она может помочь в решении самых</p>
<p>разнообразных задач, связанных с использованием регулярных выражений, генерирова-нием документации, проверкой блоков кода, распараллеливанием процессов, базами данных, веб-браузерами, CGI, FTP, электронной почтой, XML, XML-RPC, HTML, WAV файлами, криптографией, GUI (графическим интерфейсом пользователя) и другими системно-зависимыми вещами. Помните, что всё это доступно абсолютно везде, где установлен</p>
<p>Python. В этом заключается философия Python «Всё включено».</p>
<p><strong>4.1. Особенности Python</strong></p>
<p>21</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Кроме стандартной библиотеки, существует множество других высококачественных библиотек, которые можно найти в <a l:href="http://pypi.python.org/pypi">Каталоге пакетов Python</a></p>
<p>Резюме</p>
<p>Python – очень увлекательный и мощный язык. Он имеет хорошее соотноше-</p>
<p>ние производительности и возможностей, что делает написание программ на</p>
<p>нём одновременно интересным и лёгким.</p>
<p>4.2 Python 2 против 3</p>
<p>Если вас не интересует разница между Python 2 и Python 3, вы можете пропустить этот</p>
<p>радел. Но в любом случае помните, какую версию вы используете.</p>
<p>В 2008 году эта книга была переписана для Python 3. Это была одна из первых книг, по-свящённых Python 3. Однако, к сожалению, это привело к путанице среди пользователей, пытавшихся изучать Python 2 по версии книги для Python 3 и наоборот. Тем не менее, мир понемногу мигрирует на Python 3.</p>
<p>Так что да, в этой книге вы будете учиться программировать на Python 3, даже если в ко-нечном счёте планируете использовать Python 2.  <emphasis>Помните, что как только вы как следует</emphasis></p>
<p> <emphasis>усвоите и научитесь пользоваться любым из них, вы также сможете легко освоить разницу</emphasis></p>
<p> <emphasis>между ними и адаптироваться. Самое сложное заключается в обучении программированию</emphasis></p>
<p> <emphasis>и понятии основной части языка Python. Это и будет нашей целью в настоящей книге, а</emphasis></p>
<p> <emphasis>как только вы её достигнете, вы сможете запросто использовать Python 2 или Python 3 в</emphasis></p>
<p> <emphasis>зависимости от конкретной ситуации. </emphasis></p>
<p>Изучить разницу между Python 2 и Python 3 в деталях можно на <a l:href="https://wiki.ubuntu.com/Python/3">странице Ubuntu wiki, </a></p>
<p><a l:href="https://wiki.ubuntu.com/Python/3">посвящённой Python 3</a>.</p>
<p>4.3 Что говорят программисты</p>
<p>Интересно, что такие великие хакеры, как Эрик Рэймонд, говорят о Python: 1.  <emphasis>Эрик С. Рэймонд </emphasis>– автор работы «Собор и Базар», а также человек, который ввёл</p>
<p>термин «Open Source». Он говорит, что <a l:href="http://www.linuxjournal.com/article.php?sid%3d3882">Python стал его любимым языком програм-</a></p>
<p><a l:href="http://www.linuxjournal.com/article.php?sid%3d3882">мирования</a>. Эта статья и вдохновила меня на пробу пера в Python.</p>
<p>2.  <emphasis>Брюс Экель </emphasis>– автор знаменитых книг «Думаем на Java» и «Думаем на С++». Он</p>
<p>утверждает, что ни на одном языке программирования его работа не была столь</p>
<p>эффективной, как на Python. Кроме того, он считает, что Python – это, пожалуй, единственный язык, стремящийся облегчить жизнь программисту. Подробнее можно прочитать в <a l:href="http://www.artima.com/intv/aboutme.html">его полном интервью</a>.</p>
<p><strong>4.2. Python 2 против 3</strong></p>
<p>22</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>3.  <emphasis>Питер Норвиг </emphasis>– широко известный автор Lisp, а также директор по качеству поиска в Google (спасибо Гвидо ван Россуму за это замечание). Он говорит, что Python всегда был неотъемлемой частью Google. Вы можете убедиться в этом, заглянув на</p>
<p>страницу <a l:href="http://www.google.com/jobs/index.html">Google Jobs, </a>на которой владение Python указано как требование для разработчиков программного обеспечения.</p>
<p><strong>4.3. Что говорят программисты</strong></p>
<p>23</p>
<p><strong>Установка</strong></p>
<p>Если у вас уже установлен Python 2.x, нет необходимости его удалять для того, чтобы</p>
<p>установить Python 3.0. Обе версии могут быть установлены в системе одновременно.</p>
<p>5.1 Установка в GNU/Linux и BSD</p>
<p>Если вы используете один из дистрибутивов GNU/Linux, таких как Ubuntu, Fedora, OpenSUSE, Debian, CentOS или {ваш вариант}, или один из вариантов BSD, как например, FreeBSD, то скорее всего, в вашей системе уже установлен Python.</p>
<p>Чтобы проверить, установлен ли Python на вашей машине с BSD или GNU/Linux, открой-те эмулятор терминала (например, konsole или gnome-terminal) и введите команду</p>
<p>python -V, как показано ниже.</p>
<p>$ python -V</p>
<p>Python 3.3.0</p>
<p><strong>Примечание: </strong>$ – это приглашение командной строки. Оно может выглядеть по-разному</p>
<p>в зависимости от настроек вашей ОС, поэтому я буду обозначать приглашение просто</p>
<p>одним символом $.</p>
<p>Если вы видите информацию о версии, как показано выше, значит Python у вас уже установлен.</p>
<p>Если же вы получаете такое сообщение:</p>
<p>$ python -V</p>
<p>bash: Python: command not found</p>
<p>значит, Python у вас не установлен. Это маловероятно, но всё же возможно.</p>
<p><strong>Примечание: </strong>Если у вас уже установлен Python 3.x, попробуйте  <emphasis>python3 -V</emphasis>.</p>
<p>24</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>В этом случае у вас будут два варианта установки Python:</p>
<p>• Скомпилировать Python из <a l:href="http://www.python.org/download/releases/3.1.1/">исходных текстов </a>и установить его. Инструкция по компиляции есть на указанном веб-сайте.</p>
<p>• Установить бинарные пакеты, используя пакетный менеджер, входящий в комплект поставки вашей ОС, как например, apt-get в Ubuntu/Debian и других дистри-бутивах, основанных на Debian, yum в Fedora, pkg_add во FreeBSD, и т.д. Обратите</p>
<p>внимание, что для этого потребуется соединение с Интернетом. В противном случае вы можете любым другим способом скопировать бинарники на свой компьютер</p>
<p>и установить оттуда.</p>
<p>5.2 Установка в Windows</p>
<p>Посетите страницу <a l:href="http://www.python.org/download/">http://www.python.org/download/ </a>и загрузите последнюю версию. Установка производится так же, как и для любых других программ для Windows.</p>
<p><strong>Осторожно: </strong>Когда вам будет предложено отключить некоторые «опцио-</p>
<p>нальные» компоненты, не отключайте ни одного! Некоторые из этих ком-</p>
<p>понентов могут вам пригодиться, особенно IDLE.</p>
<p>Интересно, что большую часть загрузок производят именно пользователи Windows. Конечно, это не даёт представления о полной картине, поскольку у большинства пользователей GNU/Linux Python установлен в системе по умолчанию.</p>
<p>5.2.1 Командная строка DOS</p>
<p>Для использования Python из командной строки Windows, т.е. приглашения DOS, необходимо установить должным образом переменную PATH.</p>
<p>Для Windows 2000, XP, 2003 , перейдите в «Панель управления»  <emphasis>→ </emphasis>«Система»  <emphasis>→ </emphasis>«Дополнительно»  <emphasis>→ </emphasis>«Переменные среды». Нажмите на переменной с именем PATH в отделе «Системные переменные», после этого выберите «Редактировать» и допишите ;C:\ Python33 к концу того, что там уже есть (проверьте, существует ли такой каталог, так как</p>
<p>для более новых версий Python он будет иметь другое имя). Конечно, укажите действи-тельное имя каталога.</p>
<p>Для более старых версий Windows добавьте следующую строку в файл C:\AUTOEXEC.BAT</p>
<p>: „PATH=%PATH%;C:\Python33“ (без кавычек) и перезапустите систему. Для Windows NT</p>
<p>используйте файл AUTOEXEC.NT.</p>
<p>Для Windows Vista:</p>
<p>1. Нажмите кнопку «Пуск» и выберите «Панель управления».</p>
<p><strong>5.2. Установка в Windows</strong></p>
<p>25</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>2. Нажмите «Система», справа вы увидите «Просмотр основных сведений о вашем</p>
<p>компьютере». Слева – список действий, последним из которых будет «Дополнительные параметры системы.» Нажмите её. Отобразится вкладка «Дополнительно»</p>
<p>диалога параметров системы. Нажмите кнопку «Переменные среды» справа внизу.</p>
<p>3. В нижнем поле под названием «Системные переменные» прокрутите до Path и</p>
<p>нажмите кнопку «Редактировать».</p>
<p>4. Измените путь, как нужно.</p>
<p>5. Перезапустите систему. Vista не обновляет системные пути до перезагрузки.</p>
<p>Для Windows 7:</p>
<p>1. Щёлкните правой кнопкой мыши на значке «Компьютер» на рабочем столе и выберите «Свойства»; иначе – нажмите кнопку «Пуск» и выберите «Панель Управления»  <emphasis>→ </emphasis>«Система и безопасность»  <emphasis>→ </emphasis>«Система». Нажмите «Дополнительные параметры системы» слева, а затем выберите вкладку «Дополнительно». Внизу нажмите</p>
<p>кнопку «Переменные среды» и в отделе «Системные переменные» найдите переменную PATH, выберите её и нажмите «Редактировать».</p>
<p>2. Перейдите к концу строки в поле «Значение переменной» и допишите ;C:\ Python33.</p>
<p>3. Если значение переменной было %SystemRoot%\system32;, теперь оно примет</p>
<p>вид %SystemRoot%\system32;C:\Python33</p>
<p>4. Нажмите «Ok», и всё. Перезагрузка не требуется.</p>
<p>5.2.2 Запуск командной строки Python в Windows</p>
<p>Если вы должным образом  <emphasis>установили значение переменной PATH</emphasis>, теперь можно запускать интерпретатор из командной строки.</p>
<p>Чтобы открыть терминал в Windows, нажмите кнопку «Пуск» и выберите «Выполнить».</p>
<p>В появившемся диалоговом окне наберите cmd и нажмите Enter.</p>
<p>Затем наберите python и проверьте, нет ли ошибок.</p>
<p>5.3 Для пользователей Mac OS X</p>
<p>У пользователей Mac OS X Python уже будет установлен в системе. В противном случае вы</p>
<p>можете открыть терминал, нажав Command+Пробел, набрав в открывшейся строке поиска</p>
<p>Terminal и нажав Enter.</p>
<p>Затем установить <a l:href="http://mxcl.github.com/homebrew/">Homebrew</a>, выполнив: <strong>5.3. Для пользователей Mac OS X</strong></p>
<p>26</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"</p>
<p>После чего установить Python 3 при помощи:</p>
<p>brew install python3</p>
<p>А теперь запустите python3 -V и проверьте, нет ли ошибок.</p>
<p>5.4 Резюме</p>
<p>У пользователей систем GNU/Linux и BSD, вероятнее всего, Python уже установлен. В противном случае его можно установить, используя пакетный менеджер, поставляемый с</p>
<p>вашим дистрибутивом. Для Windows установка Python сводится к загрузке установщика</p>
<p>и двойному щелчку на нём. С этого момента мы будем считать, что Python 3 в вашей</p>
<p>системе установлен.</p>
<p>Далее мы приступим к написанию нашей первой программы на Python.</p>
<p><strong>5.4. Резюме</strong></p>
<p>27</p>
<p><strong>Первые шаги</strong></p>
<p>Давайте посмотрим, как создать традиционную программу «Hello World» на Python. Это</p>
<p>научит вас писать, сохранять и выполнять программы на Python.</p>
<p>Существует два способа запуска программ на Python: использование интерактивного</p>
<p>приглашения интерпретатора и использование файла с текстом программы. Сейчас мы</p>
<p>увидим, как пользоваться обоими методами.</p>
<p>6.1 Использование командной строки интерпрета-</p>
<p>тора</p>
<p>Откройте окно терминала (как было описано в главе  <emphasis>Установка</emphasis>) и запустите интерпретатор Python, введя команду python3 и нажав Enter.</p>
<p>Пользователи Windows могут запустить интерпретатор в командной строке, если установили переменную PATH надлежащим образом. Чтобы открыть командную строку в</p>
<p>Windows, зайдите в меню «Пуск» и нажмите «Выполнить…». В появившемся диалоговом окне введите «cmd» и нажмите Enter; теперь у вас будет всё необходимое для начала</p>
<p>работы с python в командной строке DOS.</p>
<p>Если вы используете IDLE, нажмите «Пуск»  <emphasis>→ </emphasis>«Программы»  <emphasis>→ </emphasis>«Python 3.0»  <emphasis>→ </emphasis>«IDLE</p>
<p>(Python GUI)».</p>
<p>Как только вы запустили python3, вы должны увидеть &gt;&gt;&gt; в начале строки, где вы можете</p>
<p>что-то набирать. Это и называется  <emphasis>командной строкой интерпретатора Python</emphasis>.</p>
<p>Теперь введите print('Hello World') и нажмите клавишу Enter. В результате должны</p>
<p>появиться слова «Hello World».</p>
<p>Вот пример того, что вы можете увидеть на экране, если будете использовать компьютер с</p>
<p>Mac OS X. Информация о версии Python может отличаться в зависимости от компьютера, но часть, начинающаяся с приглашения (т.е. от &gt;&gt;&gt; и далее) должна быть одинаковой на</p>
<p>всех операционных системах.</p>
<p>28</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>$ python3</p>
<p>Python 3.3.0 (default, Oct 22 2012, 12:20:36)</p>
<p>[GCC 4.2.1 Compatible Apple Clang 4.0 ((tags/Apple/clang-421.0.60))] on darwin Type "help", "copyright", "credits" or "license" for more information.</p>
<p>&gt;&gt;&gt; print('hello world')</p>
<p>hello world</p>
<p>&gt;&gt;&gt;</p>
<p>Обратите внимание, что Python выдаёт результат работы строки немедленно! Вы только</p>
<p>что ввели одиночный «оператор» Python. print используется для того, чтобы (что неуди-</p>
<p>вительно1 ) напечатать любое переданное в него значение. В данном случае мы передали</p>
<p>в него текст «Hello World», который и был напечатан на экране.</p>
<p><strong>Совет: </strong>Как выйти из командной строки интерпретатора</p>
<p>Если вы используете IDLE или оболочку GNU/Linux или BSD, вы можете выйти из командной строки интерпретатора нажатием Ctrl-D или введя команду exit() (примечание: не забудьте написать скобки, «()»), а затем нажав клавишу Enter. Если вы используете</p>
<p>командную строку Windows, нажмите Ctrl-Z, а затем нажмите клавишу Enter.</p>
<p>6.2 Выбор редактора</p>
<p>Поскольку мы не можем набирать программу в командной строке интерпретатора каждый раз, когда нам нужно что-то запустить, нам понадобится сохранять программы в</p>
<p>файлах, чтобы потом иметь возможность запускать их сколько угодно раз.</p>
<p>Прежде чем приступить к написанию программ на Python в файлах, нам нужен редактор</p>
<p>для работы с файлами программ. Выбор редактора крайне важен. Подходить к выбору редактора следует так же, как и к выбору личного автомобиля. Хороший редактор поможет</p>
<p>вам легко писать программы на Python, делая ваше путешествие более комфортным, а</p>
<p>также позволяя быстрее и безопаснее достичь вашей цели.</p>
<p>Одно из самых основных требований – это  <emphasis>подсветка синтаксиса</emphasis>, когда разные элементы</p>
<p>программы на Python раскрашены так, чтобы вы могли легко  <emphasis>видеть </emphasis> вашу программу и</p>
<p>ход её выполнения.</p>
<p>Если вы не знаете, с чего начать, я бы порекомендовал воспользоваться программой</p>
<p><a l:href="http://www.activestate.com/komodo-edit/downloads">Komodo Edit, </a>которая доступна для Windows, Mac OS X и GNU/Linux.</p>
<p>Если вы пользуетесь Windows, <strong>Не используйте Блокнот </strong>– это плохой выбор, поскольку он не обладает функцией подсветки синтаксиса, а также не позволяет автоматически</p>
<p>1 «print» –  <emphasis>англ. </emphasis>«Печатать» ( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>6.2. Выбор редактора</strong></p>
<p>29</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>вставлять отступы, что очень важно в нашем случае, как мы увидим позже. Хорошие редакторы, как Komodo Edit, позволяют делать это автоматически.</p>
<p>Опытные программисты, должно быть, уже используют <a l:href="http://www.vim.org/">Vim </a>или <a l:href="http://www.gnu.org/software/emacs/">Emacs. </a>Не стоит даже</p>
<p>и говорить, что это два наиболее мощных редактора, и вы только выиграете от их использования для написания программ на Python. Лично я пользуюсь ими обоими для</p>
<p>большинства своих программ, и даже написал <a l:href="http://www.swaroopch.com/notes/vim">книгу о Vim. </a>Я настоятельно рекомендую</p>
<p>вам решиться и потратить время на изучение Vim или Emacs, поскольку это будет прино-сить вам пользу долгие годы. Однако, как я уже писал выше, новички могут пока просто</p>
<p>остановиться на Komodo Edit и сосредоточиться на изучении Python, а не текстового редактора.</p>
<p>Я повторюсь ещё раз: обязательно выберите подходящий редактор – это сделает написание программ на Python более простым и занимательным.</p>
<p>Для пользователей Vim</p>
<p>Существует хорошее введение в <a l:href="http://blog.sontek.net/turning-vim-into-a-modern-python-ide">использование Vim как мощного IDE для</a></p>
<p><a l:href="http://blog.sontek.net/turning-vim-into-a-modern-python-ide">Python, автор – John M Anderson. </a>Также я рекомендую <a l:href="https://github.com/davidhalter/jedi-vim">плагин jedi-vim </a>и <a l:href="https://github.com/swaroopch/dotvim">мой</a></p>
<p><a l:href="https://github.com/swaroopch/dotvim">собственный конфигурационный файл</a>.</p>
<p>Для пользователей Emacs</p>
<p>Существует хорошее введение в <a l:href="http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/">использование Emacs как мощного IDE для</a></p>
<p><a l:href="http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/">Python, автор – Ryan McGuire</a>. Также я рекомендую <a l:href="https://github.com/ghoseb/dotemacs">Конфигурацию dotemacs</a></p>
<p><a l:href="https://github.com/ghoseb/dotemacs">от BG</a>.</p>
<p>6.3 Использование программных файлов</p>
<p>А теперь давайте вернёмся к программированию. Существует такая традиция, что какой</p>
<p>бы язык программирования вы ни начинали учить, первой вашей программой должна</p>
<p>быть программа «Привет, Мир!». Это программа, которая просто выводит надпись «Привет, Мир!». Как сказал Simon Cozens2, это «традиционное заклинание богов программирования, которое поможет вам лучше изучить язык».</p>
<p>Запустите выбранный вами редактор, введите следующую программу и сохраните её под</p>
<p>именем helloworld.py .</p>
<p>Если вы пользуетесь Komodo Edit, нажмите «Файл»  <emphasis>→ </emphasis>«Новый»  <emphasis>→ </emphasis>«Новый файл», введите строку:</p>
<p>print('Привет, Мир!')</p>
<p>В Komodo Edit нажмите «Файл»  <emphasis>→ </emphasis>«Сохранить» для сохранения файла.</p>
<p>2 Автор восхитительной книги «Beginning Perl»</p>
<p><strong>6.3. Использование программных файлов</strong></p>
<p>30</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Куда сохранить файл? В любую папку, расположение которой вы знаете. Если вы не пони-маете, что это значит, то создайте новую папку и используйте её для всех ваших программ</p>
<p>на Python:</p>
<p>• C:\py в Windows</p>
<p>• /tmp/py в GNU/Linux</p>
<p>• /tmp/py в Mac OS X</p>
<p>Чтобы создать папку, воспользуйтесь командой mkdir в терминале. Например, mkdir /</p>
<p>tmp/py.</p>
<p><strong>Важно: </strong>Не забывайте указывать расширение файла .py. Например, «file.py».</p>
<p>В Komodo Edit нажмите «Инструменты»  <emphasis>→ </emphasis>«Запуск команды», наберите python3</p>
<p>helloworld.py и нажмите «Выполнить». Вы должны увидеть вывод, показанный на</p>
<p>скриншоте ниже.</p>
<p>Но всё-таки лучше редактировать программу в Komodo Edit, а запускать в терминале: 1. Откройте терминал, как описано в главе  <emphasis>Установка</emphasis>.</p>
<p>2. Перейдите в каталог, в котором вы сохранили файл. Например, cd /tmp/py.</p>
<p>3. Запустите программу, введя команду python3 helloworld.py.</p>
<p>Вывод программы показан ниже.</p>
<p>$ python3 helloworld.py</p>
<p>Привет, Мир!</p>
<p>Если у вас получился такой же вывод, поздравляю! – вы успешно выполнили вашу</p>
<p>первую программу на Python. Вы только что совершили самый сложный шаг в обучении</p>
<p>программированию, заключающийся в написании своей первой программы!</p>
<p>Если вы получите сообщение об ошибке, введите вышеуказанную программу  <emphasis>в точности </emphasis> так, как показано здесь, и запустите снова. Обратите внимание, что Python различает</p>
<p>регистр букв, то есть print – это не то же самое, что Print (обратите внимание на букву</p>
<p>p в нижнем регистре в первом случае и на букву P в верхнем регистре во втором). Также</p>
<p>убедитесь, что перед первым символом в строке нет пробелов или символов табуляции –</p>
<p>позже мы увидим, почему это важно.</p>
<p><strong>Как это работает</strong></p>
<p>Программа на Python состоит из  <emphasis>выражений</emphasis>. В нашей первой программе имеется всего лишь одно выражение. В этом выражении мы вызываем функцию</p>
<p>print, которая просто выводит текст 'Привет, Мир!'. О функциях мы узна-</p>
<p>ем в  <emphasis>одной из последующих глав</emphasis>, а пока вам достаточно понять, что всё, что вы</p>
<p><strong>6.3. Использование программных файлов</strong></p>
<p>31</p>
<p><image l:href="#img_1"/></p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>укажете в скобках, будет выведено на экран. В данном примере мы указали</p>
<p>'Привет, Мир!'.</p>
<p>6.3.1 Исполнимые программы на Python</p>
<p>Это касается только пользователей GNU/Linux и Unix, но пользователям Windows тоже</p>
<p>будет полезно об этом знать.</p>
<p>Каждый раз, когда нам нужно запустить программу на Python, нам приходится в явном</p>
<p>виде запускать python3 foo.py. Но почему бы нам не запускать её точно так же, как и</p>
<p>все другие программы? Этого можно достичь при помощи так называемого  <emphasis>hashbang</emphasis>.</p>
<p>Добавьте строку, указанную ниже, в  <emphasis>самое начало </emphasis> вашей программы: <strong>6.3. Использование программных файлов</strong></p>
<p>32</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p> <emphasis>#!/usr/bin/env python3</emphasis></p>
<p>Теперь ваша программа должна выглядеть так:</p>
<p> <emphasis>#!/usr/bin/env python3</emphasis></p>
<p>print('Привет, Мир!')</p>
<p>Теперь необходимо установить программе атрибут исполнимости, используя команду</p>
<p> <emphasis>chmod</emphasis>, а затем  <emphasis>выполнить </emphasis> программу.</p>
<p>Команда chmod здесь используется для изменения режима файла3 добавлением атрибута</p>
<p>исполнимости для всех пользователей в системе4.</p>
<p>$ chmod a+x helloworld.py</p>
<p>После этого мы можем запускать программу напрямую, потому что наша операционная</p>
<p>система запустит /usr/bin/env, который, в свою очередь, найдёт Python 3, а значит, сможет запустить наш файл.</p>
<p>$ ./helloworld.py</p>
<p>Привет, Мир!</p>
<p>Здесь «./» обозначает, что программа находится в текущем каталоге.</p>
<p>Ради интереса можете даже переименовать файл в просто «helloworld» и запустить его</p>
<p>как ./helloworld, и это также сработает, поскольку система знает, что запускать программу нужно интерпретатором, положение которого указано в первой строке файла программы.</p>
<p>Но до сих пор мы могли выполнять свою программу только если знали полный путь</p>
<p>к ней. А что, если нам нужно запускать эту программу из любого каталога? Это можно</p>
<p>организовать, расположив свою программу в одном из каталогов, перечисленных в переменной окружения PATH.</p>
<p>При попытке запуска какой-либо программы система ищет её в каталогах, перечисленных в переменной окружения PATH, и запускает. Таким образом, мы можем сделать программу доступной из любого места, скопировав её в один из каталогов, перечисленных в</p>
<p>PATH.</p>
<p>$ echo $PATH</p>
<p>/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin</p>
<p>$ cp helloworld.py /home/swaroop/bin/helloworld</p>
<p>$ helloworld</p>
<p>Привет, Мир!</p>
<p>3 <strong>ch</strong>ange <strong>mod</strong>e – англ. «изменить режим» ( <emphasis>прим. перев. </emphasis>) 4 В указанной команде буква «<strong>a</strong>» взята из слова «<strong>a</strong>ll» ( <emphasis>англ. </emphasis>«все»), а буква «<strong>x</strong>» – из слова «e<strong>x</strong>ecute» ( <emphasis>англ. </emphasis></p>
<p>«исполнять») –  <emphasis>прим. перев. </emphasis></p>
<p><strong>6.3. Использование программных файлов</strong></p>
<p>33</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Мы можем вывести на экран значение переменной PATH при помощи команды echo, добавив перед именем переменной символ $, чтобы указать оболочке, что мы хотим получить значение этой переменной. Мы видим, что /home/swaroop/bin – один из каталогов в переменной PATH, где  <emphasis>swaroop </emphasis>– это имя пользователя, которое я использую</p>
<p>в своей системе. В вашей системе, скорее всего, будет аналогичный каталог для вашего</p>
<p>пользователя.</p>
<p>Вы также можете добавить какой-либо каталог к переменной PATH – это можно сделать, выполнив PATH=$PATH:/home/swaroop/mydir, где '/home/swaroop/mydir' – это каталог, который я хочу добавить к переменной PATH.</p>
<p>Этот метод полезен для написания сценариев, которые будут доступны для запуска в любой момент из любого места. По сути, это равносильно созданию собственных команд, как</p>
<p>cd или любой другой, которые часто используются в терминале GNU/Linux или пригла-шении DOS.</p>
<p><strong>Примечание: </strong>Когда речь идёт о Python, слова «программа» или «сценарий (скрипт)»</p>
<p>обозначают одно и то же.</p>
<p>6.4 Получение помощи</p>
<p>Для быстрого получения информации о любой функции или операторе Python служит</p>
<p>встроенная функция help. Это особенно удобно при использовании командной строки</p>
<p>интерпретатора. К примеру, выполните help(print) – это покажет справку по функции</p>
<p>print, которая используется для вывода на экран.</p>
<p><strong>Примечание: </strong>Для выхода из справки нажмите q.</p>
<p>Аналогичным образом можно получить информацию почти о чём угодно в Python. При</p>
<p>помощи функции help() можно даже получить описание самой функции help!</p>
<p>Если вас интересует информация об операторах, как например, return, их необходимо</p>
<p>указывать в кавычках (например, help('return')), чтобы Python понял, чего мы хотим.</p>
<p><strong>6.4. Получение помощи</strong></p>
<p>34</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>6.5 Резюме</p>
<p>Теперь вы умеете с лёгкостью писать, сохранять и запускать программы на Python.</p>
<p>И поскольку сейчас вы уже используете Python, давайте узнаем больше о его основных</p>
<p>принципах.</p>
<p><strong>6.5. Резюме</strong></p>
<p>35</p>
<p><strong>Основы</strong></p>
<p>Просто напечатать «Привет, Мир!» недостаточно, верно? Вы хотите сделать больше – вы</p>
<p>хотите ввести что-то в программу, обработать и получить нечто на выходе. В Python это</p>
<p>можно организовать при помощи констант и переменных, а также некоторыми другими</p>
<p>способами, которые будут рассмотрены в этой главе.</p>
<p>7.1 Комментарии</p>
<p> <emphasis>Комментарии </emphasis>– это то, что пишется после символа #, и представляет интерес лишь как</p>
<p>заметка для читающего программу.</p>
<p>Например:</p>
<p>print('Привет, Мир!) # print -- это функция</p>
<p>или:</p>
<p> <emphasis># print -- это функция</emphasis></p>
<p>print('Привет, Мир!)</p>
<p>Старайтесь в своих программах писать как можно больше полезных комментариев, объ-ясняющих:</p>
<p>• предположения;</p>
<p>• важные решения;</p>
<p>• важные детали;</p>
<p>• проблемы, которые вы пытаетесь решить;</p>
<p>• проблемы, которых вы пытаетесь избежать и т.д.</p>
<p><a l:href="http://www.codinghorror.com/blog/2006/12/code-tells-you-how-comments-tell-you-why.html">Текст программы говорит о том, КАК, а комментарии должны объяснять, ПОЧЕМУ</a>.</p>
<p>Это будет полезно для тех, кто будет читать вашу программу, так как им легче будет понять, что программа делает. Помните, что таким человеком можете оказаться вы сами</p>
<p>через полгода!</p>
<p>36</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>7.2 Литеральные константы</p>
<p>Примером литеральной константы может быть число, например, 5, 1.23, 9.25e-3 или</p>
<p>что-нибудь вроде 'Это строка' или "It's a string!". Они называются литеральными, потому что они «буквальны»1 – вы используете их значение буквально. Число 2 всегда представляет само себя и ничего другого – это «константа», потому что её значение</p>
<p>нельзя изменить. Поэтому всё это называется литеральными константами.</p>
<p>7.3 Числа</p>
<p>Числа в Python бывают трёх типов: целые, с плавающей точкой и комплексные.</p>
<p>• Примером целого числа может служить 2.</p>
<p>• Примерами чисел с плавающей точкой (или «плавающих» для краткости) могут</p>
<p>быть 3.23 и 52.3E-4. Обозначение E показывает степени числа 10. В данном случае</p>
<p>52.3E-4 означает 52.3 * 10-4.</p>
<p>• Примеры комплексных чисел: (-5+4j) и (2.3 - 4.6j)</p>
<p><strong>Замечание для опытных программистов</strong></p>
<p>Нет отдельного типа „long int“ (длинное целое). Целые числа по умолчанию могут быть</p>
<p>произвольной длины.</p>
<p>7.4 Строки</p>
<p>Строка – это  <emphasis>последовательность символов</emphasis>. Чаще всего строки – это просто некоторые</p>
<p>наборы слов.</p>
<p>Слова могут быть как на английском языке, так и на любом другом, поддерживаемом</p>
<p>стандартом Unicode, что означает <a l:href="http://www.unicode.org/cldr/data/charts/supplemental/languages_and_scripts.html">почти на любом языке мира</a>.</p>
<p><strong>Замечание для опытных программистов</strong></p>
<p>В Python 3 нет ASCII-строк, потому что Unicode является надмножеством (включает в се-бя) ASCII. Если необходимо получить строку строго в кодировке ASCII, используйте str.</p>
<p>encode("ascii"). Подробнее смотрите в <a l:href="http://stackoverflow.com/questions/175240/how-do-i-convert-a-files-format-from-unicode-to-ascii-using-python#175270">обсуждении этого вопроса на StackOverflow</a>. По</p>
<p>умолчанию все строки в Unicode.</p>
<p>1 «literal» –  <emphasis>англ. </emphasis>«буквальный»; вспомните «литера» ( <emphasis>син. </emphasis>«буква»). ( <emphasis>прим. перев. </emphasis>) <strong>7.2. Литеральные константы</strong></p>
<p>37</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Я могу с уверенностью сказать, что вы будете использовать строки почти в каждой вашей</p>
<p>программе на Python. Поэтому уделите внимание тому, как работать со строками в Python.</p>
<p>7.4.1 Одинарные кавычки</p>
<p>Строку можно указать, используя одинарные кавычки, как например, 'Фраза в</p>
<p>кавычках'. Все пробелы и знаки табуляции сохранятся, как есть.</p>
<p>7.4.2 Двойные кавычки</p>
<p>Строки в двойных кавычках работают точно так же, как и в одинарных. Например,</p>
<p>"What's your name?".</p>
<p>7.4.3 Тройные кавычки</p>
<p>Можно указывать «многострочные» строки с использованием тройных кавычек (""" или</p>
<p>'''). В пределах тройных кавычек можно свободно использовать одинарные и двойные</p>
<p>кавычки. Например:</p>
<p> <emphasis>'''Это многострочная строка. Это её первая строка. </emphasis></p>
<p> <emphasis>Это её вторая строка. </emphasis></p>
<p> <emphasis>"What's your name?", - спросил я. </emphasis></p>
<p> <emphasis>Он ответил: "Bond, James Bond." </emphasis></p>
<p> <emphasis>''' </emphasis></p>
<p>7.4.4 Строки неизменяемы</p>
<p>Это означает, что после создания строки её больше нельзя изменять. На первый взгляд</p>
<p>это может показаться недостатком, но на самом деле это не так. Впоследствии на примере</p>
<p>разных программ мы увидим, почему это не является ограничением.</p>
<p>7.4.5 Объединение строковых констант</p>
<p>Если расположить рядом две строковых константы, Python автоматически их объединит.</p>
<p>Например, 'What\'s ' 'your name?' автоматически преобразуется в "What's your name?".</p>
<p><strong>7.4. Строки</strong></p>
<p>38</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Замечание для программистов на C/C++</strong></p>
<p>В Python нет отдельного типа данных char (символ). В нём нет нужды, и я уверен, что вы</p>
<p>не будете по нему скучать.</p>
<p><strong>Замечание для программистов на Perl/PHP</strong></p>
<p>Помните, что строки в двойных кавычках и в одинарных эквивалентны, и ничем друг от</p>
<p>друга не отличаются.</p>
<p>7.4.6 Метод format</p>
<p>Иногда бывает нужно составить строку на основе каких-либо данных. Вот здесь-то и при-гождается метод format().</p>
<p>Сохраните следующие строки в файл str_format.py:</p>
<p>age = 26</p>
<p>name = 'Swaroop'</p>
<p>print('Возраст  <emphasis>{0} </emphasis>--  <emphasis>{1} </emphasis> лет.'.format(name, age))</p>
<p>print('Почему  <emphasis>{0} </emphasis> забавляется с этим Python?'.format(name))</p>
<p>Вывод:</p>
<p>$ python str_format.py</p>
<p>Возраст Swaroop -- 26 лет.</p>
<p>Почему Swaroop забавляется с этим Python?</p>
<p><strong>Как это работает:</strong></p>
<p>В строку могут быть включены определённые обозначения, а впоследствии</p>
<p>может быть вызван метод format для замещения этих обозначений соответ-</p>
<p>ствующими аргументами.</p>
<p>Взгляните на первый случай применения обозначений, где мы пишем {0}, и</p>
<p>это соответствует переменной name, являющейся первым аргументом метода</p>
<p>format. Аналогично, второе обозначение {1} соответствует переменной age, являющейся вторым аргументом метода format. Заметьте, что Python начинает отсчёт с 0, поэтому первая позиция – номер 0, вторая – номер 1 и т.д.</p>
<p>Заметьте, мы ведь могли добиться того же самого результата и объединени-</p>
<p>ем строк: 'Возраст' + name + ' -- ' + str(age) + ' лет.', однако вы</p>
<p>сами видите, как это некрасиво, и как легко в таком случае допустить ошибку.</p>
<p><strong>7.4. Строки</strong></p>
<p>39</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Во-вторых, преобразование в строку делается методом format автоматически, в отличие от явного преобразования в нашем примере. В-третьих, используя</p>
<p>метод format, мы можем изменить сообщение, не затрагивая используемых</p>
<p>переменных, и наоборот.</p>
<p>На всякий случай имейте в виду, что цифры здесь не обязательны. Можно</p>
<p>было бы просто написать:</p>
<p>age = 26</p>
<p>name = 'Swaroop'</p>
<p>print('Возраст  <emphasis>{} </emphasis>--  <emphasis>{} </emphasis> лет.'.format(name, age))</p>
<p>print('Почему  <emphasis>{} </emphasis> забавляется с этим Python?'.format(name))</p>
<p>и получить такой же результат, как и ранее.</p>
<p>В методе format Python помещает значение каждого аргумента в обозначенное место.</p>
<p>Могут быть и более детальные обозначения, как то:</p>
<p><strong>&gt;&gt;&gt; </strong> <emphasis># десятичное число (.) с точностью в 3 знака для плавающих:</emphasis></p>
<p><strong>&gt;&gt;&gt; </strong>'  <emphasis>{0:.3}</emphasis>'.format(1/3)</p>
<p>'0.333'</p>
<p><strong>&gt;&gt;&gt; </strong> <emphasis># заполнить подчёркиваниями (_) с центровкой текста (^) по ширине 11:</emphasis></p>
<p><strong>&gt;&gt;&gt; </strong>'  <emphasis>{0:_^11}</emphasis>'.format('hello')</p>
<p>'___hello___'</p>
<p><strong>&gt;&gt;&gt; </strong> <emphasis># по ключевым словам:</emphasis></p>
<p><strong>&gt;&gt;&gt; </strong>'  <emphasis>{name} </emphasis> написал  <emphasis>{book}</emphasis>'.format(name='Swaroop', book='A Byte of Python')</p>
<p>'Swaroop написал A Byte of Python'</p>
<p>Детально такие обозначения форматов описаны в Предложении по расширению Python</p>
<p><a l:href="https://www.python.org/dev/peps/pep-3101"><strong>PEP 3101</strong>. </a></p>
<p>7.5 Переменные</p>
<p>Использование одних лишь литеральных констант может скоро наскучить – нам ведь</p>
<p>нужен способ хранения любой информации и манипулирования ею. Вот здесь на сцену выходят  <emphasis>переменные</emphasis>. Слово «переменные» говорит само за себя – их значение может</p>
<p>меняться, а значит, вы можете хранить в переменной всё, что угодно. Переменные – это</p>
<p>просто области памяти компьютера, в которых вы храните некоторую информацию. В</p>
<p>отличие от констант, к такой информации нужно каким-то образом получать доступ, поэтому переменным даются имена.</p>
<p><strong>7.5. Переменные</strong></p>
<p>40</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>7.6 Имена идентификаторов</p>
<p>Переменные – это частный случай идентификаторов.  <emphasis>Идентификаторы </emphasis>– это имена, при-своенные  <emphasis>чему-то </emphasis> для его обозначения. При выборе имён для идентификаторов необходимо соблюдать следующие правила:</p>
<p>• Первым символом идентификатора должна быть буква из алфавита (символ ASCII в</p>
<p>верхнем или нижнем регистре, или символ Unicode), а также символ подчёркивания</p>
<p>(«_»).</p>
<p>• Остальная часть идентификатора может состоять из букв (символы ASCII в верхнем</p>
<p>или нижнем регистре, а также символы Unicode), знаков подчёркивания («_») или</p>
<p>цифр (0-9).</p>
<p>• Имена идентификаторов чувствительны к регистру. Например, myname и myName –</p>
<p>это <strong>не </strong>одно и то же. Обратите внимание на «n» в нижнем регистре в первом случае</p>
<p>и «N» в верхнем во втором.</p>
<p>• Примеры  <emphasis>допустимых </emphasis> имён идентификаторов: i, __my_name, name_23, a1b2_c3 и</p>
<p>любые_символы_utf8_δξѪђёўЩӆΞέά.</p>
<p>• Примеры  <emphasis>недопустимых </emphasis> имён идентификаторов: 2things, здесь есть пробелы, my-name, &gt;a1b2_c3 и "это_в_кавычках".</p>
<p>7.7 Типы данных</p>
<p>Переменные могут хранить значения разных типов, называемых <strong>типами данных</strong>. Ос-новными типами являются числа и строки, о которых мы уже говорили. В дальнейших</p>
<p>главах мы увидим, как создавать свои собственные типы при помощи  <emphasis>классов</emphasis>.</p>
<p>7.8 Объекты</p>
<p>Помните, Python рассматривает всё, что есть в программе, как  <emphasis>объекты</emphasis>. Имеется в виду, в</p>
<p>самом общем смысле. Вместо того, чтобы говорить « <emphasis>нечто</emphasis>», мы говорим « <emphasis>объект</emphasis>».</p>
<p><strong>Замечание для программистов в объектно-ориентированном стиле</strong></p>
<p>Python строго объектно ориентирован в том смысле, что объектом является всё, включая</p>
<p>числа, строки и функции.</p>
<p>Сейчас мы увидим, как использовать переменные наряду с константами. Сохраните сле-дующий пример и запустите программу.</p>
<p><strong>7.6. Имена идентификаторов</strong></p>
<p>41</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Как писать программы на Python</strong></p>
<p>Впредь стандартная процедура сохранения и запуска программы на Python будет выглядеть так:</p>
<p>1. Откройте ваш любимый редактор, например Komodo Edit.</p>
<p>2. Введите текст программы из примера.</p>
<p>3. Сохраните его в файл, указав его имя в комментарии. Я следую правилу сохранять</p>
<p>все программы на Python с расширением .py.</p>
<p>4. Запустите интерпретатор командой python3 program.py. Кроме того, вы можете</p>
<p>сделать программу  <emphasis>исполнимой</emphasis>, как объяснялось ранее.</p>
<p>7.8.1 Пример: Использование переменных и констант</p>
<p> <emphasis># Имя файла : var.py</emphasis></p>
<p>i = 5</p>
<p>print(i)</p>
<p>i = i + 1</p>
<p>print(i)</p>
<p>s = '''Это многострочная строка.</p>
<p>Это вторая её строчка.'''</p>
<p>print(s)</p>
<p><strong>Вывод:</strong></p>
<p>$ python var.py</p>
<p>5</p>
<p>6</p>
<p>Это многострочная строка.</p>
<p>Это вторая её строчка.</p>
<p><strong>Как это работает:</strong></p>
<p>Вот как эта программа работает. Сперва мы присваиваем значение констан-</p>
<p>ты 5 переменной i, используя оператор присваивания (=). Эта строка назы-</p>
<p>вается предложением и указывает, что должно быть произведено некоторое</p>
<p>действие, и в данном случае мы связываем имя переменной i со значением</p>
<p>5. Затем мы печатаем значение i, используя функцию print, которая просто</p>
<p>печатает значение переменной на экране.</p>
<p><strong>7.8. Объекты</strong></p>
<p>42</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Далее мы добавляем 1 к значению, хранящемуся в i и сохраняем его там. После этого мы печатаем его и получаем значение 6, что неудивительно.</p>
<p>Аналогичным образом мы присваиваем строковую константу переменной s,</p>
<p>после чего печатаем её.</p>
<p><strong>Замечание для программистов на статических языках программирования</strong></p>
<p>Переменные используются простым присваиванием им значений. Никакого предвари-тельного объявления или определения типа данных не требуется/применяется.</p>
<p>7.9 Логические и физические строки</p>
<p>Физическая строка – это то, что вы  <emphasis>видите</emphasis>, когда набираете программу. Логическая строка – это то, что  <emphasis>Python видит </emphasis> как единое предложение. Python неявно предполагает, что</p>
<p>каждой  <emphasis>физической строке </emphasis> соответствует  <emphasis>логическая строка</emphasis>.</p>
<p>Примером логической строки может служить предложение print('Привет, Мир!') –</p>
<p>если оно на одной строке (как вы видите это в редакторе), то эта строка также соответствует физической строке.</p>
<p>Python неявно стимулирует использование по одному предложению на строку, что облегчает чтение кода.</p>
<p>Чтобы записать более одной логической строки на одной физической строке, вам придётся явно указать это при помощи точки с запятой (;), которая отмечает конец логической</p>
<p>строки/предложения. Например,</p>
<p>i = 5</p>
<p>print(i)</p>
<p>то же самое, что</p>
<p>i = 5;</p>
<p>print(i);</p>
<p>и то же самое может быть записано в виде</p>
<p>i = 5; print(i);</p>
<p>или даже</p>
<p>i = 5; print(i)</p>
<p><strong>7.9. Логические и физические строки</strong></p>
<p>43</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Однако я <strong>настоятельно рекомендую </strong>вам придерживаться <strong>написания одной логической</strong></p>
<p><strong>строки в каждой физической строке</strong>. Таким образом вы можете обойтись совсем без точки с запятой. Кстати, я  <emphasis>никогда </emphasis> не использовал и даже не встречал точки с запятой в программах на Python.</p>
<p>Можно использовать более одной физической строки для логической строки, но к этому</p>
<p>следует прибегать лишь в случае очень длинных строк. Пример написания одной логической строки, занимающей несколько физических строк, приведён ниже. Это называется</p>
<p><strong>явным объединением строк</strong>.</p>
<p>s = 'Это строка. <strong>\</strong></p>
<p>Это строка продолжается.'</p>
<p>print(s)</p>
<p>Это даст результат:</p>
<p>Это строка. Это строка продолжается.</p>
<p>Аналогично,</p>
<p>print\</p>
<p>(i)</p>
<p>то же самое, что и</p>
<p>print(i)</p>
<p>Иногда имеет место неявное подразумевание, когда использование обратной косой черты не обязательно. Это относится к случаям, когда в логической строке есть открываю-щаяся круглая, квадратная или фигурная скобка, но нет закрывающейся. Это называется</p>
<p><strong>неявным объединением строк</strong>. Вы сможете увидеть это в действии в программах с использованием  <emphasis>списков </emphasis>в дальнейших главах.</p>
<p>7.10 Отступы</p>
<p>В Python пробелы важны. Точнее, <strong>пробелы в начале строки важны</strong>. Это называется <strong>от-ступами</strong>. Передние отступы (пробелы и табуляции) в начале логической строки используются для определения уровня отступа логической строки, который, в свою очередь, используется для группировки предложений.</p>
<p>Это означает, что предложения, идущие вместе, <strong>должны </strong>иметь одинаковый отступ. Каждый такой набор предложений называется <strong>блоком</strong>. В дальнейших главах мы увидим примеры того, насколько важны блоки.</p>
<p>Вы должны запомнить, что неправильные отступы могут приводить к возникновению</p>
<p>ошибок. Например:</p>
<p><strong>7.10. Отступы</strong></p>
<p>44</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>i = 5</p>
<p>print('Значение составляет ', i)  <emphasis># Ошибка! Пробел в начале строки</emphasis></p>
<p>print('Я повторяю, значение составляет ', i)</p>
<p>Когда вы запустите это, вы получите следующую ошибку:</p>
<p>File "whitespace.py", line 4</p>
<p>print('Значение составляет ', i) # Ошибка! Пробел в начале строки</p>
<p>^</p>
<p>IndentationError: unexpected indent</p>
<p>Обратите внимание на то, что в начале второй строки есть один пробел. Ошибка, отобра-жённая Python, говорит нам о том, что синтаксис программы неверен, т.е. программа не</p>
<p>была написана по правилам. Для вас же это означает, что  <emphasis>вы не можете начинать новые</emphasis></p>
<p> <emphasis>блоки предложений где попало </emphasis>(кроме основного блока по умолчанию, который используется на протяжении всей программы, конечно). Случаи, в которых вы можете использовать новые блоки, будут подробно описаны в дальнейших главах, как например, в  <emphasis>главе</emphasis></p>
<p> <emphasis>«Поток команд»</emphasis>.</p>
<p><strong>Как отступать</strong></p>
<p><strong>Не </strong>смешивайте пробелы и символы табуляции в отступах, поскольку не на всех платформах это работает корректно. Я  <emphasis>настоятельно рекомендую </emphasis> вам использовать  <emphasis>одиночную</emphasis></p>
<p> <emphasis>табуляцию </emphasis> или  <emphasis>четыре пробела </emphasis> для каждого уровня отступа.</p>
<p>Выберите какой-нибудь один из этих стилей отступа. Но что ещё более важно, это использовать выбранный стиль <strong>постоянно</strong>, а также соблюдать стиль редактируемых вами</p>
<p>файлов. Т.е. когда вы пишете новый файл, используйте  <emphasis>только </emphasis> один ваш любимый стиль, а если в редактируемом вами файле для отступов уже используются, скажем, символы табуляции, то и вы используйте в этом файле символы табуляции для отступов.</p>
<p>Хорошие редакторы, такие как Komodo Edit, будут делать это автоматически.</p>
<p><strong>Замечание для программистов на статических языках программирования</strong></p>
<p>Python всегда будет использовать отступы для выделения блоков и никогда не будет использовать скобки. Введите from __future__ import braces, чтобы узнать больше.</p>
<p><strong>7.10. Отступы</strong></p>
<p>45</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>7.11 Резюме</p>
<p>Теперь, когда мы прошли через множество жизненно важных мелочей, можно перейти к</p>
<p>более интересным вещам – таким как управляющие конструкции. Но сначала как следует</p>
<p>освойтесь с прочитанным в настоящей главе.</p>
<p><strong>7.11. Резюме</strong></p>
<p>46</p>
<p><strong>Операторы и выражения</strong></p>
<p>Большинство предложений (логических строк) в программах содержат  <emphasis>выражения</emphasis>. Простой пример выражения: 2 + 3. Выражение можно разделить на операторы и операнды.</p>
<p> <emphasis>Операторы </emphasis>– это некий функционал, производящий какие-либо действия, который может быть представлен в виде символов, как например +, или специальных зарезервиро-ванных слов. Операторы могут производить некоторые действия над данными, и эти данные называются  <emphasis>операндами</emphasis>. В нашем случае 2 и 3 – это операнды.</p>
<p>8.1 Операторы</p>
<p>Кратко рассмотрим операторы и их применение:</p>
<p>Обратите внимание, вычислить значения выражений, данных в примерах, можно также используя интерпретатор интерактивно. Например, для проверки выражения 2 + 3</p>
<p>воспользуйтесь интерактивной командной строкой интерпретатора Python:</p>
<p><strong>&gt;&gt;&gt; </strong>2 + 3</p>
<p>5</p>
<p><strong>&gt;&gt;&gt; </strong>3 * 5</p>
<p>15</p>
<p><strong>Операторы и их применение</strong></p>
<p>Оператор</p>
<p>Название</p>
<p>Объяснение</p>
<p>Примеры</p>
<p>+</p>
<p>Сложение Суммирует два</p>
<p>3 + 5 даст 8; 'a' + 'b' даст 'ab'</p>
<p>объекта</p>
<p>-</p>
<p>Вычита-</p>
<p>Даёт разность</p>
<p>-5.2 даст отрицательное число, а 50 -</p>
<p>ние</p>
<p>двух чисел; если 24 даст 26.</p>
<p>первый операнд</p>
<p>отсутствует, он</p>
<p>считается</p>
<p>равным нулю</p>
<p>47</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Оператор</p>
<p>Название</p>
<p>Объяснение</p>
<p>Примеры</p>
<p>*</p>
<p>Умноже-</p>
<p>Даёт</p>
<p>2 * 3 даст 6. 'la' * 3 даст 'lalala'.</p>
<p>ние</p>
<p>произведение</p>
<p>двух чисел или</p>
<p>возвращает</p>
<p>строку,</p>
<p>повторённую</p>
<p>заданное число</p>
<p>раз.</p>
<p>**</p>
<p>Возведе-</p>
<p>Возвращает</p>
<p>3 ** 4 даст 81 (т.е. 3 * 3 * 3 * 3)</p>
<p>ние в</p>
<p>число х,</p>
<p>степень</p>
<p>возведённое в</p>
<p>степень y</p>
<p>/</p>
<p>Деление</p>
<p>Возвращает</p>
<p>4 / 3 даст 1.3333333333333333.</p>
<p>частное от</p>
<p>деления x на y</p>
<p>//</p>
<p>Целочис-</p>
<p>Возвращает</p>
<p>4 // 3 даст 1. -4 // 3 даст -2.</p>
<p>ленное</p>
<p>неполное</p>
<p>деление</p>
<p>частное от</p>
<p>деления</p>
<p>%</p>
<p>Деление</p>
<p>Возвращает</p>
<p>8 % 3 даст 2. -25.5 % 2.25 даст 1.5.</p>
<p>по</p>
<p>остаток от</p>
<p>модулю</p>
<p>деления</p>
<p>&lt;&lt;</p>
<p>Сдвиг</p>
<p>Сдвигает биты</p>
<p>2 &lt;&lt; 2 даст 8. В двоичном виде 2</p>
<p>влево</p>
<p>числа влево на</p>
<p>представляет собой 10. Сдвиг влево на 2</p>
<p>заданное</p>
<p>бита даёт 1000, что в десятичном виде</p>
<p>количество</p>
<p>означает 8.</p>
<p>позиций.</p>
<p>(Любое число в</p>
<p>памяти</p>
<p>компьютера</p>
<p>представлено в</p>
<p>виде битов - или</p>
<p>двоичных</p>
<p>чисел, т.е. 0 и 1)</p>
<p>&gt;&gt;</p>
<p>Сдвиг</p>
<p>Сдвигает биты</p>
<p>11 &gt;&gt; 1 даст 5. В двоичном виде 11</p>
<p>вправо</p>
<p>числа вправо на</p>
<p>представляется как 1011, что будучи</p>
<p>заданное число</p>
<p>смещённым на 1 бит вправо, даёт 101, а</p>
<p>позиций.</p>
<p>это, в свою очередь, не что иное как</p>
<p>десятичное 5</p>
<p>&amp;</p>
<p>Побито-</p>
<p>Побитовая</p>
<p>5 &amp; 3 даёт 1.</p>
<p>вое</p>
<p>операция И над</p>
<p>И</p>
<p>числами</p>
<p><strong>8.1. Операторы</strong></p>
<p>48</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Оператор</p>
<p>Название</p>
<p>Объяснение</p>
<p>Примеры</p>
<p>|</p>
<p>Побито-</p>
<p>Побитовая</p>
<p>5 | 3 даёт 7</p>
<p>вое</p>
<p>операция ИЛИ</p>
<p>ИЛИ</p>
<p>над числами</p>
<p>^</p>
<p>Побито-</p>
<p>Побитовая</p>
<p>5 ^ 3 даёт 6</p>
<p>вое</p>
<p>операция ИС-</p>
<p>ИСКЛЮ-</p>
<p>КЛЮЧИТЕЛЬНО</p>
<p>ЧИТЕЛЬ-</p>
<p>ИЛИ</p>
<p>НО</p>
<p>ИЛИ</p>
<p>~</p>
<p>Побито-</p>
<p>Побитовая</p>
<p>~5 даёт -6.</p>
<p>вое</p>
<p>операция НЕ</p>
<p>НЕ</p>
<p>для числа x</p>
<p>соответствует</p>
<p>-(x+1)</p>
<p>&lt;</p>
<p>Меньше</p>
<p>Определяет,</p>
<p>5 &lt; 3 даст False,</p>
<p>верно ли, что x</p>
<p>а 3 &lt; 5 даст True.</p>
<p>меньше y. Все</p>
<p>Можно составлять произвольные цепочки</p>
<p>операторы</p>
<p>сравнений: 3 &lt; 5 &lt; 7 даёт True.</p>
<p>сравнения</p>
<p>возвращают</p>
<p>True или</p>
<p>1</p>
<p>False .</p>
<p>Обратите</p>
<p>внимание на</p>
<p>заглавные</p>
<p>буквы в этих</p>
<p>словах.</p>
<p>&gt;</p>
<p>Больше</p>
<p>Определяет,</p>
<p>5 &gt; 3 даёт True. Если оба операнда -</p>
<p>верно ли, что x</p>
<p>числа, то перед сравнением они оба</p>
<p>больше y</p>
<p>преобразуются к одинаковому типу. В</p>
<p>противном случае всегда возвращается</p>
<p>False.</p>
<p>&lt;=</p>
<p>Меньше</p>
<p>Определяет,</p>
<p>x = 3; y = 6; x &lt;= y даёт True.</p>
<p>или равно</p>
<p>верно ли, что x</p>
<p>меньше или</p>
<p>равно y</p>
<p>&gt;=</p>
<p>Больше</p>
<p>Определяет,</p>
<p>x = 4; y = 3; x &gt;= 3 даёт True.</p>
<p>или равно</p>
<p>верно ли, что x</p>
<p>больше или</p>
<p>равно y</p>
<p><strong>8.1. Операторы</strong></p>
<p>49</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Оператор</p>
<p>Название</p>
<p>Объяснение</p>
<p>Примеры</p>
<p>==</p>
<p>Равно</p>
<p>Проверяет,</p>
<p>x = 2; y = 2; x == y даёт True. x =</p>
<p>одинаковы ли</p>
<p>'str'; y = 'stR'; x == y даёт False.</p>
<p>объекты</p>
<p>x = 'str'; y = 'str'; x == y даёт</p>
<p>True.</p>
<p>!=</p>
<p>Не равно</p>
<p>Проверяет,</p>
<p>x = 2; y = 3; x != y даёт True.</p>
<p>верно ли, что</p>
<p>объекты не</p>
<p>равны</p>
<p>not</p>
<p>Логиче-</p>
<p>Если x равно</p>
<p>x = True; not x даёт False.</p>
<p>ское</p>
<p>True, оператор</p>
<p>НЕ</p>
<p>вернёт False.</p>
<p>Если же x равно</p>
<p>False, получим</p>
<p>True.</p>
<p>and</p>
<p>Логиче-</p>
<p>x and y даёт</p>
<p>x = False; y = True; x and y</p>
<p>ское</p>
<p>False, если x</p>
<p>возвращает False, поскольку x равно</p>
<p>И</p>
<p>равно False , в</p>
<p>False. В этом случае Python не станет</p>
<p>противном</p>
<p>проверять значение y, так как уже знает,</p>
<p>случае</p>
<p>что левая часть выражения „and“</p>
<p>возвращает</p>
<p>равняется False, что подразумевает, что</p>
<p>значение y</p>
<p>и всё выражение в целом будет равно</p>
<p>False, независимо от значений всех</p>
<p>остальных операндов. Это называется</p>
<p>укороченной оценкой булевых</p>
<p>(логических) выражений.</p>
<p>or</p>
<p>Логиче-</p>
<p>Если x равно</p>
<p>x = True; y = False; x or y даёт</p>
<p>ское</p>
<p>True, в</p>
<p>True. Здесь также может производиться</p>
<p>ИЛИ</p>
<p>результате</p>
<p>укороченная оценка выражений.</p>
<p>получим True, в</p>
<p>противном</p>
<p>случае получим</p>
<p>значение y</p>
<p>1 «True» -  <emphasis>англ. </emphasis>«Верно (Правда)»; «False» -  <emphasis>англ. </emphasis>«Ошибочно (Ложь)». ( <emphasis>прим. перев. </emphasis>) <strong>8.1. Операторы</strong></p>
<p>50</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>8.1.1 Краткая запись мат. операций и присваивания</p>
<p>Зачастую результат проведения некой математической операции необходимо присвоить</p>
<p>переменной, над которой эта операция производилась. Для этого существуют краткие</p>
<p>формы записи выражений:</p>
<p>Вы можете записать:</p>
<p>a = 2; a = a * 3</p>
<p>в виде:</p>
<p>a = 2; a *= 3</p>
<p>Обратите внимание, что выражения вида «переменная = переменная операция</p>
<p>выражение» принимает вид «переменная операция = выражение».</p>
<p>8.2 Порядок вычисления</p>
<p>Если имеется выражение вида 2 + 3 * 4, что производится раньше: сложение или умножение? Школьный курс математики говорит нам, что умножение должно производиться</p>
<p>в первую очередь. Это означает, что оператор умножения имеет более высокий приоритет, чем оператор сложения.</p>
<p>Следующая таблица показывает приоритет операторов в Python, начиная с самого низ-кого (самое слабое связывание) и до самого высокого (самое сильное связывание). Это</p>
<p>означает, что в любом выражении Python сперва вычисляет операторы и выражения, расположенные внизу таблицы, а затем операторы выше по таблице.</p>
<p>Эта таблица взята из <a l:href="http://docs.python.org/py3k/reference/expressions.html#summary">Справочника по языку Python (англ.) </a>и приводится здесь для пол-ноты описания. На практике лучше использовать скобки для группировки операторов и</p>
<p>операндов, чтобы в явном виде указать порядок вычисления выражений. Заодно это облегчит чтение программы. Более подробно см. в разделе  <emphasis>Изменение порядка вычисления</emphasis></p>
<p>ниже.</p>
<p><strong>8.2. Порядок вычисления</strong></p>
<p>51</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Приоритет операторов</strong></p>
<p>Оператор</p>
<p>Описание</p>
<p>lambda</p>
<p>лямбда-выражение</p>
<p>or</p>
<p>Логическое «ИЛИ»</p>
<p>and</p>
<p>Логическое «И»</p>
<p>not x</p>
<p>Логическое «НЕ»</p>
<p>in, not in</p>
<p>Проверка принадлежности</p>
<p>is, is not</p>
<p>Проверка тождественности</p>
<p>&lt;, &lt;=, &gt;, &gt;=, !=, ==</p>
<p>Сравнения</p>
<p>|</p>
<p>Побитовое «ИЛИ»</p>
<p>^</p>
<p>Побитовое «ИСКЛЮЧИТЕЛЬНО ИЛИ»</p>
<p>&amp;</p>
<p>Побитовое «И»</p>
<p>&lt;&lt;, &gt;&gt;</p>
<p>Сдвиги</p>
<p>+, -</p>
<p>Сложение и вычитание</p>
<p>*, /, //, %</p>
<p>Умножение, деление, целочисленное деление и остаток от де-</p>
<p>ления</p>
<p>+x, -x</p>
<p>Положительное, отрицательное</p>
<p>~x</p>
<p>Побитовое НЕ</p>
<p>**</p>
<p>Возведение в степень</p>
<p>x.attribute</p>
<p>Ссылка на атрибут</p>
<p>x[индекс]</p>
<p>Обращение по индексу</p>
<p>x[индекс1:индекс2] Вырезка</p>
<p>f(аргументы ...)</p>
<p>Вызов функции</p>
<p>(выражения, ...)</p>
<p>Связка или кортеж2</p>
<p>[выражения, ...]</p>
<p>Список</p>
<p>{ключ:данные,</p>
<p>Словарь</p>
<p>...}</p>
<p>Операторы, о которых мы не упомянули, будут объяснены в дальнейших главах.</p>
<p>В этой таблице операторы с  <emphasis>равным приоритетом </emphasis> расположены в одной строке. Например, + и - имеют равный приоритет.</p>
<p>2 «tuple» -  <emphasis>англ. </emphasis>«кортеж» ( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>8.2. Порядок вычисления</strong></p>
<p>52</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>8.3 Изменение порядка вычисления</p>
<p>Для облегчения чтения выражений можно использовать скобки. Например, 2 + (3 * 4) определённо легче понять, чем 2 + 3 * 4, которое требует знания приоритета операторов. Как и всё остальное, скобки нужно использовать разумно (не перестарайтесь) и избегать излишних, как в (2 + (3 * 4)).</p>
<p>Есть ещё одно преимущество в использовании скобок – они дают возможность изменить порядок вычисления выражений. Например, если сложение необходимо произвести</p>
<p>прежде умножения, можно записать нечто вроде (2 + 3) * 4.</p>
<p>8.4 Ассоциативность</p>
<p>Операторы обычно обрабатываются слева направо. Это означает, что операторы с равным</p>
<p>приоритетом будут обработаны по порядку от левого до правого. Например, 2 + 3 + 4</p>
<p>обрабатывается как (2 + 3) + 4.</p>
<p>8.5 Выражения</p>
<p>Пример (сохраните как expression.py):</p>
<p>length = 5</p>
<p>breadth = 2</p>
<p>area = length * breadth</p>
<p>print('Площадь равна', area)</p>
<p>print('Периметр равен', 2 * (length + breadth))</p>
<p><strong>Вывод:</strong></p>
<p>$ python expression.py</p>
<p>Площадь равна 10</p>
<p>Периметр равен 14</p>
<p><strong>Как это работает:</strong></p>
<p>Длина и ширина прямоугольника хранятся в переменных length и breadth</p>
<p>соответственно. Мы используем их для вычисления периметра и площади</p>
<p>прямоугольника при помощи выражений. Результат выражения length *</p>
<p>breadth сохраняется в переменной area, после чего выводится на экран</p>
<p>функцией print. Во втором случае мы напрямую подставляем значение вы-</p>
<p>ражения 2 * (length + breadth) в функцию print.</p>
<p><strong>8.3. Изменение порядка вычисления</strong></p>
<p>53</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Также обратите внимание, как Python «красиво печатает» результат. Несмот-ря на то, что мы не указали пробела между 'Площадь равна' и перемен-</p>
<p>ной area, Python подставляет его за нас, чтобы получить красивый и понятный вывод. Программа же остаётся при этом легкочитаемой (поскольку нам</p>
<p>не нужно заботиться о пробелах между строками, которые мы выводим). Это</p>
<p>пример того, как Python облегчает жизнь программисту.</p>
<p>8.6 Резюме</p>
<p>Мы увидели, как пользоваться операторами, операндами и выражениями. Это основные</p>
<p>строительные блоки любой программы. Далее мы увидим, как это применить на практике.</p>
<p><strong>8.6. Резюме</strong></p>
<p>54</p>
<p><strong>Поток команд</strong></p>
<p>В программах, которые мы до сих пор рассматривали, последовательность команд всегда</p>
<p>выполнялась Python по порядку строго сверху вниз. А что, если нам необходимо изменить</p>
<p>поток выполняющихся команд? Например, если требуется, чтобы программа принимала</p>
<p>некоторое решение и выполняла различные действия в зависимости от ситуации; скажем, печатала «Доброе утро» или «Добрый вечер» в зависимости от времени суток.</p>
<p>Как вы уже, наверное, догадались, этого можно достичь при помощи операторов управления потоком. В Python есть три оператора управления потоком: if, for и while.</p>
<p>9.1 Оператор if</p>
<p>Оператор if используется для проверки условий:  <emphasis>если</emphasis>1 условие верно2, выполняется блок</p>
<p>выражений (называемый «if-блок»),  <emphasis>иначе</emphasis>3 выполняется другой блок выражений (называемый «else-блок»). Блок «else» является необязательным.</p>
<p><strong>Пример: </strong>(сохраните как if.py)</p>
<p>number = 23</p>
<p>guess = int(input('Введите целое число : '))</p>
<p><strong>if </strong>guess == number:</p>
<p>print('Поздравляю, вы угадали,')  <emphasis># Начало нового блока</emphasis></p>
<p>print('(хотя и не выиграли никакого приза!)')  <emphasis># Конец нового блока</emphasis></p>
<p><strong>elif </strong>guess &lt; number:</p>
<p>print('Нет, загаданное число немного больше этого.')  <emphasis># Ещё один блок</emphasis></p>
<p> <emphasis># Внутри блока вы можете выполнять всё, что угодно ... </emphasis></p>
<p><strong>else</strong>:</p>
<p>print('Нет, загаданное число немного меньше этого.')</p>
<p> <emphasis># чтобы попасть сюда, guess должно быть больше, чем number</emphasis></p>
<p>(продолжение на следующей странице)</p>
<p>1 if –  <emphasis>англ. </emphasis>«если» ( <emphasis>прим.перев. </emphasis>)</p>
<p>2 Соответствует булевому значению True ( <emphasis>прим.перев. </emphasis>)</p>
<p>3 else –  <emphasis>англ. </emphasis>«иначе», «в противном случае» ( <emphasis>прим.перев. </emphasis>) 55</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>print('Завершено')</p>
<p> <emphasis># Это последнее выражение выполняется всегда после выполнения оператора if</emphasis> <strong>Вывод:</strong></p>
<p>$ python if.py</p>
<p>Введите целое число : 50</p>
<p>Нет, загаданное число немного меньше этого.</p>
<p>Завершено</p>
<p>$ python if.py</p>
<p>Введите целое число : 22</p>
<p>Нет, загаданное число немного больше этого.</p>
<p>Завершено</p>
<p>$ python if.py</p>
<p>Введите целое число : 23</p>
<p>Поздравляю, вы угадали,</p>
<p>(хотя и не выиграли никакого приза!)</p>
<p>Завершено</p>
<p><strong>Как это работает:</strong></p>
<p>В этой программе мы принимаем варианты от пользователя и проверяем, сов-</p>
<p>падают ли они с заранее заданным числом. Мы устанавливаем переменной</p>
<p>number значение любого целого числа, какого хотим. Например, 23. После</p>
<p>этого мы принимаем вариант числа от пользователя при помощи функции</p>
<p>input(). Функции – это всего-навсего многократно используемые фрагмен-</p>
<p>ты программы. Мы узнаем о них больше в  <emphasis>следующей главе</emphasis>.</p>
<p>Мы передаём встроенной функции input строку, которую она выводит на</p>
<p>экран и ожидает ввода от пользователя. Как только мы ввели что-нибудь и на-жали клавишу Enter, функция input() возвращает строку, которую мы вве-</p>
<p>ли. Затем мы преобразуем полученную строку в число при помощи int(),</p>
<p>и сохраняем это значение в переменную guess. Вообще-то, int – это класс, но на данном этапе вам достаточно знать лишь, что при помощи него можно</p>
<p>преобразовать строку в целое число (предполагая, что строка содержит целое</p>
<p>число).</p>
<p>Далее мы сравниваем число, введённое пользователем, с числом, которое мы</p>
<p>выбрали заранее. Если они равны, мы печатаем сообщение об успехе. Обра-</p>
<p>тите внимание, что мы используем соответствующие уровни отступа, чтобы</p>
<p>указать Python, какие выражения относятся к какому блоку. Вот почему отступы так важны в Python. Я надеюсь, вы придерживаетесь правила «постоянных</p>
<p>отступов», не так ли?</p>
<p>Обратите внимание, что в конце оператора if стоит двоеточие – этим мы по-9.1. Оператор if</p>
<p>56</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>казываем, что далее следует блок выражений.</p>
<p>После этого мы проверяем, верно ли, что пользовательский вариант числа</p>
<p>меньше загаданного, и если это так, мы информируем пользователя о том,</p>
<p>что ему следует выбирать числа немного больше этого. Здесь мы использо-</p>
<p>вали выражение elif, которое попросту объединяет в себе два связанных if else-if else выражения в одно выражение if-elif-else. Это облегчает</p>
<p>чтение программы, а также не требует дополнительных отступов.</p>
<p>Выражения elif и else также имеют двоеточие в конце логической строки,</p>
<p>за которым следуют соответствующие блоки команд (с соответствующим чис-</p>
<p>лом отступов, конечно).</p>
<p>Внутри if-блока оператора if может быть другой оператор if и так далее – это</p>
<p>называется вложенным4 оператором if.</p>
<p>Помните, что части elif и else не обязательны. Минимальная корректная</p>
<p>запись оператора if такова:</p>
<p><strong>if True</strong>:</p>
<p>print('Да, это верно.')</p>
<p>После того, как Python заканчивает выполнение всего оператора if вместе с</p>
<p>его частями elif и else, он переходит к следующему выражению в блоке,</p>
<p>содержащем этот оператор if. В нашем случае это основной блок программы</p>
<p>(в котором начинается выполнение программы), а следующее выражение –</p>
<p>это print('Завершено'). После этого Python доходит до конца программы и</p>
<p>просто выходит из неё.</p>
<p>Хотя это и чрезвычайно простая программа, я указал вам на целый ряд вещей, которые</p>
<p>стоит взять на заметку. Всё это довольно легко (даже удивительно легко для тех из вас, кто</p>
<p>пришёл из мира C/C++). Поначалу вам придётся держать все эти вещи в памяти, но после</p>
<p>некоторой практики вы привыкнете, и они вам покажутся вполне «естественными».</p>
<p><strong>Замечание для программистов на C/C++</strong></p>
<p>В Python нет оператора switch. Однако, при помощи конструкции if..elif..else можно достичь того же самого (а в некоторых случаях можно даже использовать  <emphasis>словарь</emphasis>, чтобы сделать это быстро).</p>
<p>4 nested –  <emphasis>англ. </emphasis>«вложенный» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>9.1. Оператор if</strong></p>
<p>57</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>9.2 Оператор while</p>
<p>Оператор while позволяет многократно выполнять блок команд до тех пор, пока выполняется некоторое условие. Это один из так называемых  <emphasis>операторов цикла</emphasis>. Он также может</p>
<p>иметь необязательный пункт else.</p>
<p><strong>Пример: </strong>(сохраните как while.py)</p>
<p>number = 23</p>
<p>running = <strong>True</strong></p>
<p><strong>while </strong>running:</p>
<p>guess = int(input('Введите целое число : '))</p>
<p><strong>if </strong>guess == number:</p>
<p>print('Поздравляю, вы угадали.')</p>
<p>running = <strong>False </strong> <emphasis># это останавливает цикл while</emphasis></p>
<p><strong>elif </strong>guess &lt; number:</p>
<p>print('Нет, загаданное число немного больше этого.')</p>
<p><strong>else</strong>:</p>
<p>print('Нет, загаданное число немного меньше этого.')</p>
<p><strong>else</strong>:</p>
<p>print('Цикл while закончен.')</p>
<p> <emphasis># Здесь можете выполнить всё что вам ещё нужно</emphasis></p>
<p>print('Завершение.')</p>
<p><strong>Вывод:</strong></p>
<p>$ python while.py</p>
<p>Введите целое число : 50</p>
<p>Нет, загаданное число немного меньше этого.</p>
<p>Введите целое число : 22</p>
<p>Нет, загаданное число немного больше этого.</p>
<p>Введите целое число : 23</p>
<p>Поздравляю, вы угадали.</p>
<p>Цикл while закончен.</p>
<p>Завершение.</p>
<p><strong>Как это работает:</strong></p>
<p>В этой программе мы продолжаем играть в игру с угадыванием, но преиму-</p>
<p>щество состоит в том, что теперь пользователь может угадывать до тех пор, пока не угадает правильное число, и ему не придётся запускать программу</p>
<p>заново для каждой попытки, как это происходило до сих пор. Это наглядно</p>
<p>демонстрирует применение оператора while.</p>
<p>Мы переместили операторы input и if внутрь цикла while и установили</p>
<p><strong>9.2. Оператор while</strong></p>
<p>58</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>переменную running в значение True перед запуском цикла. Прежде всего</p>
<p>проверяется, равно ли значение переменной running True, а затем происхо-</p>
<p>дит переход к соответствующему  <emphasis>while-блоку</emphasis>. После выполнения этого блока</p>
<p>команд условие, которым в данном случае является переменная running, проверяется снова. Если оно истинно, while-блок запускается снова, в противном</p>
<p>случае происходит переход к дополнительному else-блоку, а затем – к следующему оператору.</p>
<p>Блок else выполняется тогда, когда условие цикла while становится ложным (False)</p>
<p>– это может случиться даже при самой первой проверке условия. Если у цикла while имеется дополнительный блок else, он всегда выполняется, если только цикл не будет</p>
<p>прерван оператором break.</p>
<p>True и False называются булевым типом данных, и вы можете считать их эквивалент-ными значениям 1 и 0 соответственно.</p>
<p><strong>Примечание для программистов на C/C++</strong></p>
<p>Помните, что у цикла while может быть блок else.</p>
<p>9.3 Цикл for</p>
<p>Оператор for..in также является оператором цикла, который осуществляет  <emphasis>итерацию </emphasis> по</p>
<p>последовательности объектов, т.е. проходит через каждый элемент в последовательности.</p>
<p>Мы узнаем больше о  <emphasis>последовательностях </emphasis>в дальнейших главах, а пока просто запомните, что последовательность – это упорядоченный набор элементов.</p>
<p><strong>Пример: </strong>(сохраните как for.py)</p>
<p><strong>for </strong>i <strong>in </strong>range(1, 5):</p>
<p>print(i)</p>
<p><strong>else</strong>:</p>
<p>print('Цикл for закончен')</p>
<p><strong>Вывод:</strong></p>
<p>$ python for.py</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>Цикл for закончен</p>
<p><strong>9.3. Цикл for</strong></p>
<p>59</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Как это работает:</strong></p>
<p>В этой программе мы выводим на экран  <emphasis>последовательность </emphasis> чисел. Мы гене-рируем эту последовательность, используя встроенную функцию</p>
<p>5</p>
<p>range .</p>
<p>Мы задаём два числа, и range возвращает последовательность чисел от перво-го числа до второго. Например, range(1,5) даёт последовательность [1, 2, 3, 4]. По умолчанию range принимает значение шага, равное 1. Если мы</p>
<p>зададим также и третье число range, оно будет служить шагом. Например,</p>
<p>range(1,5,2) даст [1,3]. Помните, интервал простирается только  <emphasis>до </emphasis> второго числа, т.е. <strong>не </strong>включает его в себя.</p>
<p>Обратите внимание, что range() генерирует последовательность чисел, но</p>
<p>только по одному числу за раз – когда оператор for запрашивает следую-</p>
<p>щий элемент. Чтобы увидеть всю последовательность чисел сразу, используй-те list(range()). Списки6 подробно рассматриваются в главе  <emphasis>Структуры</emphasis></p>
<p> <emphasis>данных</emphasis>.</p>
<p>Затем цикл for осуществляет итерацию по этому диапазону - for i in</p>
<p>range(1,5) эквивалентно for i in [1, 2, 3, 4], что напоминает при-</p>
<p>сваивание переменной i по одному числу (или объекту) за раз, выполняя блок</p>
<p>команд для каждого значения i. В данном случае в блоке команд мы просто</p>
<p>выводим значение на экран.</p>
<p>Помните, что блок else не обязателен. Если он присутствует, он всегда выполняется один</p>
<p>раз после окончания цикла for, если только не указан оператор  <emphasis>break</emphasis>.</p>
<p>Помните также, что цикл for..in работает для любой последовательности. В нашем случае это список чисел, сгенерированный встроенной функцией range, но в общем случае</p>
<p>можно использовать любую последовательность любых объектов! В следующих разделах</p>
<p>мы познакомимся с этим поближе.</p>
<p><strong>Примечание для программистов на C/C++/Java/C#</strong></p>
<p>Цикл for в Python радикально отличается от цикла for в C/C++. Программисты на C#</p>
<p>заметят, что цикл for в Python похож на цикл foreach в C#. Программистам на Java это</p>
<p>может напомнить конструкцию for (int i : IntArray) в Java 1.5.</p>
<p>Если в C/C++ записать for (int i = 0; i &lt; 5; i++), то в Python этому соответство-вало бы выражение for i in range(0,5). Как видно, в Python цикл for проще, более</p>
<p>выразителен и менее подвержен ошибкам.</p>
<p>5 range –  <emphasis>англ. </emphasis>«диапазон», «интервал» ( <emphasis>прим.перев. </emphasis>)</p>
<p>6 list –  <emphasis>англ. </emphasis>«список» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>9.3. Цикл for</strong></p>
<p>60</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>9.4 Оператор break</p>
<p>Оператор break служит для  <emphasis>прерывания</emphasis>7 цикла, т.е. остановки выполнения команд даже</p>
<p>если условие выполнения цикла ещё не приняло значения False или последовательность элементов не закончилась.</p>
<p>Важно отметить, что если циклы for или while прервать оператором  <emphasis>break</emphasis>, соответствующие им блоки else выполняться <strong>не </strong>будут.</p>
<p><strong>Пример: </strong>(сохраните как break.py)</p>
<p><strong>while True</strong>:</p>
<p>s = input('Введите что-нибудь : ')</p>
<p><strong>if </strong>s == 'выход':</p>
<p><strong>break</strong></p>
<p>print('Длина строки:', len(s))</p>
<p>print('Завершение')</p>
<p><strong>Вывод:</strong></p>
<p>$ python break.py</p>
<p>Введите что-нибудь : Программировать весело.</p>
<p>Длина строки: 23</p>
<p>Введите что-нибудь : Если работа скучна,</p>
<p>Длина строки: 19</p>
<p>Введите что-нибудь : Чтобы придать ей весёлый тон -</p>
<p>Длина строки: 30</p>
<p>Введите что-нибудь :</p>
<p>используй Python!</p>
<p>Длина строки: 23</p>
<p>Введите что-нибудь : выход</p>
<p>Завершение</p>
<p><strong>Как это работает:</strong></p>
<p>В этой программе мы многократно считываем пользовательский ввод и выво-</p>
<p>дим на экран длину каждой введённой строки. Для остановки программы мы</p>
<p>вводим специальное условие, проверяющее, совпадает ли пользовательский</p>
<p>ввод со строкой 'выход'. Мы останавливаем программу  <emphasis>прерыванием </emphasis> цикла</p>
<p>оператором break и достигаем её конца.</p>
<p>Длина введённой строки может быть найдена при помощи встроенной функ-</p>
<p>ции len.</p>
<p>Помните также, что оператор break может применяться и в цикле for.</p>
<p>7 break –  <emphasis>англ. </emphasis>«разбивать», «разрывать» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>9.4. Оператор break</strong></p>
<p>61</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>9.4.1 Поэтический Python Swaroop’а</p>
<p>Для ввода строк здесь я использовал мини-стишок, который сам сочинил. Он называется</p>
<p> <emphasis>Поэтический Python Swaroop’а</emphasis> 8</p>
<p>Программировать весело.</p>
<p>Если работа скучна,</p>
<p>Чтобы придать ей весёлый тон -</p>
<p>используй Python!</p>
<p>9.5 Оператор continue</p>
<p>Оператор continue используется для указания Python, что необходимо пропустить все</p>
<p>оставшиеся команды в текущем блоке цикла и  <emphasis>продолжить</emphasis> 9 со следующей итерации цикла.</p>
<p><strong>Пример: </strong>(сохраните как continue.py)</p>
<p><strong>while True</strong>:</p>
<p>s = input('Введите что-нибудь : ')</p>
<p><strong>if </strong>s == 'выход':</p>
<p><strong>break</strong></p>
<p><strong>if </strong>len(s) &lt; 3:</p>
<p>print('Слишком мало')</p>
<p><strong>continue</strong></p>
<p>print('Введённая строка достаточной длины')</p>
<p> <emphasis># Разные другие действия здесь... </emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python continue.py</p>
<p>Введите что-нибудь : a</p>
<p>Слишком мало</p>
<p>Введите что-нибудь : 12</p>
<p>Слишком мало</p>
<p>Введите что-нибудь : абв</p>
<p>Введённая строка достаточной длины</p>
<p>Введите что-нибудь : выход</p>
<p>8 <strong>Swaroop’s Poetic Python</strong>:</p>
<p>Programming is fun.</p>
<p>When the work is done,</p>
<p>if you wanna make your work also fun:</p>
<p>use Python!</p>
<p>9 continue –  <emphasis>англ. </emphasis>«продолжать» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>9.5. Оператор continue</strong></p>
<p>62</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Как это работает:</strong></p>
<p>В этой программе мы запрашиваем ввод со стороны пользователя, но обраба-</p>
<p>тываем введённую строку только если она имеет длину хотя бы в 3 символа.</p>
<p>Итак, мы используем встроенную функцию len для получения длины строки,</p>
<p>и если длина менее 3, мы пропускаем остальные действия в блоке при помо-</p>
<p>щи оператора continue. В противном случае все остальные команды в цикле</p>
<p>выполняются, производя любые манипуляции, которые нам нужны.</p>
<p>Заметьте, что оператор continue также работает и с циклом for.</p>
<p>9.6 Резюме</p>
<p>Мы увидели, как использовать три оператора для управления потоком команд: if, while и for, а также связанные с ними операторы break и continue. Это наиболее часто используемые конструкции Python, поэтому овладеть ими очень важно.</p>
<p>Далее мы увидим, как создавать и использовать функции.</p>
<p><strong>9.6. Резюме</strong></p>
<p>63</p>
<p><strong>Функции</strong></p>
<p>Функции – это многократно используемые фрагменты программы. Они позволяют дать</p>
<p>имя определённому блоку команд с тем, чтобы впоследствии запускать этот блок по ука-занному имени в любом месте программы и сколь угодно много раз. Это называется  <emphasis>вызовом </emphasis> функции. Мы уже использовали много встроенных функций, как то len и range.</p>
<p>Функция – это, пожалуй,  <emphasis>наиболее </emphasis> важный строительный блок любой нетривиальной программы (на любом языке программирования), поэтому в этой главе мы рассмотрим различные аспекты функций.</p>
<p>Функции определяются при помощи зарезервированного слова def. После этого слова</p>
<p>указывается  <emphasis>имя </emphasis> функции, за которым следует пара скобок, в которых можно указать</p>
<p>имена некоторых переменных, и заключительное двоеточие в конце строки. Далее следует блок команд, составляющих функцию. На примере можно видеть, что на самом деле</p>
<p>это очень просто:</p>
<p><strong>Пример: </strong>(сохраните как function1.py)</p>
<p><strong>def </strong>sayHello():</p>
<p>print('Привет, Мир!')  <emphasis># блок, принадлежащий функции</emphasis></p>
<p> <emphasis># Конец функции</emphasis></p>
<p>sayHello()  <emphasis># вызов функции</emphasis></p>
<p>sayHello()  <emphasis># ещё один вызов функции</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python function1.py</p>
<p>Привет, Мир!</p>
<p>Привет, Мир!</p>
<p><strong>Как это работает:</strong></p>
<p>Мы определили функцию с именем sayHello, используя описанный выше</p>
<p>синтаксис. Эта функция не принимает параметров, поэтому в скобках не объ-явлены какие-либо переменные. Параметры функции – это некие входные</p>
<p>данные, которые мы можем передать функции, чтобы получить соответству-</p>
<p>ющий им результат.</p>
<p>64</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Обратите внимание, что мы можем вызывать одну и ту же функцию много</p>
<p>раз, а значит нет необходимости писать один и тот же код снова и снова.</p>
<p>10.1 Параметры функций</p>
<p>Функции могут принимать параметры, т.е. некоторые значения, передаваемые функции</p>
<p>для того, чтобы она что-либо  <emphasis>сделала </emphasis> с ними. Эти параметры похожи на переменные, за</p>
<p>исключением того, что значение этих переменных указывается при вызове функции, и</p>
<p>во время работы функции им уже присвоены их значения.</p>
<p>Параметры указываются в скобках при объявлении функции и разделяются запятыми.</p>
<p>Аналогично мы передаём значения, когда вызываем функцию. Обратите внимание на</p>
<p>терминологию: имена, указанные в объявлении функции, называются  <emphasis>параметрами</emphasis>, тогда как значения, которые вы передаёте в функцию при её вызове, –  <emphasis>аргументами</emphasis>.</p>
<p><strong>Пример: </strong>(сохраните как func_param.py)</p>
<p><strong>def </strong>printMax(a, b):</p>
<p><strong>if </strong>a &gt; b:</p>
<p>print(a, 'максимально')</p>
<p><strong>elif </strong>a == b:</p>
<p>print(a, 'равно', b)</p>
<p><strong>else</strong>:</p>
<p>print(b, 'максимально')</p>
<p>printMax(3, 4)  <emphasis># прямая передача значений</emphasis></p>
<p>x = 5</p>
<p>y = 7</p>
<p>printMax(x, y)  <emphasis># передача переменных в качестве аргументов</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python func_param.py</p>
<p>4 максимально</p>
<p>7 максимально</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы определили функцию с именем printMax, которая использует два</p>
<p>параметра с именами a и b. Мы находим наибольшее число с применением</p>
<p>простого оператора if..else и выводим это число.</p>
<p>При первом вызове функции printMax мы напрямую передаём числа в ка-</p>
<p>честве аргументов. Во втором случае мы вызываем функцию с переменными</p>
<p><strong>10.1. Параметры функций</strong></p>
<p>65</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>в качестве аргументов. printMax(x, y) назначает значение аргумента x па-</p>
<p>раметру a, а значение аргумента y – параметру b. В обоих случаях функция</p>
<p>printMax работает одинаково.</p>
<p>10.2 Локальные переменные</p>
<p>При объявлении переменных внутри определения функции, они никоим образом не связаны с другими переменными с таким же именем за пределами функции – т.е. имена</p>
<p>переменных являются  <emphasis>локальными </emphasis> в функции. Это называется  <emphasis>областью видимости </emphasis> переменной. Область видимости всех переменных ограничена блоком, в котором они объяв-лены, начиная с точки объявления имени.</p>
<p><strong>Пример: </strong>(сохраните как func_local.py)</p>
<p>x = 50</p>
<p><strong>def </strong>func(x):</p>
<p>print('x равен', x)</p>
<p>x = 2</p>
<p>print('Замена локального x на', x)</p>
<p>func(x)</p>
<p>print('x по-прежнему', x)</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_local.py</p>
<p>x равен 50</p>
<p>Замена локального x на 2</p>
<p>x по-прежнему 50</p>
<p><strong>Как это работает:</strong></p>
<p>При первом выводе  <emphasis>значения</emphasis>, присвоенного имени x, в первой строке функции</p>
<p>Python использует значение параметра, объявленного в основном блоке, выше</p>
<p>определения функции.</p>
<p>Далее мы назначаем x значение 2. Имя x локально для нашей функции. По-</p>
<p>этому когда мы заменяем значение x в функции, x, объявленный в основном</p>
<p>блоке, остаётся незатронутым.</p>
<p>Последним вызовом функции print мы выводим значение x, указанное в ос-</p>
<p>новном блоке, подтверждая таким образом, что оно не изменилось при ло-</p>
<p>кальном присваивании значения в ранее вызванной функции.</p>
<p><strong>10.2. Локальные переменные</strong></p>
<p>66</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.3 Зарезервированное слово «global»</p>
<p>Чтобы присвоить некоторое значение переменной, определённой на высшем уровне программы (т.е. не в какой-либо области видимости, как то функции или классы), необходимо</p>
<p>указать Python, что её имя не локально, а  <emphasis>глобально </emphasis>( <emphasis>global</emphasis>). Сделаем это при помощи зарезервированного слова global. Без применения зарезервированного слова global невозможно присвоить значение переменной, определённой за пределами функции.</p>
<p>Можно использовать уже существующие значения переменных, определённых за пределами функции (при условии, что внутри функции не было объявлено переменной с таким</p>
<p>же именем). Однако, это не приветствуется, и его следует избегать, поскольку человеку, читающему текст программы, будет непонятно, где находится объявление переменной.</p>
<p>Использование зарезервированного слова global достаточно ясно показывает, что переменная объявлена в самом внешнем блоке.</p>
<p><strong>Пример: </strong>(сохраните как func_global.py)</p>
<p>x = 50</p>
<p><strong>def </strong>func():</p>
<p><strong>global </strong>x</p>
<p>print('x равно', x)</p>
<p>x = 2</p>
<p>print('Заменяем глобальное значение x на', x)</p>
<p>func()</p>
<p>print('Значение x составляет', x)</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_global.py</p>
<p>x равно 50</p>
<p>Заменяем глобальное значение x на 2</p>
<p>Значение x составляет 2</p>
<p><strong>Как это работает:</strong></p>
<p>Зарезервированное слово global используется для того, чтобы объявить, что</p>
<p>x – это глобальная переменная, а значит, когда мы присваиваем значение имени x внутри функции, это изменение отразится на значении переменной x в</p>
<p>основном блоке программы.</p>
<p>Используя одно зарезервированное слово global, можно объявить сразу</p>
<p>несколько переменных: global x, y, z.</p>
<p><strong>10.3. Зарезервированное слово «global»</strong></p>
<p>67</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.4 Зарезервированное слово «nonlocal»</p>
<p>Мы увидели, как получать доступ к переменным в локальной и глобальной области видимости. Есть ещё один тип области видимости, называемый «нелокальной» (nonlocal) областью видимости, который представляет собой нечто среднее между первыми двумя. Нелокальные области видимости встречаются, когда вы определяете функции внутри</p>
<p>функций.</p>
<p>Поскольку в Python всё является выполнимым кодом, вы можете определять функции где</p>
<p>угодно.</p>
<p><strong>Давайте рассмотрим пример:</strong></p>
<p> <emphasis># Filename: func_nonlocal.py</emphasis></p>
<p><strong>def </strong>func_outer():</p>
<p>x = 2</p>
<p>print('x равно', x)</p>
<p><strong>def </strong>func_inner():</p>
<p><strong>nonlocal </strong>x</p>
<p>x = 5</p>
<p>func_inner()</p>
<p>print('Локальное x сменилось на', x)</p>
<p>func_outer()</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_nonlocal.py</p>
<p>x равно 2</p>
<p>Локальное x сменилось на 5</p>
<p><strong>Как это работает:</strong></p>
<p>Когда мы находимся внутри func_inner, переменная x, определённая в пер-</p>
<p>вой строке func_outer находится ни в локальной области видимости (опре-</p>
<p>деление переменной не входит в блок func_inner), ни в глобальной обла-</p>
<p>сти видимости (она также и не в основном блоке программы). Мы объявля-</p>
<p>ем, что хотим использовать именно эту переменную x, следующим образом:</p>
<p>nonlocal x.</p>
<p>Попробуйте заменить «nonlocal x» на «global x», а затем удалить это за-</p>
<p>резервированное слово, и пронаблюдайте за разницей между этими двумя</p>
<p>случаями.</p>
<p><strong>10.4. Зарезервированное слово «nonlocal»</strong></p>
<p>68</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.5 Значения аргументов по умолчанию</p>
<p>Зачастую часть параметров функций могут быть  <emphasis>необязательными</emphasis>, и для них будут использоваться некоторые заданные значения по умолчанию, если пользователь не укажет</p>
<p>собственных. Этого можно достичь с помощью значений аргументов по умолчанию. Их</p>
<p>можно указать, добавив к имени параметра в определении функции оператор присваивания (=) с последующим значением.</p>
<p>Обратите внимание, что значение по умолчанию должно быть константой. Или точнее</p>
<p>говоря, оно должно быть неизменным1 – это объясняется подробнее в последующих главах. А пока запомните это.</p>
<p><strong>Пример: </strong>(сохраните как func_default.py)</p>
<p><strong>def </strong>say(message, times = 1):</p>
<p>print(message * times)</p>
<p>say('Привет')</p>
<p>say('Мир', 5)</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_default.py</p>
<p>Привет</p>
<p>МирМирМирМирМир</p>
<p><strong>Как это работает:</strong></p>
<p>Функция под именем say используется для вывода на экран строки указанное</p>
<p>число раз. Если мы не указываем значения, по умолчанию строка выводится</p>
<p>один раз. Мы достигаем этого указанием значения аргумента по умолчанию,</p>
<p>равного</p>
<p>2</p>
<p>1 для параметра times .</p>
<p>При первом вызове say мы указываем только строку, и функция выводит её</p>
<p>один раз. При втором вызове say мы указываем также и аргумент 5, обозначая</p>
<p>таким образом, что мы хотим  <emphasis>сказать</emphasis>3 фразу 5 раз.</p>
<p><strong>Важно: </strong>Значениями по умолчанию могут быть снабжены только параметры, находящи-еся в конце списка параметров. Таким образом, в списке параметров функции параметр</p>
<p>со значением по умолчанию не может предшествовать параметру без значения по умолчанию. Это связано с тем, что значения присваиваются параметрам в соответствии с их</p>
<p>положением. Например, def func(a, b=5) допустимо, а def func(a=5, b) –  <emphasis>не допустимо</emphasis>.</p>
<p>1 «immutable» в терминологии Python ( <emphasis>прим. перев. </emphasis>)</p>
<p>2 times –  <emphasis>англ. </emphasis>«раз» ( <emphasis>прим. перев. </emphasis>)</p>
<p>3 say –  <emphasis>англ. </emphasis>«сказать» ( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>10.5. Значения аргументов по умолчанию</strong></p>
<p>69</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.6 Ключевые аргументы</p>
<p>Если имеется некоторая функция с большим числом параметров, и при её вызове требуется указать только некоторые из них, значения этих параметров могут задаваться по</p>
<p>их имени – это называется  <emphasis>ключевые параметры</emphasis>. В этом случае для передачи аргументов</p>
<p>функции используется имя (ключ) вместо позиции (как было до сих пор).</p>
<p>Есть два  <emphasis>преимущества </emphasis> такого подхода: во-первых, использование функции становится</p>
<p>легче, поскольку нет необходимости отслеживать порядок аргументов; во-вторых, можно</p>
<p>задавать значения только некоторым избранным аргументам, при условии, что остальные параметры имеют значения аргумента по умолчанию.</p>
<p><strong>Пример: </strong>(сохраните как func_key.py)</p>
<p><strong>def </strong>func(a, b=5, c=10):</p>
<p>print('a равно', a, ', b равно', b, ', а c равно', c)</p>
<p>func(3, 7)</p>
<p>func(25, c=24)</p>
<p>func(c=50, a=100)</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_key.py</p>
<p>a равно 3, b равно 7, а c равно 10</p>
<p>a равно 25, b равно 5, а c равно 24</p>
<p>a равно 100, b равно 5, а c равно 50</p>
<p><strong>Как это работает:</strong></p>
<p>Функция с именем func имеет один параметр без значения по умолчанию, за</p>
<p>которым следуют два параметра со значениями по умолчанию.</p>
<p>При первом вызове, func(3, 7), параметр a получает значение 3, параметр</p>
<p>b получает значение 7, а c получает своё значение по умолчанию, равное 10.</p>
<p>При втором вызове func(25, c=24) переменная a получает значение 25 в</p>
<p>силу позиции аргумента. После этого параметр c получает значение 24 по</p>
<p>имени, т.е. как ключевой параметр. Переменная b получает значение по умолчанию, равное 5.</p>
<p>При третьем обращении func(c=50, a=100) мы используем ключевые аргу-</p>
<p>менты для всех указанных значений. Обратите внимание на то, что мы ука-</p>
<p>зываем значение для параметра c перед значением для a, даже несмотря на</p>
<p>то, что в определении функции параметр a указан раньше c.</p>
<p><strong>10.6. Ключевые аргументы</strong></p>
<p>70</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.7 Переменное число параметров4</p>
<p>Иногда бывает нужно определить функцию, способную принимать  <emphasis>любое </emphasis> число параметров. Этого можно достичь при помощи звёздочек (сохраните как function_varargs.py): <strong>def </strong>total(a=5, *numbers, **phonebook):</p>
<p>print('a', a)</p>
<p> <emphasis>#проход по всем элементам кортежа</emphasis></p>
<p><strong>for </strong>single_item <strong>in </strong>numbers:</p>
<p>print('single_item', single_item)</p>
<p> <emphasis>#проход по всем элементам словаря</emphasis></p>
<p><strong>for </strong>first_part, second_part <strong>in </strong>phonebook.items():</p>
<p>print(first_part,second_part)</p>
<p>print(total(10,1,2,3,Jack=1123,John=2231,Inge=1560))</p>
<p><strong>Вывод:</strong></p>
<p>$ python function_varargs.py</p>
<p>a 10</p>
<p>single_item 1</p>
<p>single_item 2</p>
<p>single_item 3</p>
<p>Inge 1560</p>
<p>John 2231</p>
<p>Jack 1123</p>
<p>None</p>
<p><strong>Как это работает:</strong></p>
<p>Когда мы объявляем параметр со звёздочкой (например, *param), все позиционные аргументы начиная с этой позиции и до конца будут собраны в кортеж</p>
<p>под именем param.</p>
<p>Аналогично, когда мы объявляем параметры с двумя звёздочками (**param),</p>
<p>все ключевые аргументы начиная с этой позиции и до конца будут собраны в</p>
<p>словарь под именем param.</p>
<p>Мы изучим кортежи и словари в  <emphasis>одной из последующих глав</emphasis>.</p>
<p>4 VarArgs –  <emphasis>от англ. </emphasis>«<strong>Var</strong>iable number of <strong>Arg</strong>ument<strong>s</strong>» – «переменное число аргументов» ( <emphasis>прим. перев. </emphasis>) <strong>10.7. Переменное число параметров</strong>4</p>
<p>71</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.8 Только ключевые параметры</p>
<p>Если некоторые ключевые параметры должны быть доступны только по ключу, а  <emphasis>не </emphasis> как</p>
<p>позиционные аргументы, их можно объявить после параметра со звёздочкой (сохраните</p>
<p>как keyword_only.py):</p>
<p><strong>def </strong>total(initial=5, *numbers, extra_number):</p>
<p>count = initial</p>
<p><strong>for </strong>number <strong>in </strong>numbers:</p>
<p>count += number</p>
<p>count += extra_number</p>
<p>print(count)</p>
<p>total(10, 1, 2, 3, extra_number=50)</p>
<p>total(10, 1, 2, 3)</p>
<p> <emphasis># Вызовет ошибку, поскольку мы не указали значение</emphasis></p>
<p> <emphasis># аргумента по умолчанию для 'extra_number'. </emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python keyword_only.py</p>
<p>66</p>
<p>Traceback (most recent call last):</p>
<p>File "keyword_only.py", line 12, in &lt;module&gt;</p>
<p>total(10, 1, 2, 3)</p>
<p>TypeError: total() needs keyword-only argument extra_number</p>
<p><strong>Как это работает:</strong></p>
<p>Объявление параметров после параметра со звёздочкой даёт только ключевые</p>
<p>аргументы. Если для таких аргументов не указано значение по умолчанию, и</p>
<p>оно не передано при вызове, обращение к функции вызовет ошибку, в чём мы</p>
<p>только что убедились.</p>
<p>Обратите внимание на использование +=, который представляет собой сокра-</p>
<p>щённый оператор, позволяющий вместо x = x + y просто написать x += y.</p>
<p>Если вам нужны аргументы, передаваемые только по ключу, но не нужен па-</p>
<p>раметр со звёздочкой, то можно просто указать одну звёздочку без указания</p>
<p>имени: def total(initial=5, *, extra_number).</p>
<p><strong>10.8. Только ключевые параметры</strong></p>
<p>72</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>10.9 Оператор «return»</p>
<p>Оператор return используется для возврата5 из функции, т.е. для прекращения её работы</p>
<p>и выхода из неё. При этом можно также  <emphasis>вернуть некоторое значение </emphasis> из функции.</p>
<p><strong>Пример: </strong>(сохраните как func_return.py)</p>
<p> <emphasis>#!/usr/bin/python</emphasis></p>
<p> <emphasis># Filename: func_return.py</emphasis></p>
<p><strong>def </strong>maximum(x, y):</p>
<p><strong>if </strong>x &gt; y:</p>
<p><strong>return </strong>x</p>
<p><strong>elif </strong>x == y:</p>
<p><strong>return </strong>'Числа равны.'</p>
<p><strong>else</strong>:</p>
<p><strong>return </strong>y</p>
<p>print(maximum(2, 3))</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_return.py</p>
<p>3</p>
<p><strong>Как это работает:</strong></p>
<p>Функция maximum возвращает максимальный из двух параметров, которые в</p>
<p>данном случае передаются ей при вызове. Она использует обычный условный</p>
<p>оператор if..else для определения наибольшего числа, а затем  <emphasis>возвращает</emphasis></p>
<p>это число.</p>
<p>Обратите внимание, что оператор return без указания возвращаемого значения эквива-лентен выражению return None. None – это специальный тип данных в Python, обозна-чающий ничего. К примеру, если значение переменной установлено в None, это означает, что ей не присвоено никакого значения.</p>
<p>Каждая функция содержит в неявной форме оператор return None в конце, если вы</p>
<p>не указали своего собственного оператора return. В этом можно убедиться, запустив</p>
<p>print(someFunction()), где функция someFunction – это какая-нибудь функция, не</p>
<p>имеющая оператора return в явном виде. Например:</p>
<p><strong>def </strong>someFunction():</p>
<p><strong>pass</strong></p>
<p>Оператор pass используется в Python для обозначения пустого блока команд.</p>
<p>5 return –  <emphasis>англ. </emphasis>«возврат» ( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>10.9. Оператор «return»</strong></p>
<p>73</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Примечание: </strong>Существует встроенная функция max, в которой уже реализован функционал «поиск максимума», так что пользуйтесь этой встроенной функцией, где это возможно.</p>
<p>10.10 Строки документации6</p>
<p>Python имеет остроумную особенность, называемую  <emphasis>строками документации</emphasis>, обычно</p>
<p>обозначаемую сокращённо  <emphasis>docstrings</emphasis>. Это очень важный инструмент, которым вы обязательно должны пользоваться, поскольку он помогает лучше документировать программу</p>
<p>и облегчает её понимание. Поразительно, но строку документации можно получить, например, из функции, даже во время выполнения программы!</p>
<p><strong>Пример: </strong>(сохраните как func_doc.py)</p>
<p><strong>def </strong>printMax(x, y):</p>
<p> <emphasis>'''Выводит максимальное из двух чисел. </emphasis></p>
<p> <emphasis>Оба значения должны быть целыми числами.''' </emphasis></p>
<p>x = int(x)  <emphasis># конвертируем в целые, если возможно</emphasis></p>
<p>y = int(y)</p>
<p><strong>if </strong>x &gt; y:</p>
<p>print(x, 'наибольшее')</p>
<p><strong>else</strong>:</p>
<p>print(y, 'наибольшее')</p>
<p>printMax(3, 5)</p>
<p>print(printMax.__doc__)</p>
<p><strong>Вывод:</strong></p>
<p>$ python func_doc.py</p>
<p>5 наибольшее</p>
<p>Выводит максимальное из двух чисел.</p>
<p>Оба значения должны быть целыми числами.</p>
<p><strong>Как это работает:</strong></p>
<p>Строка в первой логической строке функции является  <emphasis>строкой документации</emphasis></p>
<p>для этой функции. Обратите внимание на то, что строки документации при-</p>
<p>менимы также к  <emphasis>модулям </emphasis>и  <emphasis>классам</emphasis>, о которых мы узнаем в соответствующих</p>
<p>6 DocString -  <emphasis>от англ. </emphasis>«<strong>Doc</strong>umentation <strong>String</strong>» – «строка документации» ( <emphasis>прим. перев. </emphasis>) <strong>10.10. Строки документации</strong>6</p>
<p>74</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>главах.</p>
<p>Строки документации принято записывать в форме многострочной7 строки, где первая строка начинается с заглавной буквы и заканчивается точкой. Вторая строка оставляется пустой, а подробное описание начинается с третьей.</p>
<p>Вам  <emphasis>настоятельно рекомендуется </emphasis> следовать такому формату для всех строк</p>
<p>документации всех ваших нетривиальных функций.</p>
<p>Доступ к строке документации функции printMax можно получить с помо-</p>
<p>щью атрибута этой функции (т.е. имени, принадлежащего ей) __doc__ (обра-</p>
<p>тите внимание на  <emphasis>двойное подчёркивание</emphasis>). Просто помните, что Python представляет  <emphasis>всё </emphasis> в виде объектов, включая функции. Мы узнаем больше об объектах в главе  <emphasis>о классах</emphasis>.</p>
<p>Если вы пользовались функцией help() в Python, значит вы уже видели строки документации. Эта функция просто-напросто считывает атрибут __doc__ соответствующей</p>
<p>функции и аккуратно выводит его на экран. Вы можете проверить её на рассмотренной</p>
<p>выше функции: просто включите help(printMax) в текст программы. Не забудьте на-жать клавишу q для выхода из справки (help).</p>
<p>Точно так же автоматические инструменты могут получать документацию из программы. Именно поэтому я  <emphasis>настоятельно рекомендую </emphasis> вам использовать строки документации</p>
<p>для любой нетривиальной функции, которую вы пишете. Команда pydoc, поставляемая</p>
<p>вместе с пакетом Python, работает аналогично функции help().</p>
<p>10.11 Аннотации</p>
<p>Функции имеют ещё одну дополнительную возможность, называемую аннотациями, которые предоставляют отличный способ сопровождения каждого параметра, равно как и</p>
<p>возвращаемого значения дополнительной информацией. Поскольку сам язык Python не</p>
<p>интерпретирует эти аннотации каким-либо способом (этот функционал отводится посто-ронним библиотекам), мы опустим эту возможность из нашего обсуждения. Если вам</p>
<p>интересно почитать об аннотациях, просмотрите <a l:href="https://www.python.org/dev/peps/pep-3107"><strong>PEP 3107</strong>. </a></p>
<p>10.12 Резюме</p>
<p>Мы рассмотрели достаточно много аспектов функций, но тем не менее, вы должны по-нимать, что это далеко не все их аспекты. В то же время, мы охватили большинство того, с чем вы будете сталкиваться при повседневном использовании функций в Python.</p>
<p>Далее мы увидим, как использовать и создавать модули Python.</p>
<p>7 т.е. строки, содержащей символы перевода строки. ( <emphasis>прим. перев</emphasis>) <strong>10.11. Аннотации</strong></p>
<p>75</p>
<p><strong>Модули</strong></p>
<p>Как можно использовать код повторно, помещая его в функции, мы уже видели. А что, если нам понадобится повторно использовать различные функции в других наших программах? Как вы уже, наверное, догадались, ответ – модули.</p>
<p>Существуют разные способы составления модулей, но самый простой – это создать файл</p>
<p>с расширением .py, содержащий функции и переменные.</p>
<p>Другой способ – написать модуль на том языке программирования, на котором написан</p>
<p>сам интерпретатор Python. Например, можно писать модули на <a l:href="http://docs.python.org/py3k/extending/index.html">языке программирова-</a></p>
<p><a l:href="http://docs.python.org/py3k/extending/index.html">ния C, </a>которые после компиляции могут использоваться стандартным интерпретатором</p>
<p>Python.</p>
<p>Модуль можно  <emphasis>импортировать </emphasis> в другую программу, чтобы использовать функции из</p>
<p>него. Точно так же мы используем стандартную библиотеку Python. Сперва посмотрим, как использовать модули стандартной библиотеки.</p>
<p><strong>Пример: </strong>(сохраните как using_sys.py)</p>
<p><strong>import sys</strong></p>
<p>print('Аргументы командной строки:')</p>
<p><strong>for </strong>i <strong>in </strong>sys.argv:</p>
<p>print(i)</p>
<p>print(' <strong>\n\n</strong>Переменная PYTHONPATH содержит', sys.path, ' <strong>\n</strong>') <strong>Вывод:</strong></p>
<p>$ python3 using_sys.py we are arguments</p>
<p>Аргументы командной строки:</p>
<p>using_sys.py</p>
<p>we</p>
<p>are</p>
<p>arguments</p>
<p>Переменная PYTHONPATH содержит ['', 'C:\\Windows\\system32\\python30.zip',</p>
<p>'C:\\Python30\\DLLs', 'C:\\Python30\\lib',</p>
<p>(продолжение на следующей странице)</p>
<p>76</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>'C:\\Python30\\lib\\plat-win', 'C:\\Python30',</p>
<p>'C:\\Python30\\lib\\site-packages']</p>
<p><strong>Как это работает:</strong></p>
<p>В начале мы  <emphasis>импортируем </emphasis> модуль sys командой import. Этим мы говорим</p>
<p>Python, что хотим использовать этот модуль. Модуль sys содержит функции, относящиеся к интерпретатору Python и его среде, т.е. к <strong>сис</strong>теме (<strong>sys</strong>tem).</p>
<p>Когда Python выполняет команду import sys, он ищет модуль sys. В данном</p>
<p>случае это один из встроенных модулей, и Python знает, где его искать.</p>
<p>Если бы это был не скомпилированный модуль, т.е. модуль, написанный на</p>
<p>Python, тогда интерпретатор Python искал бы его в каталогах, перечисленных</p>
<p>в переменной sys.path. Если модуль найден, выполняются команды в теле</p>
<p>модуля, и он становится  <emphasis>доступным</emphasis>. Обратите внимание, что инициализация1</p>
<p>происходит только при  <emphasis>первом </emphasis> импорте модуля.</p>
<p>Доступ к переменной argv в модуле sys предоставляется при помощи точки,</p>
<p>т.е. sys.argv. Это явно показывает, что это имя является частью модуля sys.</p>
<p>Ещё одним преимуществом такого обозначения является то, что имя не кон-</p>
<p>фликтует с именем переменной argv, которая может использоваться в вашей</p>
<p>программе.</p>
<p>Переменная sys.argv является  <emphasis>списком </emphasis> строк (списки будут детально обсуж-даться в  <emphasis>одной из последующих глав</emphasis>). Она содержит список  <emphasis>аргументов командной строки</emphasis>, т.е. аргументов, переданных программе из командной строки.</p>
<p>Если вы используете среду разработки2 для написания и запуска программ, поищите где-нибудь в её меню возможность передавать параметры командной строки.</p>
<p>В нашем примере, когда мы запускаем «python using_sys.py we are</p>
<p>arguments», мы запускаем модуль using_sys.py командой python, а всё,</p>
<p>что следует далее – аргументы, передаваемые программе3. Python сохраняет</p>
<p>аргументы командной строки в переменной sys.argv для дальнейшего ис-</p>
<p>пользования.</p>
<p>Помните, что имя запускаемого сценария4 всегда является первым аргументом в списке sys.argv. Так что в приведённом примере 'using_sys.py' бу-</p>
<p>дет элементом sys.argv[0], 'we' – sys.argv[1], 'are' – sys.argv[2], а</p>
<p>1 Инициализация – ряд действий, производимых при начальной загрузке ( <emphasis>прим. перев. </emphasis>) 2 IDE –  <emphasis>от англ. </emphasis>«Integrated Development Environment» – «интегрированная среда разработки» ( <emphasis>прим. перев. </emphasis>)3 «we are arguments» –  <emphasis>англ. </emphasis>«мы аргументы» ( <emphasis>прим. перев. </emphasis>) 4 Программу на интерпретируемом языке программирования также называют  <emphasis>сценарием </emphasis> или  <emphasis>скриптом</emphasis></p>
<p>( <emphasis>прим. перев. </emphasis>)</p>
<p>77</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>'arguments' – sys.argv[3]. Помните, что в Python нумерация начинается с</p>
<p>0, а не с 1.</p>
<p>sys.path содержит список имён каталогов, откуда импортируются модули.</p>
<p>Заметьте, что первая строка в sys.path пуста; эта пустая строка показывает, что текущая директория также является частью sys.path, которая совпадает</p>
<p>со значением переменной окружения PYTHONPATH. Это означает, что моду-</p>
<p>ли, расположенные в текущем каталоге, можно импортировать напрямую. В</p>
<p>противном случае придётся поместить свой модуль в один из каталогов, пе-</p>
<p>речисленных в sys.path.</p>
<p>Помните, что текущий каталог – это каталог, в котором была запущена про-</p>
<p>грамма. Выполните «import os; print(os.getcwd())», чтобы узнать те-</p>
<p>кущий каталог программы.</p>
<p>11.1 Файлы байткода .pyc</p>
<p>Импорт модуля – относительно дорогостоящее мероприятие, поэтому Python предприни-мает некоторые трюки для ускорения этого процесса. Один из способов – создать  <emphasis>байт-компилированные </emphasis> файлы (или  <emphasis>байткод</emphasis>) с расширением .pyc, которые являются некой</p>
<p>промежуточной формой, в которую Python переводит программу (помните раздел  <emphasis>«Введе-</emphasis></p>
<p> <emphasis>ние» </emphasis>о том, как работает Python?). Такой файл .pyc полезен при импорте модуля в следу-ющий раз в другую программу – это произойдёт намного быстрее, поскольку значитель-ная часть обработки, требуемой при импорте модуля, будет уже проделана. Этот байткод</p>
<p>также является платформо-независимым.</p>
<p><strong>Примечание: </strong>Обычно файлы .pyc создаются в том же каталоге, где расположены и соответствующие им файлы .py. Если Python не может получить доступ для записи файлов</p>
<p>в этот каталог, файлы .pyc созданы не будут.</p>
<p>11.2 Оператор from … import …</p>
<p>Чтобы импортировать переменную argv прямо в программу и не писать всякий раз sys.</p>
<p>при обращении к ней, можно воспользоваться выражением «from sys import argv».</p>
<p>Для импорта всех имён, использующихся в модуле sys, можно выполнить команду</p>
<p>«from sys import *». Это работает для любых модулей.</p>
<p>В общем случае вам  <emphasis>следует избегать </emphasis> использования этого оператора и использовать вместо этого оператор import, чтобы предотвратить конфликты имён и не затруднять чтение</p>
<p>программы.</p>
<p><strong>11.1. Файлы байткода .pyc</strong></p>
<p>78</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Пример:</strong></p>
<p><strong>from math import </strong>*</p>
<p>n = int(input("Введите диапазон:-</p>
<p>"))</p>
<p>p = [2, 3]</p>
<p>count = 2</p>
<p>a = 5</p>
<p><strong>while </strong>(count &lt; n):</p>
<p>b=0</p>
<p><strong>for </strong>i <strong>in </strong>range(2,a):</p>
<p><strong>if </strong>( i &lt;= sqrt(a)):</p>
<p><strong>if </strong>(a % i == 0):</p>
<p>print(a,"непростое")</p>
<p>b = 1</p>
<p><strong>else</strong>:</p>
<p><strong>pass</strong></p>
<p><strong>if </strong>(b != 1):</p>
<p>print(a,"простое")</p>
<p>p = p + [a]</p>
<p>count = count + 1</p>
<p>a = a + 2</p>
<p>print(p)</p>
<p>11.3 Имя модуля – __name__</p>
<p>У каждого модуля есть имя, и команды в модуле могут узнать имя их модуля. Это полезно, когда нужно знать, запущен ли модуль как самостоятельная программа или импортирован. Как уже упоминалось выше, когда модуль импортируется впервые, содержащийся в</p>
<p>нём код исполняется. Мы можем воспользоваться этим для того, чтобы заставить модуль</p>
<p>вести себя по-разному в зависимости от того, используется ли он сам по себе или импортируется в другую программа. Этого можно достичь с применением атрибута модуля под</p>
<p>названием __name__.</p>
<p><strong>Пример: </strong>(сохраните как using_name.py)</p>
<p><strong>if </strong>__name__ == '__main__':</p>
<p>print('Эта программа запущена сама по себе.')</p>
<p><strong>else</strong>:</p>
<p>print('Меня импортировали в другой модуль.')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 using_name.py</p>
<p>Эта программа запущена сама по себе.</p>
<p>(продолжение на следующей странице)</p>
<p><strong>11.3. Имя модуля – __name__</strong></p>
<p>79</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>$ python3</p>
<p>&gt;&gt;&gt; import using_name</p>
<p>Меня импортировали в другой модуль.</p>
<p>&gt;&gt;&gt;</p>
<p><strong>Как это работает:</strong></p>
<p>В каждом модуле Python определено его имя –</p>
<p>5</p>
<p>__name__ . Если оно равно</p>
<p>'__main__', это означает, что модуль запущен самостоятельно пользовате-</p>
<p>лем, и мы можем выполнить соответствующие действия.</p>
<p>11.4 Создание собственных модулей</p>
<p>Создать собственный модуль очень легко. Да вы всё время делали это! Ведь каждая программа на Python также является и модулем. Необходимо лишь убедиться, что у неё установлено расширение .py. Следующий пример объяснит это.</p>
<p><strong>Пример: </strong>(сохраните как mymodule.py)</p>
<p><strong>def </strong>sayhi():</p>
<p>print('Привет! Это говорит мой модуль.')</p>
<p>__version__ = '0.1'</p>
<p> <emphasis># Конец модуля mymodule.py</emphasis></p>
<p>Выше приведён простой  <emphasis>модуль</emphasis>. Как видно, в нём нет ничего особенного по сравнению с</p>
<p>обычной программой на Python. Далее посмотрим, как использовать этот модуль в других</p>
<p>наших программах.</p>
<p>Помните, что модуль должен находиться либо в том же каталоге, что и программа, в которую мы импортируем его, либо в одном из каталогов, указанных в sys.path.</p>
<p>Ещё один модуль (сохраните как mymodule_demo.py):</p>
<p><strong>import mymodule</strong></p>
<p>mymodule.sayhi()</p>
<p>print ('Версия', mymodule.__version__)</p>
<p>5 name -  <emphasis>англ. </emphasis>«имя» ( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>11.4. Создание собственных модулей</strong></p>
<p>80</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Вывод:</strong></p>
<p>$ python mymodule_demo.py</p>
<p>Привет! Это говорит мой модуль.</p>
<p>Версия 0.1</p>
<p><strong>Как это работает:</strong></p>
<p>Обратите внимание, что мы используем всё то же обозначение точкой для доступа к элементам модуля. Python повсеместно использует одно и то же обозначение точкой, придавая ему таким образом характерный «Python-овый»</p>
<p>вид и не вынуждая нас изучать всё новые и новые способы делать что-либо.</p>
<p>Вот версия, использующая синтаксис from..import (сохраните как mymodule_demo2.</p>
<p>py):</p>
<p><strong>from mymodule import </strong>sayhi, __version__</p>
<p>sayhi()</p>
<p>print('Версия', __version__)</p>
<p>Вывод mymodule_demo2.py такой же, как и mymodule_demo.py.</p>
<p>Обратите внимание, что если в модуле, импортирующем данный модуль, уже было объявлено имя __version__, возникнет конфликт. Это весьма вероятно, так как объявлять</p>
<p>версию любого модуля при помощи этого имени – общепринятая практика. Поэтому всегда рекомендуется отдавать предпочтение оператору import, хотя это и сделает вашу</p>
<p>программу немного длиннее.</p>
<p>Вы могли бы также использовать:</p>
<p><strong>from mymodule import </strong>*</p>
<p>Это импортирует все публичные имена, такие как sayhi, но не импортирует</p>
<p>__version__, потому что оно начинается с двойного подчёркивания</p>
<p><strong>Дзэн Python</strong></p>
<p>Одним из руководящих принципов в Python является «Явное лучше Неявного». Выполните команду «import this», чтобы узнать больше, а также просмотрите <a l:href="https://web.archive.org/web/20140526061824/http%3a//stackoverflow.com/questions/228181/the-zen-of-python">это обсужде-</a></p>
<p><a l:href="https://web.archive.org/web/20140526061824/http%3a//stackoverflow.com/questions/228181/the-zen-of-python">ние</a>, в котором приводятся примеры по каждому из принципов.</p>
<p><strong>11.4. Создание собственных модулей</strong></p>
<p>81</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>11.5 Функция dir</p>
<p>Встроенная функция dir() возвращает список имён, определяемых объектом. Например, для модуля в этот список входят функции, классы и переменные, определённые в этом</p>
<p>модуле.</p>
<p>Эта функция может принимать аргументы. Если в качестве аргумента указано имя модуля, она возвращает список имён, определённых в этом модуле. Если никакого аргумента</p>
<p>не передавать, она вернёт список имён, определённых в текущем модуле.</p>
<p><strong>Пример:</strong></p>
<p>$ python3</p>
<p>&gt;&gt;&gt; import sys # получим список атрибутов модуля 'sys'</p>
<p>&gt;&gt;&gt; dir(sys)</p>
<p>['__displayhook__', '__doc__', '__excepthook__', '__name__', '__package__',</p>
<p>'__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_compact_free lists', '_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module _names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook',</p>
<p>'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',</p>
<p>'executable', 'exit', 'flags', 'float_info', 'getcheckinterval', 'getdefault encoding', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getref count', 'getsizeof', 'gettrace', 'getwindowsversion', 'hexversion', 'intern',</p>
<p>'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks',</p>
<p>'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval',</p>
<p>'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',</p>
<p>'subversion', 'version', 'version_info', 'warnoptions', 'winver']</p>
<p>&gt;&gt;&gt; dir() # получим список атрибутов текущего модуля</p>
<p>['__builtins__', '__doc__', '__name__', '__package__', 'sys']</p>
<p>&gt;&gt;&gt; a = 5 # создадим новую переменную 'a'</p>
<p>&gt;&gt;&gt; dir()</p>
<p>['__builtins__', '__doc__', '__name__', '__package__', 'a', 'sys']</p>
<p>&gt;&gt;&gt; del a # удалим имя 'a'</p>
<p>&gt;&gt;&gt; dir()</p>
<p>['__builtins__', '__doc__', '__name__', '__package__', 'sys']</p>
<p>&gt;&gt;&gt;</p>
<p><strong>Как это работает:</strong></p>
<p>Сперва мы видим результат применения dir к импортированному модулю</p>
<p><strong>11.5. Функция dir</strong></p>
<p>82</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>sys. Видим огромный список атрибутов, содержащихся в нём.</p>
<p>Затем мы вызываем функцию dir, не передавая ей параметров. По умолча-</p>
<p>нию, она возвращает список атрибутов текущего модуля. Обратите внимание, что список импортированных модулей также входит туда.</p>
<p>Чтобы пронаблюдать за действием dir, мы определяем новую переменную</p>
<p>a и присваиваем ей значение, а затем снова вызываем dir. Видим, что в</p>
<p>полученном списке появилось дополнительное значение. Удалим перемен-</p>
<p>ную/атрибут из текущего модуля при помощи оператора del, и изменения</p>
<p>вновь отобразятся на выводе функции dir.</p>
<p>Замечание по поводу del: этот оператор используется для  <emphasis>удаления </emphasis> переменной/имени, и после его выполнения, в данном случае – del a, к переменной</p>
<p>a больше невозможно обратиться – её как будто никогда и не было.</p>
<p>Обратите внимание, что функция dir() работает для  <emphasis>любого </emphasis> объекта. Например, выполните «dir('print')», чтобы увидеть атрибуты функции print,</p>
<p>или «dir(str)», чтобы увидеть атрибуты класса str.</p>
<p>11.6 Пакеты</p>
<p>К настоящему времени вы, вероятно, начали наблюдать некоторую иерархию в организации ваших программ. Переменные обычно находятся в функциях. Функции и глобальные</p>
<p>переменные обычно находятся в модулях. А что, если возникнет необходимость как-то</p>
<p>организовать модули? Вот здесь-то и выходят на сцену пакеты.</p>
<p>Пакеты – это просто каталоги с модулями и специальным файлом __init__.py, который</p>
<p>показывает Python, что этот каталог особый, так как содержит модули Python.</p>
<p>Представим, что мы хотим создать пакет под названием «world» с субпакетами «asia»,</p>
<p>«africa» и т.д., которые, в свою очередь, будут содержать модули «india», «madagascar» и</p>
<p>т.д.</p>
<p>Для этого следовало бы создать следующую структуру каталогов:</p>
<p>| - &lt;некоторый каталог из sys.path&gt;/</p>
<p>| |---- world/</p>
<p>|</p>
<p>|---- __init__.py</p>
<p>|</p>
<p>|---- asia/</p>
<p>|</p>
<p>|</p>
<p>|---- __init__.py</p>
<p>|</p>
<p>|</p>
<p>|---- india/</p>
<p>|</p>
<p>|</p>
<p>|---- __init__.py</p>
<p>|</p>
<p>|</p>
<p>|---- foo.py</p>
<p>|</p>
<p>|---- africa/</p>
<p>|</p>
<p>|---- __init__.py</p>
<p>(продолжение на следующей странице)</p>
<p><strong>11.6. Пакеты</strong></p>
<p>83</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>|</p>
<p>|---- madagascar/</p>
<p>|</p>
<p>|---- __init__.py</p>
<p>|</p>
<p>|---- bar.py</p>
<p>Пакеты – это удобный способ иерархически организовать модули. Такое часто встречается в  <emphasis>стандартной библиотеке</emphasis>.</p>
<p>11.7 Резюме</p>
<p>Точно так же, как функции являются многократно используемыми фрагментами программ, модули являются многократно используемыми программами. Пакеты – это способ иерархической организации модулей. Стандартная библиотека Python является при-мером такого набора пакетов и модулей.</p>
<p>Мы увидели, как пользоваться этими модулями и создавать свои.</p>
<p>Далее мы познакомимся с некоторыми интересными концепциями, называемыми</p>
<p>«структуры данных».</p>
<p><strong>11.7. Резюме</strong></p>
<p>84</p>
<p><strong>Структуры данных</strong></p>
<p>Структуры данных – это, по сути, и есть  <emphasis>структуры</emphasis>, которые могут хранить некоторые</p>
<p> <emphasis>данные </emphasis> вместе. Другими словами, они используются для хранения связанных данных.</p>
<p>В Python существуют четыре встроенных структуры данных: список, кортеж, словарь и</p>
<p>множество. Посмотрим, как ими пользоваться, и как они могут облегчить нам жизнь.</p>
<p>12.1 Список</p>
<p>Список1 – это структура данных, которая содержит упорядоченный набор элементов, т.е.</p>
<p>хранит  <emphasis>последовательность </emphasis> элементов. Это легко представить, если вспомнить список покупок, в котором перечисляется, что нужно купить, с тем лишь исключением, что в списке</p>
<p>покупок каждый элемент обычно размещается на отдельной строке, тогда как в Python они разделяются запятыми.</p>
<p>Список элементов должен быть заключён в квадратные скобки, чтобы Python понял, что</p>
<p>это список. Как только список создан, можно добавлять, удалять или искать элементы</p>
<p>в нём. Поскольку элементы можно добавлять и удалять, мы говорим, что список – это</p>
<p> <emphasis>изменяемый </emphasis> тип данных, т.е. его можно модифицировать.</p>
<p>12.2 Краткое введение в объекты и классы</p>
<p>Хотя я и старался до сих пор оттянуть обсуждение объектов и классов, на данном этапе всё</p>
<p>же необходимо некоторое пояснение, чтобы вы лучше поняли идею списков. Мы изучим</p>
<p>эту тему детально в  <emphasis>её собственной главе</emphasis>.</p>
<p>Список – это один из примеров использования объектов и классов. Когда мы назначаем</p>
<p>некоторой переменной i значение, скажем, целое число 5, это можно представить себе</p>
<p>как создание <strong>объекта </strong>(т.е. экземпляра) i <strong>класса </strong>(т.е. типа) int. Чтобы лучше понять это, прочитайте help(int).</p>
<p>Класс может также иметь <strong>методы</strong>, т.е. функции, определённые для использования только</p>
<p>применительно к данному классу. Этот функционал будет доступен только когда имеется</p>
<p>1 list –  <emphasis>англ. </emphasis>«список» ( <emphasis>прим.перев. </emphasis>)</p>
<p>85</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>объект данного класса. Например, Python предоставляет метод append для класса list, который позволяет добавлять элемент к концу списка. Так mylist.append('and item') добавит эту строку к списку mylist. Обратите внимание на обозначение точкой для доступа к методам объектов.</p>
<p>Класс также может иметь <strong>поля</strong>, которые представляют собой не что иное, как переменные, определённые для использования только применительно к данному классу. Эти переменные/имена можно использовать только тогда, когда имеется объект этого класса. Доступ</p>
<p>к полям также осуществляется при помощи точки. Например, mylist.field.</p>
<p><strong>Пример: </strong>(сохраните как using_list.py)</p>
<p> <emphasis># Это мой список покупок</emphasis></p>
<p>shoplist = ['яблоки', 'манго', 'морковь', 'бананы']</p>
<p>print('Я должен сделать', len(shoplist), 'покупки.')</p>
<p>print('Покупки:', end=' ')</p>
<p><strong>for </strong>item <strong>in </strong>shoplist:</p>
<p>print(item, end=' ')</p>
<p>print(' <strong>\n</strong>Также нужно купить риса.')</p>
<p>shoplist.append('рис')</p>
<p>print('Теперь мой список покупок таков:', shoplist)</p>
<p>print('Отсортирую-ка я свой список')</p>
<p>shoplist.sort()</p>
<p>print('Отсортированный список покупок выглядит так:', shoplist)</p>
<p>print('Первое, что мне нужно купить, это', shoplist[0])</p>
<p>olditem = shoplist[0]</p>
<p><strong>del </strong>shoplist[0]</p>
<p>print('Я купил', olditem)</p>
<p>print('Теперь мой список покупок:', shoplist)</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 using_list.py</p>
<p>Я должен сделать 4 покупки.</p>
<p>Покупки: яблоки манго морковь бананы</p>
<p>Также нужно купить риса.</p>
<p>Теперь мой список покупок таков: ['яблоки', 'манго', 'морковь', 'бананы',</p>
<p>'рис']</p>
<p>Отсортирую-ка я свой список</p>
<p>Отсортированный список покупок выглядит так: ['бананы', 'манго', 'морковь',</p>
<p>'рис', 'яблоки']</p>
<p>(продолжение на следующей странице)</p>
<p><strong>12.2. Краткое введение в объекты и классы</strong></p>
<p>86</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>Первое, что мне нужно купить, это бананы</p>
<p>Я купил бананы</p>
<p>Теперь мой список покупок: ['манго', 'морковь', 'рис', 'яблоки']</p>
<p><strong>Как это работает:</strong></p>
<p>Переменная shoplist – это список покупок человека, идущего на рынок. В</p>
<p>shoplist мы храним только строки с названиями того, что нужно купить,</p>
<p>однако в список можно добавлять  <emphasis>любые объекты</emphasis>, включая числа или даже</p>
<p>другие списки.</p>
<p>Мы также использовали цикл for..in для итерации по элементам списка.</p>
<p>Вы уже, наверное, поняли, что список является также и последовательностью.</p>
<p>Особенности последовательностей будут рассмотрены  <emphasis>ниже</emphasis>.</p>
<p>Обратите внимание на использование ключевого аргумента end в функции</p>
<p>print, который показывает, что мы хотим закончить вывод пробелом вместо</p>
<p>обычного перевода строки.</p>
<p>Далее мы добавляем элемент к списку при помощи append – метода объекта</p>
<p>списка, который уже обсуждался ранее. Затем мы проверяем, действительно</p>
<p>ли элемент был добавлен к списку, выводя содержимое списка на экран при</p>
<p>помощи простой передачи этого списка функции print, которая аккуратно</p>
<p>его печатает.</p>
<p>Затем мы сортируем список, используя метод sort объекта списка. Имейте в</p>
<p>виду, что этот метод действует на сам список, а не возвращает изменённую его</p>
<p>версию. В этом отличие от того, как происходит работа со строками. Именно</p>
<p>это имеется в виду, когда мы говорим, что списки  <emphasis>изменяемы</emphasis>, а строки –  <emphasis>неизменяемы</emphasis>.</p>
<p>Далее после совершения покупки мы хотим удалить её из списка. Это дости-</p>
<p>гается применением оператора del. Мы указываем, какой элемент списка мы</p>
<p>хотим удалить, и оператор del удаляет его. Мы указываем, что хотим удалить</p>
<p>первый элемент списка, и поэтому пишем «del shoplist[0]» (помните, что</p>
<p>Python начинает отсчёт с 0).</p>
<p>Чтобы узнать более детально обо всех методах объекта списка, просмотрите help(list).</p>
<p><strong>12.2. Краткое введение в объекты и классы</strong></p>
<p>87</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>12.3 Кортеж</p>
<p>Кортежи служат для хранения нескольких объектов вместе. Их можно рассматривать как</p>
<p>аналог списков, но без такой обширной функциональности, которую предоставляет класс</p>
<p>списка. Одна из важнейших особенностей кортежей заключается в том, что они <strong>неизменяемы</strong>, так же, как и строки. Т.е. модифицировать кортежи невозможно.</p>
<p>Кортежи обозначаются указанием элементов, разделённых запятыми; по желанию их</p>
<p>можно ещё заключить в круглые скобки.</p>
<p>Кортежи обычно используются в тех случаях, когда оператор или пользовательская функция должны наверняка знать, что набор значений, т.е. кортеж значений, не изменится.</p>
<p><strong>Пример: </strong>(сохраните как using_tuple.py)</p>
<p>zoo = ('питон', 'слон', 'пингвин')  <emphasis># помните, что скобки не обязательны</emphasis></p>
<p>print('Количество животных в зоопарке -', len(zoo))</p>
<p>new_zoo = 'обезьяна', 'верблюд', zoo</p>
<p>print('Количество клеток в зоопарке -', len(new_zoo))</p>
<p>print('Все животные в новом зоопарке:', new_zoo)</p>
<p>print('Животные, привезённые из старого зоопарка:', new_zoo[2])</p>
<p>print('Последнее животное, привезённое из старого зоопарка -', new_zoo[2][2]) print('Количество животных в новом зоопарке -', len(new_zoo)-1 + <strong>\</strong></p>
<p>len(new_zoo[2]))</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 using_tuple.py</p>
<p>Количество животных в зоопарке - 3</p>
<p>Количество клеток в зоопарке - 3</p>
<p>Все животные в новом зоопарке: ('обезьяна', 'верблюд', ('питон', 'слон',</p>
<p>'пингвин'))</p>
<p>Животные, привезённые из старого зоопарка: ('питон', 'слон', 'пингвин')</p>
<p>Последнее животное, привезённое из старого зоопарка - пингвин</p>
<p>Количество животных в новом зоопарке - 5</p>
<p><strong>Как это работает:</strong></p>
<p>Переменная zoo обозначает кортеж элементов. Как мы видим, функция len</p>
<p>позволяет получить длину кортежа. Это также указывает на то, что кортеж</p>
<p>является  <emphasis>последовательностью</emphasis>.</p>
<p>Теперь мы перемещаем этих животных в новый зоопарк, поскольку старый</p>
<p>зоопарк закрывается. Поэтому кортеж new_zoo содержит тех животных, ко-</p>
<p>торые уже там, наряду с привезёнными из старого зоопарка. Возвращаясь к</p>
<p>реальности, обратите внимание на то, что кортеж внутри кортежа не теряет</p>
<p>своей индивидуальности.</p>
<p><strong>12.3. Кортеж</strong></p>
<p>88</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Доступ к элементам кортежа осуществляется указанием позиции элемента,</p>
<p>заключённой в квадратные скобки – точно так же, как мы это делали для списков. Это называется оператором  <emphasis>индексирования</emphasis>. Доступ к третьему элементу</p>
<p>в new_zoo мы получаем, указывая new_zoo[2], а доступ к третьему элементу</p>
<p>внутри третьего элемента в кортеже new_zoo – указывая new_zoo[2][2]. Это</p>
<p>достаточно просто, как только вы поймёте принцип.</p>
<p><strong>Скобки</strong></p>
<p>Хотя скобки и не являются обязательными, я предпочитаю всегда указывать их, чтобы</p>
<p>было очевидно, что это кортеж, особенно в двусмысленных случаях. Например, print(1, 2,3) и print( (1,2,3) ) делают разные вещи: первое выражение выводит три числа, тогда как второе – кортеж, содержащий эти три числа.</p>
<p><strong>Кортеж, содержащий 0 или 1 элемент</strong></p>
<p>Пустой кортеж создаётся при помощи пустой пары скобок – «myempty = ()». Однако, с кортежем из одного элемента не всё так просто. Его нужно указывать при помощи запятой после первого (и единственного) элемента, чтобы Python мог отличить кортеж от</p>
<p>скобок, окружающих объект в выражении. Таким образом, чтобы получить кортеж, содержащий элемент 2, вам потребуется указать «singleton = (2,)».</p>
<p><strong>Замечание для программистов на Perl</strong></p>
<p>Список внутри списка не теряет своей индивидуальности, т.е. списки не развёртываются, как в Perl. Это же относится к кортежу внутри кортежа, или кортежу внутри списка, или</p>
<p>списку внутри кортежа и т.д. В Python все они рассматриваются как объекты, хранящиеся</p>
<p>внутри другого объекта – только и всего.</p>
<p>12.4 Словарь</p>
<p>Словарь – это некий аналог адресной книги, в которой можно найти адрес или контакт-ную информацию о человеке, зная лишь его имя; т.е. некоторые <strong>ключи </strong>(имена) связаны</p>
<p>со <strong>значениями </strong>(информацией). Заметьте, что ключ должен быть уникальным – вы ведь</p>
<p>не сможете получить корректную информацию, если у вас записаны два человека с полностью одинаковыми именами.</p>
<p>Обратите также внимание на то, что в словарях в качестве ключей могут использоваться</p>
<p>только неизменяемые объекты (как строки), а в качестве значений можно использовать</p>
<p>как неизменяемые, так и изменяемые объекты. Точнее говоря, в качестве ключей должны</p>
<p>использоваться только простые объекты.</p>
<p><strong>12.4. Словарь</strong></p>
<p>89</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Пары ключ-значение указываются в словаре следующим образом: «d = {key1 : value1, key2 : value2 }». Обратите внимание, что ключ и значение разделяются</p>
<p>двоеточием, а пары друг от друга отделяются запятыми, а затем всё это заключается в</p>
<p>фигурные скобки.</p>
<p>Помните, что пары ключ-значение никоим образом не упорядочены в словаре. Если вам</p>
<p>необходим некоторый порядок, вам придётся отдельно отсортировать словарь перед обращением к нему.</p>
<p>Словари являются экземплярами/объектами класса dict.</p>
<p><strong>Пример: </strong>(сохраните как using_dict.py)</p>
<p> <emphasis># 'ab' - сокращение от 'a'ddress'b'ook</emphasis></p>
<p>ab = {</p>
<p>'Swaroop'</p>
<p>: 'swaroop@swaroopch.com',</p>
<p>'Larry'</p>
<p>: 'larry@wall.org',</p>
<p>'Matsumoto' : 'matz@ruby-lang.org',</p>
<p>'Spammer'</p>
<p>: 'spammer@hotmail.com'</p>
<p>}</p>
<p>print("Адрес Swaroop'а:", ab['Swaroop'])</p>
<p> <emphasis># Удаление пары ключ-значение</emphasis></p>
<p><strong>del </strong>ab['Spammer']</p>
<p>print(' <strong>\n</strong>В адресной книге  <emphasis>{0} </emphasis> контакта<strong>\n</strong>'.format(len(ab))) <strong>for </strong>name, address <strong>in </strong>ab.items():</p>
<p>print('Контакт  <emphasis>{0} </emphasis> с адресом  <emphasis>{1}</emphasis>'.format(name, address))</p>
<p> <emphasis># Добавление пары ключ-значение</emphasis></p>
<p>ab['Guido'] = 'guido@python.org'</p>
<p><strong>if </strong>'Guido' <strong>in </strong>ab:</p>
<p>print(" <strong>\n</strong>Адрес Guido:", ab['Guido'])</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 using_dict.py</p>
<p>Адрес Swaroop'а: swaroop@swaroopch.com</p>
<p>В адресной книге 3 контакта</p>
<p>Контакт Swaroop с адресом swaroop@swaroopch.com</p>
<p>Контакт Matsumoto с адресом matz@ruby-lang.org</p>
<p>Контакт Larry с адресом larry@wall.org</p>
<p>(продолжение на следующей странице)</p>
<p><strong>12.4. Словарь</strong></p>
<p>90</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>Адрес Guido: guido@python.org</p>
<p><strong>Как это работает:</strong></p>
<p>Мы создаём словарь</p>
<p>2</p>
<p>ab при помощи обозначений, описанных ранее. Затем</p>
<p>мы обращаемся к парам ключ-значение, указывая ключ в операторе индек-</p>
<p>сирования, которым мы пользовались для списков и кортежей. Как видите,</p>
<p>синтаксис прост.</p>
<p>Удалять пары ключ-значение можно при помощи нашего старого доброго</p>
<p>оператора del. Мы просто указываем имя словаря и оператор индексирования</p>
<p>для удаляемого ключа, после чего передаём это оператору del. Для этой операции нет необходимости знать, какое значение соответствует данному клю-</p>
<p>чу.</p>
<p>Далее мы обращаемся ко всем парам ключ-значение нашего словаря, исполь-</p>
<p>зуя метод items, который возвращает список кортежей, каждый из которых</p>
<p>содержит пару элементов: ключ и значение. Мы получаем эту пару и при-</p>
<p>сваиваем её значение переменным name и address соответственно в цикле</p>
<p>for..in, а затем выводим эти значения на экран в блоке for.</p>
<p>Новые пары ключ-значение добавляются простым обращением к нужному</p>
<p>ключу при помощи оператора индексирования и присваиванием ему неко-</p>
<p>торого значения, как мы сделали для Guido в примере выше.</p>
<p>Проверить, существует ли пара ключ-значение, можно при помощи оператора</p>
<p>in.</p>
<p>Чтобы просмотреть список всех методов класса dict смотрите help(dict).</p>
<p><strong>Ключевые Аргументы и Словари</strong></p>
<p>К слову, если вы использовали ключевые аргументы в ваших функциях, вы уже использовали словари! Только подумайте: вы указали пару ключ-значение среди параметров</p>
<p>функции при её определении, а когда обращаетесь к переменным внутри функции, то</p>
<p>это, фактически, обращение по ключу к словарю (который в терминах разработчиков ком-пиляторов называется  <emphasis>таблицей имён</emphasis>).</p>
<p>2 <strong>a</strong>ddress <strong>b</strong>ook –  <emphasis>англ. </emphasis>«адресная книга» ( <emphasis>прим. перев. </emphasis>) <strong>12.4. Словарь</strong></p>
<p>91</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>12.5 Последовательности</p>
<p>Списки, кортежи и строки являются примерами последовательностей. Но что такое последовательности и что в них такого особенного?</p>
<p>Основные возможности – это <strong>проверка принадлежности </strong>(т.е. выражения «in» и «not in») и <strong>оператор индексирования</strong>, позволяющий получить напрямую некоторый элемент последовательности.</p>
<p>Все три типа последовательностей, упоминавшиеся выше (списки, кортежи и строки), также предоставляют операцию получения <strong>вырезки</strong>, которая позволяет получить вырезку последовательности, т.е. её фрагмент.</p>
<p><strong>Пример: </strong>(сохраните как seq.py)</p>
<p>shoplist = ['яблоки', 'манго', 'морковь', 'бананы']</p>
<p>name = 'swaroop'</p>
<p> <emphasis># Операция индексирования</emphasis></p>
<p>print('Элемент 0 -', shoplist[0])</p>
<p>print('Элемент 1 -', shoplist[1])</p>
<p>print('Элемент 2 -', shoplist[2])</p>
<p>print('Элемент 3 -', shoplist[3])</p>
<p>print('Элемент -1 -', shoplist[-1])</p>
<p>print('Элемент -2 -', shoplist[-2])</p>
<p>print('Символ 0 -', name[0])</p>
<p> <emphasis># Вырезка из списка</emphasis></p>
<p>print('Элементы с 1 по 3:', shoplist[1:3])</p>
<p>print('Элементы с 2 до конца:', shoplist[2:])</p>
<p>print('Элементы с 1 по -1:', shoplist[1:-1])</p>
<p>print('Элементы от начала до конца:', shoplist[:])</p>
<p> <emphasis># Вырезка из строки</emphasis></p>
<p>print('Символы с 1 по 3:', name[1:3])</p>
<p>print('Символы с 2 до конца:', name[2:])</p>
<p>print('Символы с 1 до -1:', name[1:-1])</p>
<p>print('Символы от начала до конца:', name[:])</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 seq.py</p>
<p>Элемент 0 - яблоки</p>
<p>Элемент 1 - манго</p>
<p>Элемент 2 - морковь</p>
<p>Элемент 3 - бананы</p>
<p>Элемент -1 - бананы</p>
<p>(продолжение на следующей странице)</p>
<p><strong>12.5. Последовательности</strong></p>
<p>92</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>Элемент -2 - морковь</p>
<p>Символ 0 - s</p>
<p>Элементы с 1 по 3: ['манго', 'морковь']</p>
<p>Элементы с 2 до конца: ['морковь', 'бананы']</p>
<p>Элементы с 1 по -1: ['манго', 'морковь']</p>
<p>Элементы от начала до конца: ['яблоки', 'манго', 'морковь', 'бананы']</p>
<p>Символы с 1 по 3: wa</p>
<p>Символы с 2 до конца: aroop</p>
<p>Символы с 1 до -1: waroo</p>
<p>Символы от начала до конца: swaroop</p>
<p><strong>Как это работает:</strong></p>
<p>Прежде всего, мы видим, как использовать индексы для получения отдельных</p>
<p>элементов последовательности. Это ещё называют  <emphasis>приписыванием индекса</emphasis>. Когда мы указываем число в квадратных скобках после последовательности, как</p>
<p>показано выше, Python извлекает элемент, соответствующий указанной пози-</p>
<p>ции в последовательности. Помните, что Python начинает отсчёт с 0. Поэтому</p>
<p>shoplist[0] извлекает первый элемент, а shoplist[3] – четвёртый элемент</p>
<p>последовательности shoplist.</p>
<p>Индекс также может быть отрицательным числом. В этом случае позиция от-</p>
<p>считывается от конца последовательности. Поэтому shoplist[-1] указывает</p>
<p>на последний элемент последовательности shoplist, а shoplist[-2] – на</p>
<p>предпоследний.</p>
<p>Операция вырезки производится при помощи указания имени последова-</p>
<p>тельности, за которым может следовать пара чисел, разделённых двоеточием</p>
<p>и заключённых в квадратные скобки. Заметьте, как это похоже на операцию</p>
<p>индексирования, которой мы пользовались до сих пор. Помните, что числа в</p>
<p>скобках необязательны, тогда как двоеточие – обязательно.</p>
<p>Первое число (перед двоеточием) в операции вырезки указывает позицию, с</p>
<p>которой вырезка должна начинаться, а второе число (после двоеточия) указывает, где вырезка должна закончиться. Если первое число не указано, Python начнёт вырезку с начала последовательности. Если пропущено второе число, Python закончит вырезку у конца последовательности. Обратите внимание,</p>
<p>что полученная вырезка будет  <emphasis>начинаться </emphasis> с указанной начальной позиции, а  <emphasis>заканчиваться </emphasis> прямо перед указанной конечной позицией, т.е. начальная</p>
<p>позиция будет включена в вырезку, а конечная – нет.</p>
<p>Таким образом, shoplist[1:3] возвращает вырезку из последовательности,</p>
<p>начинающуюся с позиции 1, включает позицию 2, но останавливается на</p>
<p>позиции 3, и поэтому возвращает  <emphasis>вырезку </emphasis> из двух элементов. Аналогично, shoplist[:] возвращает копию всей последовательности.</p>
<p>Вырезка может осуществляться и с отрицательными значениями. Отрица-</p>
<p><strong>12.5. Последовательности</strong></p>
<p>93</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>тельные числа обозначают позицию с конца последовательности. Например,</p>
<p>shoplist[:-1] вернёт вырезку из последовательности, исключающую по-</p>
<p>следний элемент, но содержащую все остальные.</p>
<p>Кроме того, можно также указать третий аргумент для вырезки, который будет</p>
<p>обозначать  <emphasis>шаг </emphasis> вырезки (по умолчанию шаг вырезки равен 1):</p>
<p><strong>&gt;&gt;&gt; </strong>shoplist = ['яблоки', 'манго', 'морковь', 'бананы']</p>
<p><strong>&gt;&gt;&gt; </strong>shoplist[::1]</p>
<p>['яблоки', 'манго', 'морковь', 'бананы']</p>
<p><strong>&gt;&gt;&gt; </strong>shoplist[::2]</p>
<p>['яблоки', 'морковь']</p>
<p><strong>&gt;&gt;&gt; </strong>shoplist[::3]</p>
<p>['яблоки', 'бананы']</p>
<p><strong>&gt;&gt;&gt; </strong>shoplist[::-1]</p>
<p>['бананы', 'морковь', 'манго', 'яблоки']</p>
<p>Обратите внимание на то, что когда шаг равен 2, мы получаем элементы, на-ходящиеся на позициях 0, 2, … Когда шаг равен 3, мы получаем элементы с</p>
<p>позиций 0, 3, … и т.д.</p>
<p>Попробуйте разные комбинации параметров вырезки, используя интерактивную оболочку интерпретатора Python, т.е. его командную строку, чтобы сразу видеть результат. Последовательности замечательны тем, что они дают возможность обращаться к кортежам, спискам и строкам одним и тем же способом!</p>
<p>12.6 Множество</p>
<p>Множества – это  <emphasis>неупорядоченные </emphasis> наборы простых объектов. Они необходимы тогда, когда присутствие объекта в наборе важнее порядка или того, сколько раз данный объект</p>
<p>там встречается.</p>
<p>Используя множества, можно осуществлять проверку принадлежности, определять, является ли данное множество подмножеством другого множества, находить пересечения</p>
<p>множеств и так далее.</p>
<p><strong>&gt;&gt;&gt; </strong>bri = set(['Бразилия', 'Россия', 'Индия'])</p>
<p><strong>&gt;&gt;&gt; </strong>'Индия' <strong>in </strong>bri</p>
<p>True</p>
<p><strong>&gt;&gt;&gt; </strong>'США' <strong>in </strong>bri</p>
<p>False</p>
<p><strong>&gt;&gt;&gt; </strong>bric = bri.copy()</p>
<p><strong>&gt;&gt;&gt; </strong>bric.add('Китай')</p>
<p><strong>&gt;&gt;&gt; </strong>bric.issuperset(bri)</p>
<p>True</p>
<p>(продолжение на следующей странице)</p>
<p><strong>12.6. Множество</strong></p>
<p>94</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p><strong>&gt;&gt;&gt; </strong>bri.remove('Россия')</p>
<p><strong>&gt;&gt;&gt; </strong>bri &amp; bric  <emphasis># OR bri.intersection(bric)</emphasis></p>
<p>{'Бразилия', 'Индия'}</p>
<p><strong>Как это работает:</strong></p>
<p>Этот пример достаточно нагляден, так как использует основы теории мно-</p>
<p>жеств из школьного курса математики.</p>
<p>12.7 Ссылки</p>
<p>Когда мы создаём объект и присваиваем его переменной, переменная только  <emphasis>ссылается</emphasis></p>
<p>на объект, а не представляет собой этот объект! То есть имя переменной указывает на</p>
<p>ту часть памяти компьютера, где хранится объект. Это называется <strong>привязкой </strong>имени к</p>
<p>объекту.</p>
<p>Обычно вам не следует об этом беспокоиться, однако есть некоторый неочевидный эффект, о котором нужно помнить:</p>
<p><strong>Пример: </strong>(сохраните как reference.py)</p>
<p>print('Простое присваивание')</p>
<p>shoplist = ['яблоки', 'манго', 'морковь', 'бананы']</p>
<p>mylist = shoplist  <emphasis># mylist - лишь ещё одно имя, указывающее на тот же объект! </emphasis></p>
<p><strong>del </strong>shoplist[0]  <emphasis># Я сделал первую покупку, поэтому удаляю её из списка</emphasis></p>
<p>print('shoplist:', shoplist)</p>
<p>print('mylist:', mylist)</p>
<p> <emphasis># Обратите внимание, что и shoplist, и mylist выводят один и тот же список</emphasis></p>
<p> <emphasis># без пункта "яблоко", подтверждая тем самым, что они указывают на один</emphasis></p>
<p> <emphasis># объект. </emphasis></p>
<p>print('Копирование при помощи полной вырезки')</p>
<p>mylist = shoplist[:]  <emphasis># создаём копию путём полной вырезки</emphasis></p>
<p><strong>del </strong>mylist[0]  <emphasis># удаляем первый элемент</emphasis></p>
<p>print('shoplist:', shoplist)</p>
<p>print('mylist:', mylist)</p>
<p> <emphasis># Обратите внимание, что теперь списки разные</emphasis></p>
<p><strong>Вывод:</strong></p>
<p><strong>12.7. Ссылки</strong></p>
<p>95</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>$ python3 reference.py</p>
<p>Простое присваивание</p>
<p>shoplist: ['манго', 'морковь', 'бананы']</p>
<p>mylist: ['манго', 'морковь', 'бананы']</p>
<p>Копирование при помощи полной вырезки</p>
<p>shoplist: ['манго', 'морковь', 'бананы']</p>
<p>mylist: ['морковь', 'бананы']</p>
<p><strong>Как это работает:</strong></p>
<p>Большая часть объяснения содержится в комментариях.</p>
<p>Помните, что если вам нужно сделать копию списка или подобной последо-</p>
<p>вательности, или другого сложного объекта (не такого простого  <emphasis>объекта</emphasis>, как</p>
<p>целое число), вам следует воспользоваться операцией вырезки. Если вы просто присвоите имя переменной другому имени, оба они будут  <emphasis>ссылаться </emphasis> на</p>
<p>один и тот же объект, а это может привести к проблемам, если вы не осторож-ны.</p>
<p>12.8 Ещё о строках</p>
<p>Мы уже детально обсуждали строки ранее. Что же ещё можно о них узнать? Что ж, вы</p>
<p>знали, например, что строки также являются объектами и имеют методы, при помощи</p>
<p>которых можно делать практически всё: от проверки части строки до удаления краевых</p>
<p>пробелов?</p>
<p>Все строки, используемые вами в программах, являются объектами класса str. Некоторые</p>
<p>полезные методы этого класса продемонстрированы на примере ниже. Чтобы посмотреть</p>
<p>весь список методов, выполните help(str).</p>
<p><strong>Пример: </strong>(сохраните как str_methods.py)</p>
<p>name = 'Swaroop'  <emphasis># Это объект строки</emphasis></p>
<p><strong>if </strong>name.startswith('Swa'):</p>
<p>print('Да, строка начинается на "Swa"')</p>
<p><strong>if </strong>'a' <strong>in </strong>name:</p>
<p>print('Да, она содержит строку "a"')</p>
<p><strong>if </strong>name.find('war') != -1:</p>
<p>print('Да, она содержит строку "war"')</p>
<p>delimiter = '_*_'</p>
<p>(продолжение на следующей странице)</p>
<p><strong>12.8. Ещё о строках</strong></p>
<p>96</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>mylist = ['Бразилия', 'Россия', 'Индия', 'Китай']</p>
<p>print(delimiter.join(mylist))</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 str_methods.py</p>
<p>Да, строка начинается на "Swa"</p>
<p>Да, она содержит строку "a"</p>
<p>Да, она содержит строку "war"</p>
<p>Бразилия_*_Россия_*_Индия_*_Китай</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы видим сразу несколько методов строк в действии. Метод startswith служит</p>
<p>для того, чтобы определять, начинается ли строка с некоторой заданной подстроки. Оператор in используется для проверки, является ли некоторая строка частью данной строки.</p>
<p>Метод find используется для определения позиции данной подстроки в строке; find возвращает -1, если подстрока не обнаружена. В классе str также имеется отличный метод</p>
<p>для объединения (join)3 элементов последовательности с указанной строкой в качестве</p>
<p>разделителя между элементами, возвращающий большую строку, сгенерированную таким образом.</p>
<p>12.9 Резюме</p>
<p>Мы детально рассмотрели различные встроенные структуры данных Python. Эти структуры данных будут крайне важны для написания программ существенного размера.</p>
<p>Теперь, когда мы накопили достаточно базовых знаний о Python, далее посмотрим, как</p>
<p>проектировать и писать настоящую программу на Python.</p>
<p>3 join –  <emphasis>англ. </emphasis>«объединять» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>12.9. Резюме</strong></p>
<p>97</p>
<p><strong>Решение задач</strong></p>
<p>Мы рассмотрели различные части языка Python, и теперь посмотрим, как все эти части работают вместе, проектируя и составляя программу, которая  <emphasis>делает </emphasis> что-то полезное. Цель</p>
<p>состоит в том, чтобы научиться писать сценарии на языке Python самостоятельно.</p>
<p>13.1 Задача</p>
<p>Перед нами стоит следующая задача:  <emphasis>Составить программу, которая создаёт резервные</emphasis></p>
<p> <emphasis>копии всех наших важных файлов</emphasis>.</p>
<p>Хотя задача и проста, информации явно недостаточно, чтобы приступать к её решению.</p>
<p>Необходим некоторый дополнительный <strong>анализ</strong>. Например, как мы выберем,  <emphasis>какие </emphasis> файлы необходимо копировать?  <emphasis>Как </emphasis> их хранить?  <emphasis>Где </emphasis> их хранить?</p>
<p>После надлежащего анализа мы <strong>проектируем </strong>нашу программу. Мы создаём список, опи-сывающий то, как наша программа должна работать. В данном случае я создал список</p>
<p>того, как  <emphasis>я </emphasis> себе представляю её работу. Когда вы проектируете программу, у вас может по-лучиться другой результат, поскольку каждый человек представляет себе это по-своему, так что это в порядке вещей.</p>
<p>1. Файлы и каталоги, которые необходимо скопировать, собираются в список.</p>
<p>2. Резервные копии должны храниться в основном каталоге резерва.</p>
<p>3. Файлы помещаются в zip-архив.</p>
<p>4. Именем для zip-архива служит текущая дата и время.</p>
<p>5. Будем использовать стандартную команду zip, имеющуюся по умолчанию в любом</p>
<p>стандартном дистрибутиве GNU/Linux. Пользователи Windows могут <a l:href="http://gnuwin32.sourceforge.net/downlinks/zip.php">установить </a>её</p>
<p>со <a l:href="http://gnuwin32.sourceforge.net/packages/zip.htm">страницы проекта GnuWin32 </a>и добавить «C:\Program Files\GnuWin32\bin» к</p>
<p>системной переменной окружения PATH, аналогично тому, как мы это  <emphasis>делали </emphasis>для</p>
<p>самой команды «python». Обратите внимание, что для этого подойдёт любая команда архивации, если у неё есть интерфейс командной строки, чтобы ей можно было</p>
<p>передавать аргументы из нашего сценария.</p>
<p>98</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>13.2 Решение</p>
<p>Как только проект программы более-менее устоялся, можно приступать к написанию ко-да, который и будет являться <strong>реализацией </strong>нашего решения.</p>
<p>Сохраните как backup_ver1.py:</p>
<p><strong>import os</strong></p>
<p><strong>import time</strong></p>
<p> <emphasis># 1. Файлы и каталоги, которые необходимо скопировать, собираются в список. </emphasis></p>
<p>source = ['"C:<strong>\\</strong>My Documents"', 'C:<strong>\\</strong>Code']</p>
<p> <emphasis># Заметьте, что для имён, содержащих пробелы, необходимо использовать</emphasis></p>
<p> <emphasis># двойные кавычки внутри строки. </emphasis></p>
<p> <emphasis># 2. Резервные копии должны храниться в основном каталоге резерва. </emphasis></p>
<p>target_dir = 'E:<strong>\\</strong>Backup'  <emphasis># Подставьте ваш путь. </emphasis></p>
<p> <emphasis># 3. Файлы помещаются в zip-архив. </emphasis></p>
<p> <emphasis># 4. Именем для zip-архива служит текущая дата и время. </emphasis></p>
<p>target = target_dir + os.sep + time.strftime('%Y%m <emphasis>%d</emphasis>%H%M%S') + '.zip'</p>
<p> <emphasis># 5. Используем команду "zip" для помещения файлов в zip-архив</emphasis></p>
<p>zip_command = "zip -qr  <emphasis>{0} {1}</emphasis>".format(target, ' '.join(source))</p>
<p> <emphasis># Запускаем создание резервной копии</emphasis></p>
<p><strong>if </strong>os.system(zip_command) == 0:</p>
<p>print('Резервная копия успешно создана в', target)</p>
<p><strong>else</strong>:</p>
<p>print('Создание резервной копии НЕ УДАЛОСЬ')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 backup_ver1.py</p>
<p>Резервная копия успешно создана в E:\\Backup\\20080702185040.zip</p>
<p>Теперь наступает стадия <strong>тестирования</strong>, когда мы проверяем, правильно ли работает наша</p>
<p>программа. Если она работает не так, как ожидалось, нам придётся заняться её <strong>отладкой</strong></p>
<p>(дебагом)1, т.е. устранением <strong>багов </strong>(ошибок) в программе.</p>
<p>Если приведённая выше программа у вас не заработает, допишите print(zip_command) прямо перед вызовом os.system и запустите программу. После этого скопируйте вы-1 debug – применительно к компьютерным программам обозначает <a l:href="https://ru.wikipedia.org/wiki/Отладка_программы">отладку </a>(обнаружение и устранение</p>
<p>ошибок, которые при этом принято называть «bug», т.е. «жук»). По всей видимости, это <a l:href="https://ru.wikipedia.org/wiki/Баг#Этимология">берёт своё начало</a></p>
<p>с процедуры изгнания насекомых из схем больших ЭВМ, хотя само понятие «bug» в смысле маленькой</p>
<p>неисправности встречается и в более ранней литературе, например, в записях Томаса Эдисона 1878 года.</p>
<p>( <emphasis>прим. перев. </emphasis>)</p>
<p><strong>13.2. Решение</strong></p>
<p>99</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>веденную команду «zip_command» и вставьте её в командную строку, чтобы проверить, работает ли она корректно сама по себе. Если она не срабатывает, проверьте справку по</p>
<p>команде «zip», чтобы выяснить, в чём может быть проблема. Если команда успешно выполняется, проверьте, совпадает ли ваша программа на Python в точности с программой, приведённой выше.</p>
<p><strong>Как это работает:</strong></p>
<p>Вы заметили, как мы превратили наш  <emphasis>проект </emphasis> в  <emphasis>код </emphasis> шаг за шагом.</p>
<p>Мы использовали модули os и time, предварительно импортировав их. Далее</p>
<p>мы указали файлы и каталоги для резервного копирования в списке</p>
<p>2</p>
<p>source .</p>
<p>Каталог назначения – это каталог, в котором мы сохраняем все резервные копии, и он указывается в переменной target_dir. Именем zip-архива, кото-</p>
<p>рый мы создаём, будет текущая дата и время, которые генерируются при по-</p>
<p>мощи функции time.strftime(). У него будет расширение .zip, и хранить-</p>
<p>ся он будет в каталоге target_dir.</p>
<p>Обратите внимание на употребление переменной os.sep – она содержит раз-</p>
<p>делитель пути для конкретной операционной системы, т.е. он будет '/' в</p>
<p>GNU/Linux и Unix3, '\\' в Windows и ':' в Mac OS. Использование os.sep вместо этих символов напрямую делает программу переносимой, и она сможет работать на всех этих операционных системах.</p>
<p>Функция time.strftime() принимает в качестве аргумента формат вывода</p>
<p>времени, например, такой, как мы указали в программе выше. Символ форма-</p>
<p>та %Y будет замещён годом и столетием. Символ %m будет замещён месяцем в</p>
<p>форме числа от 01 до 12, и так далее. Полный список таких символов формата</p>
<p>можно найти в <a l:href="http://docs.python.org/py3k/library/time.html#time.strftime">справочнике по Python</a>.</p>
<p>Имя конечного zip-файла мы создаём при помощи оператора, который  <emphasis>соединяет </emphasis> строки, т.е. объединяет две строки и возвращает новую. После этого мы</p>
<p>создаём строку zip_command, которая содержит команду, которую мы наме-</p>
<p>рены выполнить. Проверить, работает ли эта команда, можно запустив её отдельно в командной оболочке (терминал в GNU/Linux или командная строка</p>
<p>DOS).</p>
<p>Команда zip, которую мы используем, имеет некоторые параметры. Параметр</p>
<p>«-q» используется для указания, что команда должна сработать тихо4. Параметр «-r» обозначает, что команда архивации должна работать рекурсивно5</p>
<p>для каталогов, т.е. должна включать все подкаталоги и файлы. Оба парамет-ра объединены и указаны в краткой форме «-qr». За параметрами следует</p>
<p>2 source –  <emphasis>англ. </emphasis>«источник» ( <emphasis>прим.перев. </emphasis>)</p>
<p>3 Под словом «Unix» здесь подразумеваются все операционные системы, построенные по принципам</p>
<p>ОС Unix, а не только она сама по себе. Примерами таких операционных систем являются все дистрибутивы</p>
<p>GNU/Linux, семейство ОС *BSD, Android, Solaris и т.д. ( <emphasis>прим.перев. </emphasis>) 4 <strong>q</strong>uietly –  <emphasis>англ. </emphasis>«тихо» ( <emphasis>прим.перев. </emphasis>)</p>
<p>5 <strong>r</strong>ecursive –  <emphasis>англ. </emphasis>«рекурсивно» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>13.2. Решение</strong></p>
<p>100</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>имя создаваемого zip-архива, за которым указывается список файлов и каталогов для резервного копирования. Мы превращаем список source в строку,</p>
<p>используя уже знакомый нам метод join.</p>
<p>Затем мы, наконец,  <emphasis>выполняем </emphasis> команду при помощи функции os.system, которая запускает команду так, как будто она была запущена из  <emphasis>системы</emphasis>, т.е. из</p>
<p>командной оболочки. Она возвращает 0, если команда выполнена успешно, в</p>
<p>противном случае она возвращает код ошибки.</p>
<p>В зависимости от вывода команды, мы печатаем соответствующее сообщение</p>
<p>о том, успешным было создание резервных копий или нет.</p>
<p>Вот и всё, мы создали сценарий для сохранения резервных копий наших важ-</p>
<p>ных файлов!</p>
<p><strong>Замечание для пользователей Windows</strong></p>
<p>Вместо управляющей последовательности для обратной наклонной черты могут использоваться «сырые»6 строки. Например, можно писать «C:\\Documents» или «r'C:\ Documents'». Однако, <strong>не </strong>используйте «'C:\Documents'», так как в этом случае окажет-ся, что вы пытаетесь применить неизвестную управляющую последовательность \D.</p>
<p>Теперь, когда у нас есть рабочий сценарий резервного копирования, мы можем использовать его для создания копий наших файлов. Пользователям GNU/Linux и Unix рекомендуется сделать этот программный файл  <emphasis>исполнимым</emphasis>, чтобы иметь возможность запускать</p>
<p>его в любое время из любого места. Это называется <strong>операционной </strong>фазой или <strong>развёрты-ванием </strong>программы.</p>
<p>Программа, приведённая выше, работает корректно, но (обычно) поначалу программы не</p>
<p>работают так, как вы того ожидаете. Проблемы могут возникать вследствие неправиль-ного проектирования программы, допущения ошибки при наборе программного кода и</p>
<p>т.д. В таких случаях приходится возвращаться к стадии проектирования или отладки программы.</p>
<p>13.3 Вторая версия</p>
<p>Первая версия нашего сценария работает. Тем не менее, его можно улучшить так, чтобы</p>
<p>было удобнее пользоваться в повседневной работе. Это называется стадией <strong>поддержки</strong></p>
<p>программы.</p>
<p>Одно из улучшений, показавшееся мне полезным, – это лучший механизм именования</p>
<p>файлов: использование  <emphasis>времени </emphasis> в качестве имени файла, сохраняющегося в каталог с текущей датой в качестве имени, который в свою очередь, расположен в главном каталоге</p>
<p>6 raw –  <emphasis>англ. </emphasis>«сырой», «необработанный» ( <emphasis>прим.перев</emphasis>)</p>
<p><strong>13.3. Вторая версия</strong></p>
<p>101</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>для хранения резервных копий. Первое достоинство этого состоит в том, что копии хранятся в иерархической структуре, которой легче управлять. Второе достоинство – в том, что имена файлов намного короче. Третье достоинство состоит в том, что по именам каталогов можно легко определить, в какие дни создавались резервные копии, так как каталог</p>
<p>создаётся только в случае резервного копирования данных в этот день.</p>
<p>Сохраните как backup_ver2.py:</p>
<p><strong>import os</strong></p>
<p><strong>import time</strong></p>
<p> <emphasis># 1. Файлы и каталоги, которые необходимо скопировать, собираются в список. </emphasis></p>
<p>source = ['"C:<strong>\\</strong>My Documents"', 'C:<strong>\\</strong>Code']</p>
<p> <emphasis># Заметьте, что для имён, содержащих пробелы, необходимо использовать</emphasis></p>
<p> <emphasis># двойные кавычки внутри строки. </emphasis></p>
<p> <emphasis># 2. Резервные копии должны храниться в основном каталоге резерва. </emphasis></p>
<p>target_dir = 'E:<strong>\\</strong>Backup'  <emphasis># Подставьте ваш путь. </emphasis></p>
<p> <emphasis># 3. Файлы помещаются в zip-архив. </emphasis></p>
<p> <emphasis># 4. Текущая дата служит именем подкаталога в основном каталоге</emphasis></p>
<p>today = target_dir + os.sep + time.strftime('%Y%m <emphasis>%d</emphasis>')</p>
<p> <emphasis># Текущее время служит именем zip-архива</emphasis></p>
<p>now = time.strftime('%H%M%S')</p>
<p> <emphasis># Создаём каталог, если его ещё нет</emphasis></p>
<p><strong>if not </strong>os.path.exists(today):</p>
<p>os.mkdir(today)  <emphasis># создание каталога</emphasis></p>
<p>print('Каталог успешно создан', today)</p>
<p> <emphasis># Имя zip-файла</emphasis></p>
<p>target = today + os.sep + now + '.zip'</p>
<p> <emphasis># 5. Используем команду "zip" для помещения файлов в zip-архив</emphasis></p>
<p>zip_command = "zip -qr  <emphasis>{0} {1}</emphasis>".format(target, ' '.join(source))</p>
<p> <emphasis># Запускаем создание резервной копии</emphasis></p>
<p><strong>if </strong>os.system(zip_command) == 0:</p>
<p>print('Резервная копия успешно создана в', target)</p>
<p><strong>else</strong>:</p>
<p>print('Создание резервной копии НЕ УДАЛОСЬ')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 backup_ver2.py</p>
<p>Каталог успешно создан E:\\Backup\\20080702</p>
<p>Резервная копия успешно создана в E:\\Backup\\20080702\\202311.zip</p>
<p>(продолжение на следующей странице)</p>
<p><strong>13.3. Вторая версия</strong></p>
<p>102</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>$ python3 backup_ver2.py</p>
<p>Резервная копия успешно создана в E:\\Backup\\20080702\\202325.zip</p>
<p><strong>Как это работает:</strong></p>
<p>Большая часть программы осталась прежней. Разница в том, что теперь мы</p>
<p>проверяем, существует ли каталог с именем, соответствующем текущей дате, внутри главного каталога для хранения резервных копий. Для этого мы используем функцию os.path.exists. Если он не существует, мы создаём его</p>
<p>функцией os.mkdir.</p>
<p>13.4 Третья версия</p>
<p>Вторая версия уже удобнее для работы с большим количеством резервных копий. С другой стороны, когда их много, становится трудно отличить, какая копия для чего. Например, мы могли внести значительные изменения в какую-то программу или презентацию, и теперь хотим указать суть этих изменений в имени zip-архива. Этого легко можно достичь добавлением пользовательского комментария к имени zip-архива.</p>
<p><strong>Примечание: </strong>Следующая программа не работает, так что не переживайте, просто про-следуйте по ней, так как в ней содержится урок.</p>
<p>Сохраните как backup_ver3.py</p>
<p><strong>import os</strong></p>
<p><strong>import time</strong></p>
<p> <emphasis># 1. Файлы и каталоги, которые необходимо скопировать, собираются в список. </emphasis></p>
<p>source = ['"C:<strong>\\</strong>My Documents"', 'C:<strong>\\</strong>Code']</p>
<p> <emphasis># Заметьте, что для имён, содержащих пробелы, необходимо использовать</emphasis></p>
<p> <emphasis># двойные кавычки внутри строки. </emphasis></p>
<p> <emphasis># 2. Резервные копии должны храниться в основном каталоге резерва. </emphasis></p>
<p>target_dir = 'E:<strong>\\</strong>Backup'  <emphasis># Подставьте ваш путь. </emphasis></p>
<p> <emphasis># 3. Файлы помещаются в zip-архив. </emphasis></p>
<p> <emphasis># 4. Текущая дата служит именем подкаталога в основном каталоге</emphasis></p>
<p>today = target_dir + os.sep + time.strftime('%Y%m <emphasis>%d</emphasis>')</p>
<p> <emphasis># Текущее время служит именем zip-архива</emphasis></p>
<p>now = time.strftime('%H%M%S')</p>
<p>(продолжение на следующей странице)</p>
<p><strong>13.4. Третья версия</strong></p>
<p>103</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p> <emphasis># Запрашиваем комментарий пользователя для имени файла</emphasis></p>
<p>comment = input('Введите комментарий --&gt; ')</p>
<p><strong>if </strong>len(comment) == 0:  <emphasis># проверяем, введён ли комментарий</emphasis></p>
<p>target = today + os.sep + now + '.zip'</p>
<p><strong>else</strong>:</p>
<p>target = today + os.sep + now + '_' +</p>
<p>comment.replace(' ', '_') + '.zip'</p>
<p> <emphasis># Создаём каталог, если его ещё нет</emphasis></p>
<p><strong>if not </strong>os.path.exists(today):</p>
<p>os.mkdir(today)  <emphasis># создание каталога</emphasis></p>
<p>print('Каталог успешно создан', today)</p>
<p> <emphasis># 5. Используем команду "zip" для помещения файлов в zip-архив</emphasis></p>
<p>zip_command = "zip -qr  <emphasis>{0} {1}</emphasis>".format(target, ' '.join(source))</p>
<p> <emphasis># Запускаем создание резервной копии</emphasis></p>
<p><strong>if </strong>os.system(zip_command) == 0:</p>
<p>print('Резервная копия успешно создана в', target)</p>
<p><strong>else</strong>:</p>
<p>print('Создание резервной копии НЕ УДАЛОСЬ')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 backup_ver3.py</p>
<p>File "backup_ver3.py", line 25</p>
<p>target = today + os.sep + now + '_' +</p>
<p>^</p>
<p>SyntaxError: invalid syntax</p>
<p><strong>Как это (не) работает:</strong></p>
<p> <emphasis>Эта программа не работает! </emphasis> Python сообщает об обнаружении ошибки синтаксиса, что означает, что сценарий не удовлетворяет структуре, которую ожидает увидеть Python. Когда Python выдаёт сообщение об ошибке, он также указывает нам на место ошибки. Так что мы начинаем  <emphasis>отладку </emphasis> программы с этой</p>
<p>строки.</p>
<p>При внимательном рассмотрении, мы видим, что одна логическая строка бы-</p>
<p>ла разбита на две физические строки, но мы не указали, что эти две физи-</p>
<p>ческие строки являются частью одной. На деле же Python просто обнаружил</p>
<p>оператор сложения (+) без соответствующего операнда в той же логической</p>
<p>строке, а поэтому не знает, как продолжать. Помните, что мы можем указать, что логическая строка продолжается на следующей физической при помощи</p>
<p>обратной наклонной черты в конце физической строки. Внесём это исправ-</p>
<p>ление в нашу программу. Коррекция программы при обнаружении ошибок и</p>
<p><strong>13.4. Третья версия</strong></p>
<p>104</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>называется <strong>отладкой</strong>7.</p>
<p>13.5 Четвёртая версия</p>
<p>Сохраните как backup_ver4.py</p>
<p><strong>import os</strong></p>
<p><strong>import time</strong></p>
<p> <emphasis># 1. Файлы и каталоги, которые необходимо скопировать, собираются в список. </emphasis></p>
<p>source = ['"C:<strong>\\</strong>My Documents"', 'C:<strong>\\</strong>Code']</p>
<p> <emphasis># Заметьте, что для имён, содержащих пробелы, необходимо использовать</emphasis></p>
<p> <emphasis># двойные кавычки внутри строки. </emphasis></p>
<p> <emphasis># 2. Резервные копии должны храниться в основном каталоге резерва. </emphasis></p>
<p>target_dir = 'E:<strong>\\</strong>Backup'  <emphasis># Подставьте ваш путь. </emphasis></p>
<p> <emphasis># 3. Файлы помещаются в zip-архив. </emphasis></p>
<p> <emphasis># 4. Текущая дата служит именем подкаталога в основном каталоге</emphasis></p>
<p>today = target_dir + os.sep + time.strftime('%Y%m <emphasis>%d</emphasis>')</p>
<p> <emphasis># Текущее время служит именем zip-архива</emphasis></p>
<p>now = time.strftime('%H%M%S')</p>
<p> <emphasis># Запрашиваем комментарий пользователя для имени файла</emphasis></p>
<p>comment = input('Введите комментарий --&gt; ')</p>
<p><strong>if </strong>len(comment) == 0:  <emphasis># проверяем, введён ли комментарий</emphasis></p>
<p>target = today + os.sep + now + '.zip'</p>
<p><strong>else</strong>:</p>
<p>target = today + os.sep + now + '_' + \</p>
<p>comment.replace(' ', '_') + '.zip'</p>
<p> <emphasis># Создаём каталог, если его ещё нет</emphasis></p>
<p><strong>if not </strong>os.path.exists(today):</p>
<p>os.mkdir(today)  <emphasis># создание каталога</emphasis></p>
<p>print('Каталог успешно создан', today)</p>
<p> <emphasis># 5. Используем команду "zip" для помещения файлов в zip-архив</emphasis></p>
<p>zip_command = "zip -qr  <emphasis>{0} {1}</emphasis>".format(target, ' '.join(source))</p>
<p> <emphasis># Запускаем создание резервной копии</emphasis></p>
<p><strong>if </strong>os.system(zip_command) == 0:</p>
<p>print('Резервная копия успешно создана в', target)</p>
<p><strong>else</strong>:</p>
<p>print('Создание резервной копии НЕ УДАЛОСЬ')</p>
<p>7 bug fixing – устранение «багов», исправление ошибок ( <emphasis>прим.перев</emphasis>) <strong>13.5. Четвёртая версия</strong></p>
<p>105</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 backup_ver4.py</p>
<p>Введите комментарий --&gt; added new examples</p>
<p>Резервная копия успешно создана в E:\Backup\20080702\202836_added_new_</p>
<p> <emphasis>,→</emphasis> examples.zip</p>
<p>$ python3 backup_ver4.py</p>
<p>Введите комментарий --&gt;</p>
<p>Резервная копия успешно создана в E:\Backup\20080702\202839.zip</p>
<p><strong>Как это работает:</strong></p>
<p>Теперь эта программа работает! Давайте просмотрим все улучшения, сделан-</p>
<p>ные нами для версии 3. Мы запрашиваем пользовательский комментарий при</p>
<p>помощи функции input, а затем проверяем, ввёл ли пользователь что-либо,</p>
<p>определяя длину введённой строки функцией len. Если пользователь просто</p>
<p>нажал ENTER, не вводя никакого текста (может быть, это было регулярное создание резервной копии, или никаких особых изменений внесено не было),</p>
<p>мы продолжаем так же, как делали до сих пор.</p>
<p>Если же комментарий был введён, он добавляется к имени zip-архива перед</p>
<p>расширением .zip. Обратите внимание, что мы заменяем пробелы в коммен-</p>
<p>тарии подчёркиваниями: управлять файлами без пробелов в именах намного</p>
<p>легче.</p>
<p>13.6 Дополнительные усовершенствования</p>
<p>Четвёртая версия – вполне удовлетворительный рабочий сценарий для большинства</p>
<p>пользователей, однако нет пределов совершенства. Например, в программу можно добавить уровень  <emphasis>подробности</emphasis>8 вывода, чтобы при указании параметра «-v» она становилась</p>
<p>более «разговорчивой».</p>
<p>Ещё одним возможным улучшением была бы возможность передавать сценарию другие</p>
<p>файлы и каталоги прямо в командной строке. Эти имена можно получать из списка sys.</p>
<p>argv и добавлять к нашему списку source при помощи метода extend класса list.</p>
<p>Наиболее важным усовершенствованием было бы прекращение использования os.</p>
<p>system для создания архивов, а применение вместо него встроенных модулей zipfile или tarfile. Они являются частью стандартной библиотеки, поэтому всегда доступны</p>
<p>для использования без зависимости от внешней программы zip на компьютере.</p>
<p>8 verbosity –  <emphasis>англ. </emphasis>«многословность». Применительно к компьютерным программам обозначает степень</p>
<p>подробности выводимых программой сообщений, т.е. степень «разговорчивости» программы. Отсюда и</p>
<p>название этого параметра ( <emphasis>прим.перев</emphasis>)</p>
<p><strong>13.6. Дополнительные усовершенствования</strong></p>
<p>106</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>В приведённых примерах мы использовали способ с os.system для создания резервных</p>
<p>копий исключительно в педагогических целях, чтобы пример был достаточно прост для</p>
<p>понимания любым читателем, но достаточно реален для того, чтобы делать что-то полезное.</p>
<p>Попробуйте написать пятую версию с использованием модуля <a l:href="http://docs.python.org/py3k/library/zipfile.html">zipfile </a>вместо вызова os.</p>
<p>system.</p>
<p>13.7 Процесс разработки программного обеспече-</p>
<p>ния</p>
<p>В процессе создания программы мы прошли через несколько <strong>стадий</strong>. Эти стадии можно</p>
<p>свести примерно в такой список:</p>
<p>• Что (Анализ)</p>
<p>• Как (Проектирование)</p>
<p>• Создание (Реализация)</p>
<p>• Тестирование (Тестирование и Отладка)</p>
<p>• Использование (Развёртывание и Оперирование)</p>
<p>• Поддержка (Усовершенствование)</p>
<p>Процедура, которую мы прошли при написании сценария создания резервных копий рекомендуется и для других программ: Проведите анализ и проектирование. Начните ре-ализацию с простейшей версии. Протестируйте и отладьте её. Попользуйтесь ею, чтобы</p>
<p>убедиться, что она работает, как ожидалось. После этого добавляйте любые необходимые</p>
<p>функции, повторяя цикл «Создание-Тестирование-Использование» столько раз, сколько</p>
<p>потребуется. Помните, <strong>Программы выращиваются, а не строятся</strong>.</p>
<p>13.8 Резюме</p>
<p>Мы увидели, как создавать свои собственные программы/сценарии на Python, а также</p>
<p>различные стадии написания программ. На данном этапе вам будет полезно создать собственную программу по такому рецепту, как мы это делали в настоящей главе, чтобы</p>
<p>лучше привыкнуть к Python, равно как и к решению задач.</p>
<p>Далее мы обсудим объектно-ориентированное программирование.</p>
<p><strong>13.7. Процесс разработки программного обеспечения</strong></p>
<p>107</p>
<p><strong>Объектно-ориентированное</strong></p>
<p><strong>программирование</strong></p>
<p>До сих пор наши программы состояли из функций, т.е. блоков выражений, которые мани-пулируют данными. Это называется  <emphasis>процедурно-ориентированным </emphasis> стилем программирования. Существует и другой способ организации программ: объединять данные и функционал внутри некоего объекта. Это называется  <emphasis>объектно-ориентированной </emphasis> парадигмой</p>
<p>программирования. В большинстве случаев можно ограничиться процедурным программированием, а при написании большой программы или если решение конкретной задачи того требует, можно переходить к техникам объектно-ориентированного программирования.</p>
<p>Два основных аспекта объектно-ориентированного программирования – классы и объекты. <strong>Класс </strong>создаёт новый  <emphasis>тип</emphasis>, а <strong>объекты </strong>являются  <emphasis>экземплярами </emphasis> класса. Аналогично, когда мы говорим о «переменных типа int», это означает, что переменные, которые хранят целочисленные значения, являются экземплярами (объектами) класса int.</p>
<p><strong>Замечание для программистов на статических языках</strong></p>
<p>Обратите внимание, что даже целые числа рассматриваются как объекты (класса int), в отличие от C++ и Java (до версии 1.5), где целые числа являются примитивами. См.</p>
<p>help(int) для более детального описания этого класса. Программисты на C# и Java 1.5</p>
<p>могут заметить сходство с концепцией  <emphasis>упаковки и распаковки</emphasis>1.</p>
<p>Объекты могут хранить данные в обычных переменных, которые  <emphasis>принадлежат </emphasis> объекту. Переменные, принадлежащие объекту или классу, называют <strong>полями</strong>. Объекты могут</p>
<p>также обладать функционалом, т.е. иметь функции,  <emphasis>принадлежащие </emphasis> классу. Такие функции принято называть <strong>методами </strong>класса. Эта терминология важна, так как она помогает</p>
<p>нам отличать независимые функции и переменные от тех, что принадлежат классу или</p>
<p>объекту. Всё вместе (поля и методы) принято называть <strong>атрибутами </strong>класса.</p>
<p>Поля бывают двух типов: они могут принадлежать каждому отдельному экземпляру объекта класса или всему классу. Они называются <strong>переменными экземпляра </strong>и <strong>переменными класса </strong>соответственно.</p>
<p>1 boxing and unboxing</p>
<p>108</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Класс создаётся ключевым словом class. Поля и методы класса записываются в блоке</p>
<p>кода с отступом.</p>
<p>14.1 self</p>
<p>Методы класса имеют одно отличие от обычных функций: они должны иметь дополнительно имя, добавляемое к началу списка параметров. Однако, при вызове метода никакого значения этому параметру присваивать <strong>не </strong>нужно – его укажет Python. Эта переменная</p>
<p>указывает на <strong>сам </strong>объект экземпляра класса, и по традиции она называется</p>
<p>2</p>
<p>self .</p>
<p>Хотя этому параметру можно дать любое имя,  <emphasis>настоятельно рекомендуется </emphasis> использовать</p>
<p>только имя self; использование любого другого имени не приветствуется. Есть много достоинств использования стандартного имени: во-первых, любой человек, просматриваю-щий вашу программу, легко узнает его; во-вторых, некоторые специализированные Ин-тегрированные среды разработки (IDE) изначально рассчитаны на использование self.</p>
<p><strong>Замечание для программистов на C++, Java и C#</strong></p>
<p>self в Python эквивалентно указателю this в C++ и ссылке this в Java и C#.</p>
<p>Вы, должно быть, удивляетесь, как Python присваивает значение self и почему вам не</p>
<p>нужно указывать это значение самостоятельно. Поясним это на примере. Предположим, у нас есть класс с именем MyClass и экземпляр этого класса с именем myobject. При</p>
<p>вызове метода этого объекта, например, «myobject.method(arg1, arg2)», Python автоматически превращает это в «MyClass.method(myobject, arg1, arg2)» – в этом и</p>
<p>состоит смысл self.</p>
<p>Это также означает, что если какой-либо метод не принимает аргументов, у него всё равно</p>
<p>будет один аргумент – self.</p>
<p>14.2 Классы</p>
<p>Простейший класс показан в следующем примере (сохраните как simplestclass.py).</p>
<p><strong>class Person</strong>:</p>
<p><strong>pass </strong> <emphasis># Пустой блок</emphasis></p>
<p>p = Person()</p>
<p>print(p)</p>
<p><strong>Вывод:</strong></p>
<p>2 self –  <emphasis>англ. </emphasis>«сам» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>14.1. self</strong></p>
<p>109</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>$ python3 simplestclass.py</p>
<p>&lt;__main__.Person object at 0x019F85F0&gt;</p>
<p><strong>Как это работает:</strong></p>
<p>Мы создаём новый класс при помощи оператора class и имени класса. За</p>
<p>этим следует блок выражений, формирующих тело класса. В данном случае</p>
<p>блок у нас пуст, на что указывает оператор pass.</p>
<p>Далее мы создаём объект-экземпляр класса, записывая имя класса со скобка-ми. (Мы узнаем больше о  <emphasis>реализации </emphasis>в следующем разделе). Для проверки мы</p>
<p>выясняем тип переменной, просто выводя её на экран. Так мы видим, что у</p>
<p>нас есть экземпляр класса Person в модуле __main__.</p>
<p>Обратите внимание, что выводится также и адрес в памяти компьютера, где</p>
<p>хранится ваш объект. На вашем компьютере адрес будет другим, так как</p>
<p>Python хранит объекты там, где имеется свободное место.</p>
<p>14.3 Методы объектов</p>
<p>Итак, мы выяснили что классы/объекты могут иметь методы, представляющие собой</p>
<p>функции, за исключением дополнительной переменной self. А теперь давайте рассмотрим пример (сохраните как method.py).</p>
<p><strong>class Person</strong>:</p>
<p><strong>def </strong>sayHi(self):</p>
<p>print('Привет! Как дела?')</p>
<p>p = Person()</p>
<p>p.sayHi()</p>
<p> <emphasis># Этот короткий пример можно также записать как Person().sayHi()</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python3 method.py</p>
<p>Привет! Как дела?</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы видим self в действии. Обратите внимание, что метод sayHi не</p>
<p>принимает параметров, но тем не менее, имеет self в определении функции.</p>
<p><strong>14.3. Методы объектов</strong></p>
<p>110</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>14.4 Метод <strong>__init__</strong></p>
<p>Существует много методов, играющих специальную роль в классах Python. Сейчас мы</p>
<p>увидим значительность метода __init__.</p>
<p>Метод __init__ запускается, как только объект класса реализуется. Этот метод полезен</p>
<p>для осуществления разного рода  <emphasis>инициализации</emphasis>, необходимой для данного объекта. Обратите внимание на двойные подчёркивания в начале и в конце имени.</p>
<p><strong>Пример: </strong>(сохраните как oop_init.py)</p>
<p><strong>class Person</strong>:</p>
<p><strong>def </strong>__init__(self, name):</p>
<p>self.name = name</p>
<p><strong>def </strong>say_hi(self):</p>
<p>print('Привет! Меня зовут', self.name)</p>
<p>p = Person('Swaroop')</p>
<p>p.say_hi()</p>
<p> <emphasis># Предыдущие 2 строки можно</emphasis></p>
<p> <emphasis># Person('Swaroop').say_hi()</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python oop_init.py</p>
<p>Привет! Меня зовут Swaroop</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы определяем метод __init__ так, чтобы он принимал параметр name</p>
<p>(наряду с обычным self). Далее мы создаём новое поле с именем name. Об-</p>
<p>ратите внимание, что это две разные переменные, даже несмотря на то, что</p>
<p>они обе названы name. Это не проблема, так как точка в выражении self.</p>
<p>name обозначает, что существует нечто с именем «name», являющееся частью</p>
<p>объекта «self», и другое name – локальная переменная. Поскольку мы в явном</p>
<p>виде указываем, к которому имени мы обращаемся, путаницы не возникнет.</p>
<p>Для создания нового экземпляра p класса Person мы указываем имя класса,</p>
<p>после которого – аргументы в скобках: p = Person('Swaroop').</p>
<p>Метод __init__ мы при этом не вызываем явным образом. В этом и заклю-</p>
<p>чается специальная роль данного метода.</p>
<p>После этого мы получаем возможность использовать поле self.name в наших</p>
<p>методах, что и продемонстрировано в методе say_hi.</p>
<p><strong>14.4. Метод __init__</strong></p>
<p>111</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>14.5 Переменные класса и объекта</p>
<p>Функциональную часть классов и объектов (т.е. методы) мы обсудили, теперь давайте</p>
<p>ознакомимся с частью данных. Данные, т.е. поля, являются не чем иным, как обычны-ми переменными,  <emphasis>заключёнными </emphasis> в <strong>пространствах имён </strong>классов и объектов. Это означает, что их имена действительны только в контексте этих классов или объектов. Отсюда и</p>
<p>название « <emphasis>пространство имён</emphasis>».</p>
<p>Существует два типа  <emphasis>полей</emphasis>: переменные класса и переменные объекта, которые разли-чаются в зависимости от того,  <emphasis>принадлежит </emphasis> ли переменная классу или объекту соответственно.</p>
<p> <emphasis>Переменные класса </emphasis> разделяемы – доступ к ним могут получать все экземпляры этого класса. Переменная класса существует только одна, поэтому когда любой из объектов изменяет переменную класса, это изменение отразится и во всех остальных экземплярах того</p>
<p>же класса.</p>
<p> <emphasis>Переменные объекта </emphasis> принадлежат каждому отдельному экземпляру класса. В этом случае</p>
<p>у каждого объекта есть своя собственная копия поля, т.е. не разделяемая и никоим образом</p>
<p>не связанная с другими такими же полями в других экземплярах. Это легко понять на</p>
<p>примере (сохраните как objvar.py):</p>
<p><strong>class Robot</strong>:</p>
<p> <emphasis>'''Представляет робота с именем.''' </emphasis></p>
<p> <emphasis># Переменная класса, содержащая количество роботов</emphasis></p>
<p>population = 0</p>
<p><strong>def </strong>__init__(self, name):</p>
<p> <emphasis>'''Инициализация данных.''' </emphasis></p>
<p>self.name = name</p>
<p>print('(Инициализация  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p> <emphasis># При создании этой личности, робот добавляется</emphasis></p>
<p> <emphasis># к переменной 'population' </emphasis></p>
<p>Robot.population += 1</p>
<p><strong>def </strong>__del__(self):</p>
<p> <emphasis>'''Я умираю.''' </emphasis></p>
<p>print('  <emphasis>{0} </emphasis> уничтожается!'.format(self.name))</p>
<p>Robot.population -= 1</p>
<p><strong>if </strong>Robot.population == 0:</p>
<p>print('  <emphasis>{0} </emphasis> был последним.'.format(self.name))</p>
<p><strong>else</strong>:</p>
<p>print('Осталось  <emphasis>{0:d} </emphasis> работающих роботов.'.format( <strong>\</strong></p>
<p>(продолжение на следующей странице)</p>
<p><strong>14.5. Переменные класса и объекта</strong></p>
<p>112</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>Robot.population))</p>
<p><strong>def </strong>sayHi(self):</p>
<p> <emphasis>'''Приветствие робота. </emphasis></p>
<p> <emphasis>Да, они это могут.''' </emphasis></p>
<p>print('Приветствую! Мои хозяева называют меня  <emphasis>{0}</emphasis>.'.format(self.name)) <strong>def </strong>howMany():</p>
<p> <emphasis>'''Выводит численность роботов.''' </emphasis></p>
<p>print('У нас  <emphasis>{0:d} </emphasis> роботов.'.format(Robot.population))</p>
<p>howMany = staticmethod(howMany)</p>
<p>droid1 = Robot('R2-D2')</p>
<p>droid1.sayHi()</p>
<p>Robot.howMany()</p>
<p>droid2 = Robot('C-3PO')</p>
<p>droid2.sayHi()</p>
<p>Robot.howMany()</p>
<p>print(" <strong>\n</strong>Здесь роботы могут проделать какую-то работу. <strong>\n</strong>") print("Роботы закончили свою работу. Давайте уничтожим их.")</p>
<p><strong>del </strong>droid1</p>
<p><strong>del </strong>droid2</p>
<p>Robot.howMany()</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 objvar.py</p>
<p>(Инициализация R2-D2)</p>
<p>Приветствую! Мои хозяева называют меня R2-D2.</p>
<p>У нас 1 роботов.</p>
<p>(Инициализация C-3PO)</p>
<p>Приветствую! Мои хозяева называют меня C-3PO.</p>
<p>У нас 2 роботов.</p>
<p>Здесь роботы могут проделать какую-то работу.</p>
<p>Роботы закончили свою работу. Давайте уничтожим их.</p>
<p>R2-D2 уничтожается!</p>
<p>Осталось 1 работающих роботов.</p>
<p>(продолжение на следующей странице)</p>
<p><strong>14.5. Переменные класса и объекта</strong></p>
<p>113</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>C-3PO уничтожается!</p>
<p>C-3PO был последним.</p>
<p>У нас 0 роботов.</p>
<p><strong>Как это работает:</strong></p>
<p>Это длинный пример, но он помогает продемонстрировать природу перемен-</p>
<p>ных класса и объекта. Здесь population принадлежит классу Robot, и поэто-му является переменной класса. Переменная name принадлежит объекту (ей</p>
<p>присваивается значение при помощи self), и поэтому является переменной</p>
<p>объекта.</p>
<p>Таким образом, мы обращаемся к переменной класса population как Robot.</p>
<p>population, а не self.population. К переменной же объекта name во всех</p>
<p>методах этого объекта мы обращаемся при помощи обозначения self.name.</p>
<p>Помните об этой простой разнице между переменными класса и объекта. Так-</p>
<p>же имейте в виду, что переменная объекта с тем же именем, что и переменная</p>
<p>класса, сделает недоступной («спрячет») переменную класса!</p>
<p>Метод howMany принадлежит классу, а не объекту. Это означает, что мы мо-</p>
<p>жем определить его как classmethod или staticmethod, в зависимости от</p>
<p>того, нужно ли нам знать, в каком классе мы находимся. Поскольку нам не</p>
<p>нужна такая информация, мы воспользуемся staticmethod.</p>
<p>Мы могли достичь того же самого, используя <a l:href="http://www.ibm.com/developerworks/linux/library/l-cpdecor.html">декораторы </a>:</p>
<p><strong>@staticmethod</strong></p>
<p><strong>def </strong>howMany():</p>
<p> <emphasis>'''Выводит численность роботов.''' </emphasis></p>
<p>print('У нас  <emphasis>{0:d} </emphasis> роботов.'.format(Robot.population))</p>
<p>Декораторы можно считать неким упрощённым способом вызова явного оператора, как</p>
<p>мы видели в этом примере.</p>
<p>Пронаблюдайте, как метод __init__ используется для инициализации экземпляра</p>
<p>Robot с именем. В этом методе мы увеличиваем счётчик population на 1, так как добавляем ещё одного робота. Также заметьте, что значения self.name для каждого объекта</p>
<p>свои, что указывает на природу переменных объекта.</p>
<p>Помните, что к переменным и методам самого объекта нужно обращаться, пользуясь</p>
<p><strong>только </strong>self. Это называется  <emphasis>доступом к атрибутам</emphasis>.</p>
<p>В этом примере мы также наблюдали применение <strong>строк документации </strong>для классов, равно как и для методов. Во время выполнения мы можем обращаться к строке документации</p>
<p>класса при помощи «Robot.__doc__», а к строке документации метода – при помощи</p>
<p>«Robot.sayHi.__doc__».</p>
<p>Наряду с методом __init__, существует и другой специальный метод __del__, который</p>
<p><strong>14.5. Переменные класса и объекта</strong></p>
<p>114</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>вызывается тогда, когда объект собирается умереть, т.е. когда он больше не используется, и занимаемая им память возвращается операционной системе для другого использования. В этом методе мы просто уменьшаем счётчик Robot.population на 1.</p>
<p>Метод __del__ запускается лишь тогда, когда объект перестаёт использоваться, а поэтому заранее неизвестно,  <emphasis>когда </emphasis> именно этот момент наступит. Чтобы увидеть его в действии</p>
<p>явно, придётся воспользоваться оператором del, что мы и сделали выше.</p>
<p><strong>Примечание для программистов на C++/Java/C#</strong></p>
<p>В Python все члены класса (включая данные) являются  <emphasis>публичными </emphasis>(public), а все методы</p>
<p>–  <emphasis>виртуальными </emphasis>(virtual).</p>
<p>Исключение: Если имя переменной начинается с  <emphasis>двойного подчёркивания</emphasis>, как, например, __privatevar, Python делает эту переменную приватной (private). Поэтому принято имя</p>
<p>любой переменной, которая должна использоваться только внутри класса или объекта, начинать с подчёркивания; все же остальные имена являются публичными, и могут использоваться в других классах/объектах. Помните, что это лишь традиция, и Python вовсе</p>
<p>не обязывает делать именно так (кроме двойного подчёркивания).</p>
<p>14.6 Наследование</p>
<p>Одно из главных достоинств объектно-ориентированного программирования заключается в <strong>многократном использовании </strong>одного и того же кода, и один из способов этого</p>
<p>достичь – при помощи механизма  <emphasis>наследования</emphasis>. Легче всего представить себе наследование в виде отношения между классами как  <emphasis>тип и подтип</emphasis>.</p>
<p>Представим, что нам нужно написать программу, которая отслеживает информацию о</p>
<p>преподавателях и студентах в колледже. У них есть некоторые общие характеристики: имя, возраст и адрес. Есть также и специфические характеристики, такие как зарплата, курсы и отпуск для преподавателей, а также оценки и оплата за обучение для студентов.</p>
<p>Можно создать для них независимые классы и работать с ними, но тогда добавление</p>
<p>какой-либо новой общей характеристики потребует добавления её к каждому из этих</p>
<p>независимых классов в отдельности, что делает программу неповоротливой.</p>
<p>Лучше создать общий класс с именем SchoolMember, а затем сделать так, чтобы классы</p>
<p>преподавателя и студента  <emphasis>наследовали </emphasis> этот класс, т.е. чтобы они стали подтипами этого</p>
<p>типа (класса), после чего добавить любые специфические характеристики к этим подтипам.</p>
<p>У такого подхода есть множество достоинств. Если мы добавим/изменим какую-либо</p>
<p>функциональность в SchoolMember, это автоматически отобразится и во всех подтипах.</p>
<p>Например, мы можем добавить новое поле удостоверения для преподавателей и студентов, просто добавив его к классу SchoolMember. С другой стороны, изменения в подтипах</p>
<p><strong>14.6. Наследование</strong></p>
<p>115</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>никак не влияют на другие подтипы. Ещё одно достоинство состоит в том, что обращаться к объекту преподавателя или студента можно как к объекту SchoolMember, что может</p>
<p>быть полезно в ряде случаев, например, для подсчёта количества человек в школе. Когда подтип может быть подставлен в любом месте, где ожидается родительский тип, т.е.</p>
<p>объект считается экземпляром родительского класса, это называется <strong>полиморфизмом</strong>.</p>
<p>Заметьте также, что код родительского класса  <emphasis>используется многократно</emphasis>, и нет необходимости копировать его во все классы, как пришлось бы в случае использования независимых классов.</p>
<p>Класс SchoolMember в этой ситуации называют  <emphasis>базовым классом </emphasis> или  <emphasis>надклассом</emphasis> 3. Классы</p>
<p>Teacher и Student называют  <emphasis>производными классами </emphasis> или  <emphasis>подклассами</emphasis>4.</p>
<p>Рассмотрим теперь этот пример в виде программы (сохраните как inherit.py).</p>
<p><strong>class SchoolMember</strong>:</p>
<p> <emphasis>'''Представляет любого человека в школе.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age):</p>
<p>self.name = name</p>
<p>self.age = age</p>
<p>print('(Создан SchoolMember:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p><strong>def </strong>tell(self):</p>
<p> <emphasis>'''Вывести информацию.''' </emphasis></p>
<p>print('Имя:"  <emphasis>{0}</emphasis>" Возраст:"  <emphasis>{1}</emphasis>"'.format(self.name, self.age), end=" ") <strong>class Teacher</strong>(SchoolMember):</p>
<p> <emphasis>'''Представляет преподавателя.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age, salary):</p>
<p>SchoolMember.__init__(self, name, age)</p>
<p>self.salary = salary</p>
<p>print('(Создан Teacher:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p><strong>def </strong>tell(self):</p>
<p>SchoolMember.tell(self)</p>
<p>print('Зарплата: "  <emphasis>{0:d}</emphasis>"'.format(self.salary))</p>
<p><strong>class Student</strong>(SchoolMember):</p>
<p> <emphasis>'''Представляет студента.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age, marks):</p>
<p>SchoolMember.__init__(self, name, age)</p>
<p>self.marks = marks</p>
<p>print('(Создан Student:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p><strong>def </strong>tell(self):</p>
<p>SchoolMember.tell(self)</p>
<p>(продолжение на следующей странице)</p>
<p>3 также «суперкласс», «родительский класс» ( <emphasis>прим.перев. </emphasis>)</p>
<p>4 также «субкласс», «класс-наследник» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>14.6. Наследование</strong></p>
<p>116</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>print('Оценки: "  <emphasis>{0:d}</emphasis>"'.format(self.marks))</p>
<p>t = Teacher('Mrs. Shrividya', 40, 30000)</p>
<p>s = Student('Swaroop', 25, 75)</p>
<p>print()  <emphasis># печатает пустую строку</emphasis></p>
<p>members = [t, s]</p>
<p><strong>for </strong>member <strong>in </strong>members:</p>
<p>member.tell()  <emphasis># работает как для преподавателя, так и для студента</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python3 inherit.py</p>
<p>(Создан SchoolMember: Mrs. Shrividya)</p>
<p>(Создан Teacher: Mrs. Shrividya)</p>
<p>(Создан SchoolMember: Swaroop)</p>
<p>(Создан Student: Swaroop)</p>
<p>Имя:"Mrs. Shrividya" Возраст:"40" Зарплата: "30000"</p>
<p>Имя:"Swaroop" Возраст:"25" Оценки: "75"</p>
<p><strong>Как это работает:</strong></p>
<p>Чтобы воспользоваться наследованием, при определении класса мы указыва-</p>
<p>ем имена его базовых классов в виде кортежа, следующего сразу за его именем. Далее мы видим, что метод __init__ базового класса вызывается явно</p>
<p>при помощи переменной self, чтобы инициализировать часть объекта, отно-</p>
<p>сящуюся к базовому классу. Это очень важно запомнить: поскольку мы опре-</p>
<p>деляем метод __init__ в подклассах Teacher и Student, Python не вызывает</p>
<p>конструктор базового класса SchoolMember автоматически – его необходимо</p>
<p>вызывать самостоятельно в явном виде.</p>
<p>Напротив, если мы  <emphasis>не </emphasis> определим метод __init__ в подклассе, Python вызовет</p>
<p>конструктор базового класса автоматически.</p>
<p>Здесь же мы видим, как можно вызывать методы базового класса, предваряя</p>
<p>запись имени метода именем класса, а затем передавая переменную self вместе с другими аргументами.</p>
<p>Обратите внимание, что при вызове метода tell из класса SchoolMember</p>
<p>экземпляры Teacher или Student можно использовать как экземпляры</p>
<p>SchoolMember.</p>
<p>Заметьте также, что вызывается метод tell из подкласса, а не метод tell из</p>
<p>класса SchoolMember. Это можно понять следующим образом: Python  <emphasis>всегда</emphasis></p>
<p>начинает поиск методов в самом классе, что он и делает в данном случае. Если</p>
<p><strong>14.6. Наследование</strong></p>
<p>117</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>же он не находит метода, он начинает искать методы, принадлежащие базо-</p>
<p>вым классам по очереди, в порядке, в котором они перечислены в кортеже при</p>
<p>определении класса.</p>
<p>Замечание по терминологии: если при наследовании перечислено более од-</p>
<p>ного класса, это называется  <emphasis>множественным наследованием</emphasis>.</p>
<p>Параметр end используется в методе tell() для того, чтобы новая строка на-чиналась через пробел после вызова print().</p>
<p>14.7 Метаклассы5</p>
<p>В обширной теме объектно-ориентированного программирования существует ещё много</p>
<p>всего, но мы лишь слегка коснёмся некоторых концепций, чтобы вы просто знали об их</p>
<p>существовании.</p>
<p>Точно так же, как классы используются для создания объектов, можно использовать метаклассы для создания классов. Метаклассы существуют для изменения или добавления</p>
<p>нового поведения в классы.</p>
<p>Давайте рассмотрим пример. Допустим, мы хотим быть уверены, что мы всегда создаём</p>
<p>исключительно экземпляры подклассов класса SchoolMember, и не создаём экземпляры</p>
<p>самого класса SchoolMember.</p>
<p>Для достижения этой цели мы можем использовать концепцию под названием «абстракт-ные базовые классы». Это означает, что такой класс  <emphasis>абстрактен</emphasis>, т.е. является лишь некой</p>
<p>концепцией, не предназначенной для использования в качестве реального класса.</p>
<p>Мы можем объявить наш класс как абстрактный базовый класс при помощи встроенного</p>
<p>метакласса по имени ABCMeta.</p>
<p> <emphasis>#!/usr/bin/env python</emphasis></p>
<p> <emphasis># Filename: inherit_abc.py</emphasis></p>
<p><strong>from abc import </strong>*</p>
<p><strong>class SchoolMember</strong>(metaclass=ABCMeta):</p>
<p> <emphasis>'''Представляет любого человека в школе.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age):</p>
<p>self.name = name</p>
<p>self.age = age</p>
<p>print('(Создан SchoolMember:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p>(продолжение на следующей странице)</p>
<p>5 в оригинальной версии книги этот параграф невидим для читателей, так как находится в комментарии</p>
<p>с пометкой автора «It is too sudden to introduce this concept here.», что означает «Слишком неожиданно</p>
<p>представление этой концепции здесь.» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>14.7. Метаклассы</strong>5</p>
<p>118</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p><strong>@abstractmethod</strong></p>
<p><strong>def </strong>tell(self):</p>
<p> <emphasis>'''Вывести информацию.''' </emphasis></p>
<p>print('Имя:"  <emphasis>{0}</emphasis>" Возраст:"  <emphasis>{1}</emphasis>"'.format(self.name, self.age), end=" ") <strong>class Teacher</strong>(SchoolMember):</p>
<p> <emphasis>'''Представляет преподавателя.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age, salary):</p>
<p>SchoolMember.__init__(self, name, age)</p>
<p>self.salary = salary</p>
<p>print('(Создан Teacher:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p><strong>def </strong>tell(self):</p>
<p>SchoolMember.tell(self)</p>
<p>print('Зарплата: "  <emphasis>{0:d}</emphasis>"'.format(self.salary))</p>
<p><strong>class Student</strong>(SchoolMember):</p>
<p> <emphasis>'''Представляет студента.''' </emphasis></p>
<p><strong>def </strong>__init__(self, name, age, marks):</p>
<p>SchoolMember.__init__(self, name, age)</p>
<p>self.marks = marks</p>
<p>print('(Создан Student:  <emphasis>{0}</emphasis>)'.format(self.name))</p>
<p><strong>def </strong>tell(self):</p>
<p>SchoolMember.tell(self)</p>
<p>print('Оценки: "  <emphasis>{0:d}</emphasis>"'.format(self.marks))</p>
<p>t = Teacher('Mrs. Shrividya', 40, 30000)</p>
<p>s = Student('Swaroop', 25, 75)</p>
<p> <emphasis>#m = SchoolMember('abc', 10)</emphasis></p>
<p> <emphasis># Это приведёт к ошибке: "TypeError: Can't instantiate abstract class</emphasis></p>
<p> <emphasis># SchoolMember with abstract methods tell" </emphasis></p>
<p>print()  <emphasis># печатает пустую строку</emphasis></p>
<p>members = [t, s]</p>
<p><strong>for </strong>member <strong>in </strong>members:</p>
<p>member.tell()  <emphasis># работает как для преподавателя, так и для студента</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python3 inherit.py</p>
<p>(Создан SchoolMember: Mrs. Shrividya)</p>
<p>(Создан Teacher: Mrs. Shrividya)</p>
<p>(продолжение на следующей странице)</p>
<p><strong>14.7. Метаклассы</strong>5</p>
<p>119</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>(Создан SchoolMember: Swaroop)</p>
<p>(Создан Student: Swaroop)</p>
<p>Имя:"Mrs. Shrividya" Возраст:"40" Зарплата: "30000"</p>
<p>Имя:"Swaroop" Возраст:"25" Оценки: "75"</p>
<p><strong>Как это работает:</strong></p>
<p>Мы можем объявить метод tell класса SchoolMember абстрактным, и таким образом</p>
<p>автоматически запретим создавать экземпляры класса SchoolMember.</p>
<p>Тем не менее, мы можем работать с экземплярами Teacher и Student так, как будто они</p>
<p>экземпляры SchoolMember, поскольку они являются подклассами.</p>
<p>14.8 Резюме</p>
<p>Мы изучили различные аспекты классов и объектов, равно как и терминологию, связанную с ними. Мы также увидели ряд достоинств и «подводных камней»</p>
<p>объектно-ориентированного программирования. Python – в высокой степени объектно-ориентирован, поэтому понимание этих принципов очень поможет вам в дальнейшем.</p>
<p>Далее мы узнаем, как работать с вводом/выводом и получать доступ к файлам в Python.</p>
<p><strong>14.8. Резюме</strong></p>
<p>120</p>
<p><strong>Ввод-вывод</strong></p>
<p>Рано или поздно возникают ситуации, когда программа должна взаимодействовать с</p>
<p>пользователем. Например, принять какие-нибудь данные от пользователя, а затем вывести результаты. Для этого применяются функции input() и print() соответственно.</p>
<p>Для вывода можно также использовать различные методы класса str (строка). К примеру, при помощи метода rjust можно получить строку, выравненную по правому краю к</p>
<p>указанной ширине. См. help(str) для более подробного описания.</p>
<p>Ещё одним распространённым типом ввода/вывода является работа с файлами. Возможность создавать, читать и записывать в файлы является ключевой для многих программ, поэтому в настоящей главе и мы рассмотрим этот аспект.</p>
<p>15.1 Ввод от пользователя</p>
<p>Сохраните эту программу как user_input.py:</p>
<p><strong>def </strong>reverse(text):</p>
<p><strong>return </strong>text[::-1]</p>
<p><strong>def </strong>is_palindrome(text):</p>
<p><strong>return </strong>text == reverse(text)</p>
<p>something = input('Введите текст: ')</p>
<p><strong>if </strong>(is_palindrome(something)):</p>
<p>print("Да, это палиндром")</p>
<p><strong>else</strong>:</p>
<p>print("Нет, это не палиндром")</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 user_input.py</p>
<p>Введите текст: сэр</p>
<p>Нет, это не палиндром</p>
<p>(продолжение на следующей странице)</p>
<p>121</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>$ python3 user_input.py</p>
<p>Введите текст: мадам</p>
<p>Да, это палиндром</p>
<p>$ python3 user_input.py</p>
<p>Введите текст: топот</p>
<p>Да, это палиндром</p>
<p><strong>Как это работает:</strong></p>
<p>Мы применяем операцию вырезки для переворачивания текста. Мы уже</p>
<p>видели, как создаются  <emphasis>вырезки из последовательностей </emphasis>при помощи кода</p>
<p>«seq[a:b]», начиная с позиции a до позиции b. Но ведь мы также можем указать и третий аргумент, определяющий  <emphasis>шаг</emphasis>, с которым производится вырезка.</p>
<p>По умолчанию шаг равен 1, поэтому и возвращается непрерывный фрагмент</p>
<p>текста. Указание отрицательного шага, т.е. -1 приведёт к выводу текста в обратном порядке.</p>
<p>Функция input() принимает строку в качестве аргумента и показывает её</p>
<p>пользователю. Затем она ждёт, чтобы пользователь набрал что-нибудь и на-</p>
<p>жал клавишу ввода. Как только пользователь это сделал, функция input()</p>
<p>возвращает введённый пользователем текст.</p>
<p>Мы считываем этот текст и выстраиваем его в обратном порядке. Если пе-</p>
<p>ревёрнутый и исходный текст одинаковы, значит введённый текст является</p>
<p><a l:href="http://ru.wikipedia.org/wiki/Палиндром">палиндромом</a>.</p>
<p><strong>Домашнее задание</strong></p>
<p>Проверка, является ли текст палиндромом должна также игнорировать знаки пунктуации, пробелы и регистр букв. Например, «А роза упала на лапу Азора» также является</p>
<p>палиндромом, но наша текущая программа так не считает. Попробуйте улучшить её так, чтобы она распознала этот палиндром.</p>
<p><strong>Подсказка: (не читайте)</strong></p>
<p>Воспользуйтесь кортежем (список  <emphasis>всех </emphasis> знаков пунктуации можно найти <a l:href="http://grammar.ccc.commnet.edu/grammar/marks/marks.htm">здесь), </a>содержа-щим все запрещённые символы, и примените тест на принадлежность, чтобы обнару-жить символы, подлежащие удалению, т.е. forbidden = („!“, „?“, „.“, …).</p>
<p><strong>15.1. Ввод от пользователя</strong></p>
<p>122</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>15.2 Файлы</p>
<p>Открывать и использовать файлы для чтения или записи можно путём создания объекта</p>
<p>класса file, а читать/записывать в файл – при помощи его методов read, readline или</p>
<p>write соответственно. Возможность читать или записывать в файл зависит от режима, указанного при открытии файла. По окончании работы с файлом, нужно вызвать метод</p>
<p>1</p>
<p>close , чтобы указать Python, что файл больше не используется.</p>
<p><strong>Пример: </strong>(сохраните как using_file.py)</p>
<p>poem = ''' <strong>\</strong></p>
<p>Программировать весело.</p>
<p>Если работа скучна,</p>
<p>Чтобы придать ей весёлый тон -</p>
<p>используй Python!</p>
<p>'''</p>
<p>f = open('poem.txt', 'w')  <emphasis># открываем для записи (writing)</emphasis></p>
<p>f.write(poem)  <emphasis># записываем текст в файл</emphasis></p>
<p>f.close()  <emphasis># закрываем файл</emphasis></p>
<p>f = open('poem.txt')  <emphasis># если не указан режим, по умолчанию подразумевается</emphasis></p>
<p> <emphasis># режим чтения ('r'eading)</emphasis></p>
<p><strong>while True</strong>:</p>
<p>line = f.readline()</p>
<p><strong>if </strong>len(line) == 0:  <emphasis># Нулевая длина обозначает конец файла (EOF)</emphasis> <strong>break</strong></p>
<p>print(line, end='')</p>
<p>f.close()  <emphasis># закрываем файл</emphasis></p>
<p><strong>Вывод:</strong></p>
<p>$ python3 using_file.py</p>
<p>Программировать весело.</p>
<p>Если работа скучна,</p>
<p>Чтобы придать ей весёлый тон -</p>
<p>используй Python!</p>
<p><strong>Как это работает:</strong></p>
<p>Сперва мы открываем файл при помощи встроенной функции open с указа-</p>
<p>нием имени файла и режима, в котором мы хотим его открыть. Режим может</p>
<p>быть для чтения ('r'), записи ('w') или добавления ('a')2. Можно также указать, в каком виде мы будем считывать, записывать или добавлять данные:</p>
<p>1 close –  <emphasis>англ. </emphasis>«закрывать» ( <emphasis>прим.перев</emphasis>)</p>
<p>2 <strong>r</strong>ead, <strong>w</strong>rite и <strong>a</strong>ppend соответственно ( <emphasis>прим.перев. </emphasis>) <strong>15.2. Файлы</strong></p>
<p>123</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>в текстовом ('t') или бинарном ('b'). На самом деле существует много других режимов, и help(open) даст вам их детальное описание. По умолчанию</p>
<p>open() открывает файл как текст в режиме для чтения.</p>
<p>В нашем примере мы сначала открываем файл в режиме записи текста и ис-</p>
<p>пользуем метод write файлового объекта для записи в файл, после чего за-</p>
<p>крываем файл при помощи close.</p>
<p>Далее мы открываем тот же самый файл для чтения. В этом случае нет нужды</p>
<p>указывать режим, так как режим «чтения текстового файла» применяется по</p>
<p>умолчанию. Мы считываем файл построчно методом readline в цикле. Этот</p>
<p>метод возвращает полную строку, включая символ перевода строки в конце.</p>
<p>Когда же он возвращает пустую строку, это означает, что мы достигли конца</p>
<p>файла, и мы прерываем цикл при помощи break.</p>
<p>По умолчанию функция print() выводит текст, автоматически добавляя сим-</p>
<p>вол перевода строки в конце. Мы подавляем этот символ, указывая end='',</p>
<p>поскольку строки, считанные из файла, и без того оканчиваются символом</p>
<p>перевода строки. И, наконец, мы закрываем файл с помощью close.</p>
<p>Теперь проверяем содержимое файла poem.txt, чтобы убедиться, что про-</p>
<p>грамма действительно записала текст в него и считала из него.</p>
<p>15.3 Pickle</p>
<p>Python предоставляет стандартный модуль с именем</p>
<p>3</p>
<p>pickle , при помощи которого мож-</p>
<p>но сохранять <strong>любой </strong>объект Python в файле, а затем извлекать его обратно. Это называется</p>
<p> <emphasis>длительным </emphasis> хранением объекта.</p>
<p><strong>Пример: </strong>(сохраните как pickling.py):</p>
<p><strong>import pickle</strong></p>
<p> <emphasis># имя файла, в котором мы сохраним объект</emphasis></p>
<p>shoplistfile = 'shoplist.data'</p>
<p> <emphasis># список покупок</emphasis></p>
<p>shoplist = ['яблоки', 'манго', 'морковь']</p>
<p> <emphasis># Запись в файл</emphasis></p>
<p>f = open(shoplistfile, 'wb')</p>
<p>pickle.dump(shoplist, f)  <emphasis># помещаем объект в файл</emphasis></p>
<p>f.close()</p>
<p><strong>del </strong>shoplist  <emphasis># уничтожаем переменную shoplist</emphasis></p>
<p>(продолжение на следующей странице)</p>
<p>3 pickle –  <emphasis>англ. </emphasis>«мариновать», «солить» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>15.3. Pickle</strong></p>
<p>124</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p> <emphasis># Считываем из хранилища</emphasis></p>
<p>f = open(shoplistfile, 'rb')</p>
<p>storedlist = pickle.load(f)  <emphasis># загружаем объект из файла</emphasis></p>
<p>print(storedlist)</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 pickling.py</p>
<p>['яблоки', 'манго', 'морковь']</p>
<p><strong>Как это работает:</strong></p>
<p>Чтобы сохранить объект в файле, нам нужно сперва открыть файл с помощью</p>
<p>open в режиме бинарной записи ('wb'), после чего вызвать функцию dump из</p>
<p>модуля pickle. Этот процесс называется «консервацией» («pickling»).</p>
<p>После этого мы извлекаем объект при помощи функции load из модуля</p>
<p>pickle, которая возвращает объект. Этот процесс называется «расконсерва-</p>
<p>цией» («unpickling»).</p>
<p>15.4 Резюме</p>
<p>Мы обсудили разные типы ввода/вывода, а также работу с файлами и использование модуля pickle.</p>
<p>Далее мы познакомимся с концепцией исключений.</p>
<p><strong>15.4. Резюме</strong></p>
<p>125</p>
<p><strong>Исключения</strong></p>
<p>Исключения возникают тогда, когда в программе возникает некоторая  <emphasis>исключительная</emphasis></p>
<p>ситуация. Например, к чему приведёт попытка чтения несуществующего файла? Или ес-ли файл был случайно удалён, пока программа работала? Такие ситуации обрабатываются при помощи <strong>исключений</strong>.</p>
<p>Это касается и программ, содержащих недействительные команды. В этом случае Python <strong>поднимает </strong>руки и сообщает, что обнаружил <strong>ошибку</strong>.</p>
<p>16.1 Ошибки</p>
<p>Рассмотрим простой вызов функции print. Что, если мы ошибочно напишем print как</p>
<p>Print? Обратите внимание на заглавную букву. В этом случае Python  <emphasis>поднимает </emphasis> синтак-сическую ошибку.</p>
<p><strong>&gt;&gt;&gt; </strong>Print('Привет, Мир!')</p>
<p>Traceback (most recent call last):</p>
<p>File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;</p>
<p>Print('Привет, Мир!')</p>
<p>NameError: name 'Print' is not defined</p>
<p><strong>&gt;&gt;&gt; </strong>print('Привет, Мир!')</p>
<p>Привет, Мир!</p>
<p>Обратите внимание, что была поднята ошибка NameError, а также указано место, где</p>
<p>была обнаружена ошибка. Так в данном случае действует  <emphasis>обработчик ошибок</emphasis>.</p>
<p>16.2 Исключения</p>
<p><strong>Попытаемся </strong>считать что-либо от пользователя. Нажмите Сtrl-D (или Ctrl+Z в Windows) и посмотрите, что произойдёт.</p>
<p><strong>&gt;&gt;&gt; </strong>s = input('Введите что-нибудь --&gt; ')</p>
<p>Введите что-нибудь --&gt;</p>
<p>(продолжение на следующей странице)</p>
<p>126</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>Traceback (most recent call last):</p>
<p>File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;</p>
<p>s = input('Введите что-нибудь --&gt; ')</p>
<p>EOFError: EOF when reading a line</p>
<p>Python поднимает ошибку с именем EOFError, что означает, что он обнаружил символ</p>
<p> <emphasis>конца файла </emphasis>(который вводится при помощи Ctrl-D) там, где не ожидал.</p>
<p>16.3 Обработка исключений</p>
<p>Обрабатывать исключения можно при помощи оператора</p>
<p>1</p>
<p>try..except . При этом все</p>
<p>обычные команды помещаются внутрь try-блока, а все обработчики исключений – в</p>
<p>except-блок.</p>
<p><strong>Пример: </strong>(сохраните как try_except.py)</p>
<p><strong>try</strong>:</p>
<p>text = input('Введите что-нибудь --&gt; ')</p>
<p><strong>except </strong>EOFError:</p>
<p>print('Ну зачем вы сделали мне EOF?')</p>
<p><strong>except </strong>KeyboardInterrupt:</p>
<p>print('Вы отменили операцию.')</p>
<p><strong>else</strong>:</p>
<p>print('Вы ввели  <emphasis>{0}</emphasis>'.format(text))</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 try_except.py</p>
<p>Введите что-нибудь --&gt;</p>
<p># Нажмите ctrl-d</p>
<p>Ну зачем вы сделали мне EOF?</p>
<p>$ python3 try_except.py</p>
<p>Введите что-нибудь --&gt;</p>
<p># Нажмите ctrl-c</p>
<p>Вы отменили операцию.</p>
<p>$ python3 try_except.py</p>
<p>Введите что-нибудь --&gt; без ошибок</p>
<p>Вы ввели без ошибок</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы поместили все команды, которые могут вызвать исключе-</p>
<p>ния/ошибки, внутрь блока try, а затем поместили обработчики соответству-</p>
<p>1 try –  <emphasis>англ. </emphasis>«пытаться» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>16.3. Обработка исключений</strong></p>
<p>127</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>ющих ошибок/исключений в блок except. Выражение except может об-</p>
<p>рабатывать как одиночную ошибку или исключение, так и список оши-</p>
<p>бок/исключений в скобках. Если не указано имя ошибки или исключения, об-</p>
<p>рабатываться будут  <emphasis>все </emphasis> ошибки и исключения.</p>
<p>Помните, что для каждого выражения try должно быть хотя бы одно соответствующее</p>
<p>выражение except. Иначе какой смысл был бы в блоке try?</p>
<p>Если ошибка или исключение не обработано, будет вызван обработчик Python по умолчанию, который останавливает выполнение программы и выводит на экран сообщение</p>
<p>об ошибке. Выше мы уже видели это в действии.</p>
<p>Можно также добавить пункт else к соответствующему блоку try..except. Этот пункт</p>
<p>будет выполнен тогда, когда исключений не возникает.</p>
<p>В следующем примере мы увидим, как можно получить объект исключения для дальней-шей работы с ним.</p>
<p>16.4 Вызов исключения</p>
<p>Исключение можно  <emphasis>поднять </emphasis> при помощи оператора</p>
<p>2</p>
<p>raise , передав ему имя ошиб-</p>
<p>ки/исключения, а также объект исключения, который нужно  <emphasis>выбросить</emphasis>.</p>
<p>Вызываемая ошибка или исключение должна быть классом, который прямо или непрямо</p>
<p>является производным от класса Exception.</p>
<p><strong>Пример: </strong>(сохраните как raising.py)</p>
<p><strong>class ShortInputException</strong>(Exception):</p>
<p> <emphasis>'''Пользовательский класс исключения.''' </emphasis></p>
<p><strong>def </strong>__init__(self, length, atleast):</p>
<p>Exception.__init__(self)</p>
<p>self.length = length</p>
<p>self.atleast = atleast</p>
<p><strong>try</strong>:</p>
<p>text = input('Введите что-нибудь --&gt; ')</p>
<p><strong>if </strong>len(text) &lt; 3:</p>
<p><strong>raise </strong>ShortInputException(len(text), 3)</p>
<p> <emphasis># Здесь может происходить обычная работа</emphasis></p>
<p><strong>except </strong>EOFError:</p>
<p>print('Ну зачем вы сделали мне EOF?')</p>
<p><strong>except </strong>ShortInputException <strong>as </strong>ex:</p>
<p>print('ShortInputException: Длина введённой строки --  <emphasis>{0}</emphasis>; <strong>\</strong></p>
<p>ожидалось, как минимум,  <emphasis>{1}</emphasis>'.format(ex.length, ex.atleast))</p>
<p>(продолжение на следующей странице)</p>
<p>2 raise –  <emphasis>англ. </emphasis>«поднимать» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>16.4. Вызов исключения</strong></p>
<p>128</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p><strong>else</strong>:</p>
<p>print('Не было исключений.')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 raising.py</p>
<p>Введите что-нибудь --&gt; а</p>
<p>ShortInputException: Длина введённой строки -- 1; ожидалось, как минимум, 3</p>
<p>$ python3 raising.py</p>
<p>Введите что-нибудь --&gt; абв</p>
<p>Не было исключений.</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы создаём наш собственный тип исключения. Этот новый тип исклю-</p>
<p>чения называется ShortInputException. Он содержит два поля: length, хра-</p>
<p>нящее длину введённого текста, и atleast, указывающее, какую минималь-</p>
<p>ную длину текста ожидала программа.</p>
<p>В пункте except мы указываем класс ошибки ShortInputException, кото-</p>
<p>рый будет сохранён как3 переменная ex, содержащая соответствующий объект ошибки/исключения. Это аналогично параметрам и аргументам при вы-</p>
<p>зове функции. Внутри этого пункта except мы используем поля length и</p>
<p>atleast объекта исключения для вывода необходимых сообщений пользова-</p>
<p>телю.</p>
<p>16.5 Try .. Finally</p>
<p>Представим, что в программе происходит чтение файла и необходимо убедиться, что объект файла был корректно закрыт и что не возникло никакого исключения. Этого можно</p>
<p>достичь с применением блока finally.</p>
<p>Сохраните как finally.py:</p>
<p><strong>import time</strong></p>
<p><strong>try</strong>:</p>
<p>f = open('poem.txt')</p>
<p><strong>while True</strong>:  <emphasis># наш обычный способ читать файлы</emphasis></p>
<p>line = f.readline()</p>
<p><strong>if </strong>len(line) == 0:</p>
<p>(продолжение на следующей странице)</p>
<p>3 as –  <emphasis>англ. </emphasis>«как» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>16.5. Try .. Finally</strong></p>
<p>129</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p><strong>break</strong></p>
<p>print(line, end='')</p>
<p>time.sleep(2)  <emphasis># Пусть подождёт некоторое время</emphasis></p>
<p><strong>except </strong>KeyboardInterrupt:</p>
<p>print('!! Вы отменили чтение файла.')</p>
<p><strong>finally</strong>:</p>
<p>f.close()</p>
<p>print('(Очистка: Закрытие файла)')</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 finally.py</p>
<p>Программировать весело</p>
<p>Если работа скучна,</p>
<p>Чтобы придать ей весёлый тон -</p>
<p>!! Вы отменили чтение файла.</p>
<p>(Очистка: Закрытие файла)</p>
<p><strong>Как это работает:</strong></p>
<p>Здесь мы производим обычные операции чтения из файла, но в данном слу-</p>
<p>чае добавляем двухсекундный сон после вывода каждой строки при помощи</p>
<p>функции time.sleep, чтобы программа выполнялась медленно (ведь Python</p>
<p>очень быстр от природы). Во время выполнения программы нажмите ctrl-c,</p>
<p>чтобы прервать/отменить выполнение программы.</p>
<p>Пронаблюдайте, как при этом выдаётся исключение KeyboardInterrupt, и</p>
<p>программа выходит. Однако, прежде чем программа выйдет, выполняется</p>
<p>пункт finally, и файловый объект будет всегда закрыт.</p>
<p>16.6 Оператор with</p>
<p>Типичной схемой является запрос некоторого ресурса в блоке try с последующим осво-бождением этого ресурса в блоке finally. Для того, чтобы сделать это более «чисто», существует оператор</p>
<p>4</p>
<p>with :</p>
<p>Сохраните как using_with.py:</p>
<p><strong>with </strong>open("poem.txt") <strong>as </strong>f:</p>
<p><strong>for </strong>line <strong>in </strong>f:</p>
<p>print(line, end='')</p>
<p>4 with –  <emphasis>англ. </emphasis>«с» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>16.6. Оператор with</strong></p>
<p>130</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Как это работает:</strong></p>
<p>Вывод должен быть таким же, как и в предыдущем примере. Разница лишь в</p>
<p>том, что здесь мы используем функцию open с оператором with – этим мы</p>
<p>оставляем автоматическое закрытие файла под ответственность with open.</p>
<p>За кулисами происходит следующее. Существует некий протокол, используе-</p>
<p>мый оператором with. Он считывает объект, возвращаемый оператором open.</p>
<p>Назовём его в данном случае «thefile».</p>
<p>Перед запуском блока кода, содержащегося в нём, оператор with  <emphasis>всегда </emphasis> вызывает функцию thefile.__enter__, а также  <emphasis>всегда </emphasis> вызывает thefile.</p>
<p>__exit__ после завершения выполнения этого блока кода.</p>
<p>Так что код, который мы бы написали в блоке finally, будет автоматически</p>
<p>обработан методом __exit__. Это избавляет нас от необходимости повторно</p>
<p>в явном виде указывать операторы try..finally.</p>
<p>Более обширное рассмотрение этой темы выходит за рамки настоящей книги,</p>
<p>поэтому для более исчерпывающего объяснения см. <a l:href="https://www.python.org/dev/peps/pep-0343"><strong>PEP 343</strong></a>.</p>
<p>16.7 Резюме</p>
<p>Мы обсудили использование операторов try..except и try..finally. Мы также увидели, как создавать наши собственные типы исключений и как их вызывать.</p>
<p>Далее мы ознакомимся со стандартной библиотекой Python.</p>
<p><strong>16.7. Резюме</strong></p>
<p>131</p>
<p><strong>Стандартная библиотека</strong></p>
<p>Стандартная библиотека Python содержит огромное количество полезных модулей и является частью стандартного комплекта поставки Python. Ознакомиться со стандартной</p>
<p>библиотекой Python очень важно, так как множество задач можно решить очень быстро, если вы знакомы с возможностями этих библиотек.</p>
<p>Рассмотрим некоторые наиболее часто используемые модули этой библиотеки. Детальное описание всех модулей стандартной библиотеки Python можно найти в <a l:href="http://docs.python.org/py3k/library/index.html">разделе</a></p>
<p><a l:href="http://docs.python.org/py3k/library/index.html">«Library Reference» </a>документации, входящей в комплект поставки Python.</p>
<p>Давайте изучим несколько полезных модулей.</p>
<p><strong>Примечание</strong></p>
<p>Если темы в настоящей главе покажутся вам слишком сложными, вы можете её пропустить. Однако я настоятельно рекомендую вернуться к этой главе, когда вы будете чув-ствовать себя более уверенно с Python.</p>
<p>17.1 Модуль sys</p>
<p>Модуль sys содержит функциональность, характерную для системы. Так мы видели, что</p>
<p>список sys.argv содержит аргументы командной строки.</p>
<p>Предположим, нам нужно узнать версию используемой команды Python с тем, чтобы, к</p>
<p>примеру, убедиться в том, что мы используем как минимум версию 3. Модуль sys предоставляет такую возможность.</p>
<p><strong>&gt;&gt;&gt; import sys</strong></p>
<p><strong>&gt;&gt;&gt; </strong>sys.version_info</p>
<p>(3, 0, 0, 'beta', 2)</p>
<p><strong>&gt;&gt;&gt; </strong>sys.version_info[0] &gt;= 3</p>
<p>True</p>
<p>132</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Как это работает:</strong></p>
<p>Модуль sys содержит кортеж version_info, который хранит информацию о</p>
<p>версии. Первый элемент этого кортежа обозначает старшую версию. Мы мо-</p>
<p>жем использовать его, например, для того, чтобы убедиться, что программа</p>
<p>будет выполняться только в Python 3.0:</p>
<p>Сохраните как versioncheck.py:</p>
<p><strong>import sys</strong>, <strong>warnings</strong></p>
<p><strong>if </strong>sys.version_info[0] &lt; 3:</p>
<p>warnings.warn("Для выполнения этой программы необходима как минимум <strong>\</strong> версия Python 3.0",</p>
<p>RuntimeWarning)</p>
<p><strong>else</strong>:</p>
<p>print('Нормальное продолжение')</p>
<p><strong>Вывод:</strong></p>
<p>$ python2.7 versioncheck.py</p>
<p>versioncheck.py:6: Для выполнения этой программы необходима как минимум�</p>
<p> <emphasis>,→</emphasis> версия Python 3.0</p>
<p>RuntimeWarning)</p>
<p>$ python3 versioncheck.py</p>
<p>Нормальное продолжение</p>
<p><strong>Как это работает:</strong></p>
<p>Мы используем один из модулей стандартной библиотеки, который называ-</p>
<p>ется warnings и служит для отображения предупреждений пользователю. Ес-</p>
<p>ли версия Python менее 3, мы показываем соответствующее предупреждение.</p>
<p>17.2 Модуль logging</p>
<p>Представьте ситуацию, когда необходимо сохранить некоторые отладочные или другие</p>
<p>важные сообщения где-нибудь, чтобы иметь возможность позже проверить, отработала</p>
<p>ли программа, как ожидалось. Как мы «сохраним где-нибудь» эти сообщения? Сделать</p>
<p>это можно при помощи модуля logging.</p>
<p>Сохраните как use_logging.py:</p>
<p><strong>import os</strong>, <strong>platform</strong>, <strong>logging</strong></p>
<p><strong>if </strong>platform.platform().startswith('Windows'):</p>
<p>logging_file = os.path.join(os.getenv('HOMEDRIVE'), \</p>
<p>(продолжение на следующей странице)</p>
<p><strong>17.2. Модуль logging</strong></p>
<p>133</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>(продолжение с предыдущей страницы)</p>
<p>os.getenv('HOMEPATH'), \</p>
<p>'test.log')</p>
<p><strong>else</strong>:</p>
<p>logging_file = os.path.join(os.getenv('HOME'), 'test.log')</p>
<p>print("Сохраняем лог в", logging_file)</p>
<p>logging.basicConfig(</p>
<p>level=logging.DEBUG,</p>
<p>format='  <emphasis>%(asctime)s </emphasis>:  <emphasis>%(levelname)s </emphasis>:  <emphasis>%(message)s</emphasis>', filename = logging_file,</p>
<p>filemode = 'w',</p>
<p>)</p>
<p>logging.debug("Начало программы")</p>
<p>logging.info("Какие-то действия")</p>
<p>logging.warning("Программа умирает")</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 use_logging.py</p>
<p>Сохраняем лог в C:\Users\swaroop\test.log</p>
<p>Если открыть файл test.log, он будет выглядеть примерно так:</p>
<p>2012-10-26 16:52:41,457 : DEBUG : Начало программы</p>
<p>2012-10-26 16:52:41,474 : INFO : Какие-то действия</p>
<p>2012-10-26 16:52:41,475 : WARNING : Программа умирает</p>
<p><strong>Как это работает:</strong></p>
<p>Мы использовали три модуля из стандартной библиотеки: модуль os для вза-</p>
<p>имодействия с операционной системой, модуль platform для получения ин-</p>
<p>формации о платформе (т.е. операционной системе) и модуль logging для</p>
<p>сохранения лога1.</p>
<p>Прежде всего, при помощи строки, возвращаемой функцией platform.</p>
<p>platform() мы проверяем, какая операционная система используется (для</p>
<p>более подробной информации см. import platform; help(platform)). Ес-</p>
<p>ли это Windows, то мы определяем диск, содержащий домашний каталог, путь</p>
<p>к домашнему каталогу на нём и имя файла, в котором хотим сохранить ин-</p>
<p>формацию. Сложив все эти три части, мы получаем полный путь к файлу.</p>
<p>Для других платформ нам нужно знать только путь к домашнему каталогу</p>
<p>пользователя, и мы получим полный путь к файлу.</p>
<p>1 log –  <emphasis>англ. </emphasis>«журнал», «вести журнал» ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>17.2. Модуль logging</strong></p>
<p>134</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>При помощи функции os.path.join() мы объединяем три части пути к</p>
<p>файлу вместе. Мы используем эту функцию вместо простого объединения</p>
<p>строк для того, чтобы гарантировать, что полный путь к файлу записан в формате, ожидаемом операционной системой.</p>
<p>Далее мы конфигурируем модуль logging таким образом, чтобы он записы-</p>
<p>вал все сообщения в определённом формате в указанный файл.</p>
<p>Наконец, мы можем выводить сообщения, предназначенные для отладки, ин-</p>
<p>формирования, предупреждения и даже критические сообщения. После вы-</p>
<p>полнения программы можно просмотреть этот файл и узнать, что происхо-</p>
<p>дило в программе, хотя пользователю, запустившему программу, ничего не</p>
<p>было показано.</p>
<p>17.3 Серия «Модуль недели»</p>
<p>В стандартной библиотеке можно найти ещё много полезного. Например, <a l:href="http://docs.python.org/py3k/library/pdb.html">отладка</a>, <a l:href="http://docs.python.org/py3k/library/argparse.html">обра-</a></p>
<p><a l:href="http://docs.python.org/py3k/library/argparse.html">ботка параметров командной строки, </a><a l:href="http://docs.python.org/py3k/library/re.html">регулярные выражения </a>и так далее.</p>
<p>Лучший способ дальнейшего изучения стандартной библиотеки – читать замечательную</p>
<p>серию Дуга Хелмана <a l:href="http://www.doughellmann.com/projects/PyMOTW/">«Модуль недели» </a>или официальную <a l:href="http://docs.python.org/py3k/">документацию Python</a>.</p>
<p>17.4 Резюме</p>
<p>Мы изучили лишь некоторые возможности некоторых модулей стандартной библиотеки</p>
<p>Python. Я настоятельно рекомендую просмотреть <a l:href="http://docs.python.org/py3k/library/index.html">документацию по стандартной библио-</a></p>
<p><a l:href="http://docs.python.org/py3k/library/index.html">теке Python</a>, чтобы увидеть все доступные модули.</p>
<p>Далее мы обратимся к некоторым аспектам, которые сделают вашу экскурсию по Python более «завершённой».</p>
<p><strong>17.3. Серия «Модуль недели»</strong></p>
<p>135</p>
<p><strong>Дополнительно</strong></p>
<p>К настоящему моменту мы уже рассмотрели большую часть того, что вам придётся использовать при работе с Python. В этой главе мы охватим некоторые дополнительные</p>
<p>аспекты, которые помогут отшлифовать ваши знания.</p>
<p>18.1 Передача кортежей</p>
<p>Хотелось ли вам когда-нибудь, чтобы функция возвращала не один результат, а два? Это</p>
<p>возможно. Всё, что для этого нужно, – использовать кортеж.</p>
<p><strong>&gt;&gt;&gt; def </strong>get_error_details():</p>
<p><strong>... </strong></p>
<p><strong>return </strong>(2, 'описание ошибки No2')</p>
<p><strong>... </strong></p>
<p><strong>&gt;&gt;&gt; </strong>errnum, errstr = get_error_details()</p>
<p><strong>&gt;&gt;&gt; </strong>errnum</p>
<p>2</p>
<p><strong>&gt;&gt;&gt; </strong>errstr</p>
<p>'описание ошибки No2'</p>
<p>Обратите внимание, что использование выражения «a, b = &lt;некоторое выражение&gt;»</p>
<p>интерпретирует результат как кортеж из двух значений.</p>
<p>Чтобы интерпретировать результат как «(a, &lt;всё остальное&gt;)», нужно просто поста-вить звёздочку, как это делалось для параметров функций:</p>
<p><strong>&gt;&gt;&gt; </strong>a, *b = [1, 2, 3, 4]</p>
<p><strong>&gt;&gt;&gt; </strong>a</p>
<p>1</p>
<p><strong>&gt;&gt;&gt; </strong>b</p>
<p>[2, 3, 4]</p>
<p>Это также подразумевает, что поменять местами два значения в Python быстрее всего</p>
<p>можно так:</p>
<p>136</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>&gt;&gt;&gt; </strong>a = 5; b = 8</p>
<p><strong>&gt;&gt;&gt; </strong>a, b = b, a</p>
<p><strong>&gt;&gt;&gt; </strong>a, b</p>
<p>(8, 5)</p>
<p>18.2 Специальные методы</p>
<p>Есть ряд методов, играющих особую роль для классов. Например, __init__ и __del__.</p>
<p>Специальные методы служат для того, чтобы имитировать поведение встроенных типов</p>
<p>данных. Например, всё, что потребуется для использования операции индексирования</p>
<p>x[индекс] применительно к своему классу (в таком виде, как это делалось для списков</p>
<p>и кортежей), это реализовать метод __getitem__(). Кстати, именно этот метод Python использует для самого класса list!</p>
<p>Некоторые полезные специальные методы перечислены в таблице ниже. Все другие методы можно посмотреть в <a l:href="http://docs.python.org/py3k/reference/datamodel.html#specialnames">документации. </a></p>
<p>Имя</p>
<p>Описание</p>
<p>__init__(self, …)</p>
<p>Этот метод вызывается прямо перед тем, как вновь созданный</p>
<p>объект возвращается для использования.</p>
<p>__del__(self)</p>
<p>Вызывается перед уничтожением объекта</p>
<p>__str__(self)</p>
<p>Вызывается при использовании функции print или str().</p>
<p>__lt__(self, other)</p>
<p>Вызывается, когда используется оператор «меньше» (&lt;).</p>
<p>Существуют и аналогичные методы для всех операторов (+, &gt;,</p>
<p>и т.д.)</p>
<p>__getitem__(self, key) Вызывается при использовании оператора индексирования</p>
<p>x[индекс]</p>
<p>__len__(self)</p>
<p>Вызывается при обращении к встроенной функции len() для</p>
<p>объекта-последовательности.</p>
<p>18.3 Блоки в одно выражение</p>
<p>Мы неоднократно говорили, что каждый блок команд отделяется от других своим соб-ственным уровнем отступа. Однако, существует и исключение. Если блок команд содержит только одно выражение, его можно указывать в одной строке с условным оператором</p>
<p>или, скажем, оператором цикла. Рассмотрим это на примере:</p>
<p><strong>&gt;&gt;&gt; </strong>flag = <strong>True</strong></p>
<p><strong>&gt;&gt;&gt; if </strong>flag: print('Да')</p>
<p>Да</p>
<p><strong>18.2. Специальные методы</strong></p>
<p>137</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Обратите внимание, что единственный оператор расположен в той же строке, а не отдель-ным блоком. Этот способ может подкупить тем, что якобы «сокращает» программу, но я</p>
<p>настоятельно рекомендую избегать его во всех случаях, кроме проверки ошибок. Прежде</p>
<p>всего, потому что гораздо легче добавлять команды, когда уже есть необходимый уровень</p>
<p>отступа.</p>
<p>18.4 Lambda-формы</p>
<p>Ключевое слово lambda используется для создания функций и возврата их значения во</p>
<p>время выполнения программы. lambda принимает параметр, за которым следует одно</p>
<p>выражение, которое становится телом функции, а значение этого выражения возвращается новой функцией.</p>
<p><strong>Пример: </strong>(сохраните как lambda.py)</p>
<p>points = [ { 'x' : 2, 'y' : 3 }, { 'x' : 4, 'y' : 1 } ]</p>
<p>points.sort(key=<strong>lambda </strong>i : i['y'])</p>
<p>print(points)</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 lambda.py</p>
<p>[{'x': 4, 'y': 1}, {'x': 2, 'y': 3}]</p>
<p><strong>Как это работает:</strong></p>
<p>Обратите внимание на то, что метод sort класса list может принимать параметр key, определяющий способ сортировки списка (обычно мы думаем толь-</p>
<p>ко о сортировке по возрастанию или по убыванию). В данном случае мы хотим</p>
<p>провести сортировку по собственному принципу, для чего нам необходимо</p>
<p>написать соответствующую функцию. Но вместо того, чтобы создавать отдельный блок def для описания функции, которая будет использоваться только в</p>
<p>этом месте, мы применяем лямбда-выражение.</p>
<p>18.5 Генераторы списков</p>
<p>Генераторы списков служат для создания новых списков на основе существующих. Представьте, что имеется список чисел, на основе которого требуется получить новый список, состоящий из всех чисел, умноженных на 2, но только при условии, что само число больше 2. Генераторы списков подходят для таких задач как нельзя лучше.</p>
<p><strong>18.4. Lambda-формы</strong></p>
<p>138</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Пример: </strong>(сохраните как list_comprehension.py)</p>
<p>listone = [2, 3, 4]</p>
<p>listtwo = [2*i <strong>for </strong>i <strong>in </strong>listone <strong>if </strong>i &gt; 2]</p>
<p>print(listtwo)</p>
<p><strong>Вывод:</strong></p>
<p>$ python3 list_comprehension.py</p>
<p>[6, 8]</p>
<p><strong>Как это работает:</strong></p>
<p>В этом примере мы создаём новый список, указав операцию, которую необхо-</p>
<p>димо произвести (2 * i), когда выполняется некоторое условие (if i &gt; 2).</p>
<p>Обратите внимание, что исходный список при этом не изменяется.</p>
<p>Преимущество использования генераторов списков состоит в том, что это заметно сокращает объёмы стандартного кода, необходимого для циклической обработки каждого элемента списка и сохранения его в новом списке.</p>
<p>18.6 Передача кортежей и словарей в функции</p>
<p>Для получения параметров, переданных функции, в виде кортежа или словаря, существуют специальные приставки «*» или «**» соответственно. Это особенно полезно в случаях, когда функция может принимать переменное число параметров.</p>
<p><strong>&gt;&gt;&gt; def </strong>powersum(power, *args):</p>
<p><strong>... </strong></p>
<p> <emphasis>'''Возвращает сумму аргументов, возведённых в указанную степень.''' </emphasis></p>
<p><strong>... </strong></p>
<p>total = 0</p>
<p><strong>... </strong></p>
<p><strong>for </strong>i <strong>in </strong>args:</p>
<p><strong>... </strong></p>
<p>total += pow(i, power)</p>
<p><strong>... </strong></p>
<p><strong>return </strong>total</p>
<p><strong>... </strong></p>
<p><strong>&gt;&gt;&gt; </strong>powersum(2, 3, 4)</p>
<p>25</p>
<p><strong>&gt;&gt;&gt; </strong>powersum(2, 10)</p>
<p>100</p>
<p>Поскольку перед переменной args указана приставка «*», все дополнительные аргументы, переданные функции, сохранятся в args в виде кортежа. В случае использования приставки «**» все дополнительные параметры будут рассматриваться как пары</p>
<p>ключ/значение в словаре.</p>
<p><strong>18.6. Передача кортежей и словарей в функции</strong></p>
<p>139</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>18.7 exec и eval</p>
<p>Функция exec служит для выполнения команд Python, содержащихся в строке или файле, в отличие от самого текста программы. Например, во время выполнения программы</p>
<p>можно сформировать строку, содержащую текст программы на Python, и запустить его</p>
<p>при помощи exec:</p>
<p><strong>&gt;&gt;&gt; </strong>exec('print("Здравствуй, Мир!")')</p>
<p>Здравствуй, Мир!</p>
<p>Аналогично, функция eval позволяет вычислять корректные выражения Python, содер-жащиеся в строке. Вот простой пример.</p>
<p><strong>&gt;&gt;&gt; </strong>eval('2*3')</p>
<p>6</p>
<p>18.8 Оператор assert</p>
<p>Оператор assert существует для того, чтобы указать, что нечто является истиной. Например, если требуется гарантировать, что в списке будет хотя бы один элемент, и вызвать ошибку, если это не так, то оператор assert идеально подойдёт для такой задачи.</p>
<p>Когда заявленное выражение ложно, вызывается ошибка AssertionError. Метод pop() возвращает последний элемент списка, одновременно удаляя его оттуда.</p>
<p><strong>&gt;&gt;&gt; </strong>mylist = ['item']</p>
<p><strong>&gt;&gt;&gt; assert </strong>len(mylist) &gt;= 1</p>
<p><strong>&gt;&gt;&gt; </strong>mylist.pop()</p>
<p>'item'</p>
<p><strong>&gt;&gt;&gt; </strong>mylist</p>
<p>[]</p>
<p><strong>&gt;&gt;&gt; assert </strong>len(mylist) &gt;= 1</p>
<p>Traceback (most recent call last):</p>
<p>File "&lt;stdin&gt;", line 1, in &lt;module&gt;</p>
<p>AssertionError</p>
<p>Тем не менее, оператор assert следует использовать благоразумно. В большинстве случаев гораздо лучше «отлавливать» исключения и либо решать соответствующую про-блему автоматически, либо выдавать пользователю сообщение об ошибке и завершать</p>
<p>работу программы.</p>
<p><strong>18.7. exec и eval</strong></p>
<p>140</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>18.9 Функция repr</p>
<p>Функция repr используется для получения канонического строкового представления</p>
<p>объекта. Любопытно, что в большинстве случаев eval(repr(object)) == object.</p>
<p><strong>&gt;&gt;&gt; </strong>i = []</p>
<p><strong>&gt;&gt;&gt; </strong>i.append('item')</p>
<p><strong>&gt;&gt;&gt; </strong>repr(i)</p>
<p>"['item']"</p>
<p><strong>&gt;&gt;&gt; </strong>eval(repr(i))</p>
<p>['item']</p>
<p><strong>&gt;&gt;&gt; </strong>eval(repr(i)) == i</p>
<p>True</p>
<p>По большому счёту, функция repr служит для получения печатаемого представления</p>
<p>объекта. Определив метод __repr__ в собственном классе, можно указать, что он будет</p>
<p>возвращать по вызову функции repr.</p>
<p>18.10 Управляющие последовательности</p>
<p>Попробуйте ответить на вопрос: Как указать строку, содержащую одинарную кавычку (')?</p>
<p>Например, строку «What's your name?». Её ведь нельзя записать просто как «'What's your name?'», потому что тогда Python не сможет определить, где начало строки, и где</p>
<p>конец. В таком случае придётся каким-то образом указать, что данная одинарная кавычка</p>
<p>не обозначает конца строки. Это можно сделать при помощи так называемой  <emphasis>управляющей последовательности</emphasis>. Укажите одинарную кавычку как \' – через обратную косую</p>
<p>черту. Теперь наша строка будет выглядеть так: 'What\'s your name?'.</p>
<p>Другой способ записи такой специфической строки – "What's your name?", т.е. с использованием двойных кавычек. Аналогично следует использовать управляющую последовательность для вставки двойной кавычки в строку, ограниченную двойными кавычка-ми. Сама же обратная наклонная черта указывается управляющей последовательностью</p>
<p>\\.</p>
<p>А как записать двустрочную строку? Один из вариантов нам уже знаком – заключить</p>
<p>строку в тройные кавычки, как было показано  <emphasis>ранее</emphasis>. Но есть и другой – использовать</p>
<p>управляющую последовательность для символа перевода строки \n. Например: «Это</p>
<p>первая строка\nЭто вторая строка». Полезно знать ещё одну управляющую последовательность – табуляцию (\t). Управляющих последовательностей существует намного</p>
<p>больше, но здесь упомянуты только наиболее важные.</p>
<p>Следует отметить, что одинарная наклонная черта в конце строки лишь указывает на то, что продолжение идёт строкой ниже, но не вставляет перевода строки. Например: <strong>18.9. Функция repr</strong></p>
<p>141</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>"Это первое предложение. <strong>\</strong></p>
<p>Это второе предложение."</p>
<p>эквивалентно записи "Это первое предложение. Это второе предложение.".</p>
<p>18.11 Необрабатываемые строки</p>
<p>Для записи строки, в которой не будет проводиться никакой специальной обработки, как, например, управляющих последовательностей, перед строкой указывается приставка «r»</p>
<p>или «R»1. Например, r"Перевод строки обозначается \n".</p>
<p><strong>Замечание для пользователей регулярных выражений</strong></p>
<p>Для работы с регулярными выражениями всегда используйте необрабатываемые строки.</p>
<p>В противном случае вас ждёт много возни с обратными косыми чёрточками. Например, обратные ссылки можно обозначать как '\\1' или r'\1'.</p>
<p>18.12 Резюме</p>
<p>Итак, в настоящей главе мы рассмотрели некоторые дополнительные возможности</p>
<p>Python, хотя по-прежнему, не охватили всего. Тем не менее, к настоящему моменту мы</p>
<p>уже прошли почти всё, что вам когда-либо понадобится использовать на практике. Этого</p>
<p>вполне достаточно для начала работы над любыми программами.</p>
<p>Далее мы обсудим, как продолжать исследовать Python.</p>
<p>1 «r» –  <emphasis>от англ. </emphasis>«raw» – «сырой, необработанный» ( <emphasis>прим. перев. </emphasis>) <strong>18.11. Необрабатываемые строки</strong></p>
<p>142</p>
<p><strong>Что дальше</strong></p>
<p>Добросовестный читатель, дочитавший книгу до сих пор, а также много практиковав-шийся в написании программ, наверняка уже освоился с Python. И конечно, вы уже по-пробовали реализовать какие-нибудь собственные идеи на Python, чтобы потренировать-ся. Нет? Тогда стоит начать! Но в таком случае возникает вопрос: «Что же делать дальше?».</p>
<p>Я предлагаю вам справиться со следующей задачей.</p>
<p><strong>Задача</strong></p>
<p>Создайте собственную программу «Адресная книга», работающую из командной строки и позволяющую просматривать, добавлять, изменять, удалять или искать контактные</p>
<p>данные ваших знакомых. Кроме того, эта информация также должна сохраняться на диске для последующего доступа.</p>
<p>Это достаточно простая задача, если думать о ней в терминах, которые мы до сих пор</p>
<p>проходили. Если же вы всё-таки нуждаетесь в подсказке, как действовать, вот она.</p>
<p><strong>Подсказка (не читать!)</strong></p>
<p>Создайте класс для хранения персональных данных. Объекты визитных карточек храните в словаре, в котором имена контактов будут служить ключами. Для длительного хранения этих объектов на жёстком диске воспользуйтесь модулем pickle. Для добавления, изменения или удаления контактов применяйте встроенные методы словаря.</p>
<p>Как только вы справитесь с этим, вы смело можете называться программистом на Python.</p>
<p>А теперь немедленно <a l:href="http://www.swaroopch.com/contact/">напишите мне письмо </a>;-). Это не обязательный шаг, но весьма ре-комендуемый. Также подумайте о <a l:href="http://www.swaroopch.com/buybook/">покупке бумажной версии книги</a>, чтобы поддержать</p>
<p>её дальнейшую разработку.</p>
<p>Если эта задачка показалась вам слишком лёгкой, попробуйте ещё одну:</p>
<p>143</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p><strong>Задача</strong></p>
<p>Реализуйте команду <a l:href="http://unixhelp.ed.ac.uk/CGI/man-cgi?replace">replace. </a>Эта команда заменяет одну строку другой в списке переданных ей файлов.</p>
<p>Команда replace может быть любой желаемой сложности: от простой замены строк до</p>
<p>поиска по шаблону (регулярному выражению).</p>
<p>А вот ещё некоторые возможные направления вашего дальнейшего путешествия по миру</p>
<p>Python:</p>
<p>19.1 Упражнения</p>
<p>На Stack Overflow есть неплохое обсуждение <a l:href="http://stackoverflow.com/questions/29578/python-exercises-to-hone-your-skills">упражнений на Python, помогающих отто-</a></p>
<p><a l:href="http://stackoverflow.com/questions/29578/python-exercises-to-hone-your-skills">чить ваше мастерство</a>.</p>
<p>19.2 Примеры программ</p>
<p>Лучший способ овладеть языком программирования – это писать много программ и читать много программ:</p>
<p>• <a l:href="http://pleac.sourceforge.net/pleac_python/index.html">Проект PLEAC</a></p>
<p>• <a l:href="http://www.rosettacode.org/wiki/Category%3aPython">Хранилище кода Rosetta</a></p>
<p>• <a l:href="http://www.java2s.com/Code/Python/CatalogPython.htm">Примеры для Python на java2s</a></p>
<p>• <a l:href="http://code.activestate.com/recipes/langs/python/">Книга рецептов Python </a>– ценнейшая коллекция рецептов и подсказок, как решать</p>
<p>те или иные проблемы при помощи Python. Обязательна к прочтению каждым программистом на Python.</p>
<p>• <a l:href="http://www.doughellmann.com/PyMOTW/contents.html">Модуль недели </a>– ещё один замечательный путеводитель по  <emphasis>стандартной библио-</emphasis></p>
<p> <emphasis>теке Python</emphasis>.</p>
<p>19.3 Вопросы и ответы</p>
<p>• <a l:href="http://docs.python.org/dev/howto/doanddont.html">Официальные «Можно и нельзя» в Python</a></p>
<p>• <a l:href="http://www.python.org/doc/faq/general/">Официальные ЧаВо Python</a></p>
<p>• <a l:href="http://norvig.com/python-iaq.html">Список НеЧасто задаваемых Вопросов от Norvig</a></p>
<p>• <a l:href="http://dev.fyicenter.com/Interview-Questions/Python/index.html">Вопросы и ответы из интервью о Python</a></p>
<p><strong>19.1. Упражнения</strong></p>
<p>144</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• <a l:href="http://beta.stackoverflow.com/questions/tagged/python">Вопросы на StackOverflow с пометкой «python»</a></p>
<p>19.4 Советы и рекомендации</p>
<p>• <a l:href="http://www.siafoo.net/article/52">Трюки и уловки Python</a></p>
<p>• <a l:href="http://ivory.idyll.org/articles/advanced-swc/">Сколачиваем программы при помощи Python</a></p>
<p>• <a l:href="http://gnosis.cx/publish/tech_index_cp.html">Очаровательный Python </a>– замечательная серия статей о Python Дэвида Мерца.</p>
<p>19.5 Учебники</p>
<p>• <a l:href="http://www.awaretek.com/tutorials.html">Всеобъемлющий список учебников по Python от Awaretek</a></p>
<p>19.6 Видео</p>
<p>• <a l:href="http://www.pyvideo.org/category">PyVideo</a></p>
<p>19.7 Обсуждение</p>
<p>Если вы застряли на какой-то проблеме в Python и не знаете, кого спросить, тогда <a l:href="http://mail.python.org/mailman/listinfo/tutor">список</a></p>
<p><a l:href="http://mail.python.org/mailman/listinfo/tutor">рассылки python-tutor </a>подойдёт наилучшим образом.</p>
<p>Тем не менее, сначала проделайте всю домашнюю работу и попытайтесь решить пробле-му самостоятельно.</p>
<p>19.8 Новости</p>
<p>Если вас интересуют последние новости мира Python, отслеживайте их на официальной</p>
<p><a l:href="http://planet.python.org">планете Python</a>.</p>
<p><strong>19.4. Советы и рекомендации</strong></p>
<p>145</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>19.9 Установка библиотек</p>
<p>В <a l:href="http://pypi.python.org/pypi">Каталоге пакетов Python </a>существует колоссальное количество открытых библиотек, которые вы можете использовать в своих программах. Для их установки можно воспользоваться <a l:href="http://www.pip-installer.org/en/latest/">pip</a>.</p>
<p>19.10 Графические программы</p>
<p>Для создания собственной графической программы на Python понадобится какая-нибудь</p>
<p>библиотека ГИП (графического интерфейса пользователя) со своими привязками к</p>
<p>Python. Привязки позволяют писать программу на Python, используя библиотеки, которые сами по себе написаны на C, C++ или других языках.</p>
<p>Выбор ГИП для Python достаточно обширен:</p>
<p>• <strong>Kivy</strong></p>
<p><a l:href="http://kivy.org">http://kivy.org</a></p>
<p>• <strong>PyGTK</strong></p>
<p>Это привязки Python к инструментарию GTK+, на основе которого построен</p>
<p>GNOME. У GTK+ есть много своих особенностей, но как только вы освоитесь, вы</p>
<p>сможете создавать ГИП очень быстро. Что касается дизайнера графического интерфейса Glade, то он просто незаменим. Документация же всё ещё требует некоторых</p>
<p>улучшений. GTK+ хорошо работает в GNU/Linux, но его порт на Windows пока не</p>
<p>закончен. При помощи GTK+ можно создавать как свободные, так и проприетарные</p>
<p>программы. Для начала прочитайте <a l:href="http://www.pygtk.org/tutorial.html">Учебник по PyGTK. </a></p>
<p>• <strong>PyQt</strong></p>
<p>Это привязки Python к инструментарию Qt, на основе которого построена KDE. Qt чрезвычайно прост в использовании, особенно благодаря Qt Designer и изумитель-ной документации Qt. PyQt бесплатно, если используется для создания свободных</p>
<p>программ (с лицензией GPL). Для создания закрытых проприетарных программ вам</p>
<p>придётся его купить. Начиная с Qt 4.5, разрешается создавать при помощи него не</p>
<p>только GPL’ные программы. Для начала прочитайте <a l:href="http://zetcode.com/tutorials/pyqt4/">краткое пособие по PyQt </a>или</p>
<p><a l:href="http://www.qtrac.eu/pyqtbook.html">Книгу PyQt</a>.</p>
<p>• <strong>wxPython</strong></p>
<p>Это привязки Python к инструментарию wxWidgets. wxPython не так прост в освоении, но зато он переносим и работает на GNU/Linux, Windows, Mac и даже на встраи-ваемых платформах. Многие среды разработки для wxPython, такие как <a l:href="http://spe.pycs.net/">SPE (Stani’s</a></p>
<p><a l:href="http://spe.pycs.net/">Python Editor) </a>и <a l:href="http://wxglade.sourceforge.net/">wxGlade </a>включают дизайнеры графического интерфейса. При помощи wxPython можно создавать как свободные, так и проприетарные программы.</p>
<p>Для начала прочитайте <a l:href="http://zetcode.com/wxpython/">учебник по wxPython. </a></p>
<p><strong>19.9. Установка библиотек</strong></p>
<p>146</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>19.11 Резюме по инструментам ГИП</p>
<p>Другие варианты можно найти на <a l:href="http://www.python.org/cgi-bin/moinmoin/GuiProgramming">wiki-странице GuiProgramming официального сайта</a></p>
<p><a l:href="http://www.python.org/cgi-bin/moinmoin/GuiProgramming">Python. </a></p>
<p>К сожалению, не существует некоего единого стандартного инструмента для создания</p>
<p>графических программ на Python. Я бы рекомендовал выбирать один из инструментов, описанных выше, наиболее подходящий для конкретной ситуации. Во-первых, опреде-литесь, согласны ли вы платить за использование этого инструмента. Во-вторых, опре-делитесь, на каких платформах должна работать ваша программа: только на Windows, на</p>
<p>Mac и GNU/Linux или на всех сразу. И в-третьих, если вы выбрали платформу GNU/Linux, то в какой среде вы работаете: в KDE или GNOME.</p>
<p>Для более подробного анализа см. страницу 26 <a l:href="http://archive.pythonpapers.org/ThePythonPapersVolume3Issue1.pdf">Статей о Python, Том 3, Выпуск 1. </a></p>
<p>19.12 Различные реализации</p>
<p>Язык программирования обычно состоит из двух частей: собственно языка и программного обеспечения. Язык – это то,  <emphasis>как </emphasis> мы что-либо пишем, а программное обеспечение –</p>
<p>это то,  <emphasis>что </emphasis> запускает наши программы.</p>
<p>До сих пор для выполнения наших программ мы использовали  <emphasis>CPython</emphasis>. Он называется</p>
<p>«CPython», потому что написан на языке C и является  <emphasis>Классическим интерпретатором</emphasis></p>
<p> <emphasis>Python</emphasis> 1.</p>
<p>Но существует и другое программное обеспечение, способное выполнять программы на</p>
<p>Python:</p>
<p>• <a l:href="http://www.jython.org">Jython</a></p>
<p>Реализация Python, работающая на платформе Java. Это означает, что можно использовать библиотеки и классы Java в программе на Python и наоборот.</p>
<p>• <a l:href="http://www.codeplex.com/Wiki/View.aspx?ProjectName%3dIronPython">IronPython</a></p>
<p>Реализация Python, работающая на платформе .NET, что означает возможность использования библиотек и классов .NET в программах на Python и наоборот.</p>
<p>• <a l:href="http://codespeak.net/pypy/dist/pypy/doc/home.html">PyPy</a></p>
<p>Реализация Python, написанная на Python! Это исследовательский проект, суще-ствующий для ускорения и облегчения разработки интерпретатора, поскольку сам</p>
<p>интерпретатор написан на динамическом языке (в отличие от статических языков, как C, Java и C# в вышеупомянутых реализациях)</p>
<p>• <a l:href="http://www.stackless.com">Stackless Python</a></p>
<p>1 <strong>C</strong>lassical <strong>Python </strong>interpreter ( <emphasis>прим.перев. </emphasis>)</p>
<p><strong>19.11. Резюме по инструментам ГИП</strong></p>
<p>147</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>Реализация Python, специализирующаяся на высокой производительности много-поточных программ.</p>
<p>Существуют и другие реализации, такие как <a l:href="http://common-lisp.net/project/clpython/">CLPython </a>– написанная на Common Lisp и</p>
<p><a l:href="http://wiki.mozilla.org/Tamarin%3aIronMonkey">IronMonkey </a>– порт IronPython на JavaScript, что даёт возможность писать браузерные приложения («Ajax») на Python вместо JavaScript.</p>
<p>Каждая из перечисленных реализаций имеет свою область применения.</p>
<p>19.13 Функциональное программирование (для хо-</p>
<p>рошо подготовленных читателей)</p>
<p>Для написания больших программ определённо необходимо изучить функциональный</p>
<p>подход к программированию, в отличие от объектно-ориентированного подхода, который мы проходили в  <emphasis>разделе «Объектно-ориентированное программирование»</emphasis>:</p>
<p>• <a l:href="http://docs.python.org/dev/howto/functional.html">Практические советы по функциональному программированию, A.M. Kuchling</a></p>
<p>• <a l:href="http://www.diveintopython.net/functional_programming/index.html">Глава «Функциональное программирование» книги «Dive Into Python»</a></p>
<p>• <a l:href="http://ua.pycon.org/static/talks/kachayev/index.html">Презентация «Функциональное программирование в Python»</a></p>
<p>19.14 Резюме</p>
<p>Вот мы и подошли к концу нашей книги, но как говорится, это только  <emphasis>начало конца</emphasis>! Теперь вы заядлый программист на Python, и несомненно, готовы решать множество задач</p>
<p>при помощи Python. Теперь вы можете начать автоматизировать на своём компьютере</p>
<p>всё подряд, можете писать собственные игры и многое-многое другое. Так что вперёд!</p>
<p><strong>19.13. Функциональное программирование (для хорошо подготовленных</strong></p>
<p>148</p>
<p><strong>читателей)</strong></p>
<p><strong>Приложение: FLOSS</strong></p>
<p>20.1 Free/Libre and Open Source Software (FLOSS)1</p>
<p>В основу идеи <a l:href="http://en.wikipedia.org/wiki/FLOSS">FLOSS </a>положена концепция сообщества, в котором принято делиться, и</p>
<p>особенно делиться знаниями. Свободные программы можно свободно использовать, изменять и распространять.</p>
<p>Если вы уже прочли эту книгу, то вы уже знакомы со свободным ПО, так как вы изучали</p>
<p><strong>Python </strong>всё это время, а Python является свободным программным обеспечением!</p>
<p>Вот несколько примеров свободного ПО, по которым можно составить некоторое представление о том, что способно создать такое сообщество:</p>
<p>• <strong>Linux</strong>. Это свободное ядро операционной системы, используемое, например, в операционной системе GNU/Linux. Разработку ядра «Linux» начал Линус Торвальдс</p>
<p>ещё в свою бытность студентом. <a l:href="http://www.kernel.org">[Linux Kernel</a>]</p>
<p>• <strong>GNU</strong>. Свободная операционная система, основанная Ричардом Столлманом в 1983</p>
<p>году. <a l:href="http://www.gnu.orgGNU">[GNU</a>]</p>
<p>• <strong>GNU/Linux</strong>. Сочетание операционной системы GNU с ядром «Linux», в наше время серьёзный конкурент Microsoft Windows. В принципе, GNU/Linux является свободным программным обеспечением, но разные дистрибутивы GNU/Linux могут</p>
<p>включать и несвободные программы. [<a l:href="http://www.gnu.org/distros">Free GNU/Linux distributions</a>]</p>
<p>• <strong>Ubuntu</strong>. Это дистрибутив, разрабатываемый сообществом и спонсируемый фир-мой Canonical. В настоящее время это, пожалуй, самый популярный дистрибутив</p>
<p>GNU/Linux. Он позволяет легко устанавливать и использовать множество свободных программ. Больше того, он позволяет просто перезагрузить ваш компьютер и</p>
<p>запустить GNU/Linux с CD! Это даёт возможность в полной мере опробовать новую</p>
<p>операционную систему до установки на жёсткий диск. Однако, Ubuntu не полностью свободна, так как включает некоторые проприетарные драйверы, микрокод и</p>
<p>приложения. [<a l:href="http://www.ubuntu.com/">Ubuntu]</a></p>
<p>• <strong>LibreOffice</strong>. Это превосходный офисный пакет, разрабатываемый сообществом и</p>
<p>включающий в себя компоненты для создания текста, презентаций, электронных</p>
<p>1 Свободное и открытое программное обеспечение ( <emphasis>прим.перев. </emphasis>)</p>
<p>149</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>таблиц, рисунков и многого другого. Он также позволяет открывать и редактировать файлы MS Word и MS Powerpoint. Он работает практически на всех платформах и является полностью свободным и открытым программным обеспечением.</p>
<p><a l:href="http://www.libreoffice.org/">[LibreOffice</a>]</p>
<p>• <strong>Mozilla Firefox</strong>. Это веб-браузер нового поколения, являющийся сильнейшим сопер-ником Internet Explorer. Он огненно быстр, и заработал широкое признание своими</p>
<p>удобными и впечатляющими возможностями. А концепция расширений позволяет</p>
<p>дополнять его самыми разнообразными плагинами. [<a l:href="http://www.mozilla.org/products/firefox">Mozilla Firefox]</a></p>
<p>• Его «напарник» <strong>Thunderbird </strong>– отличный клиент электронной почты, делающий её</p>
<p>чтение чрезвычайно простым. <a l:href="http://www.mozilla.org/products/thunderbird">[Mozilla Thunderbird]</a></p>
<p>• <strong>Mono</strong>. Это свободная реализация платформы Microsoft .NET. Она позволяет создавать и запускать .NET-приложения в GNU/Linux, Windows, FreeBSD, Mac OS и на многих других платформах. [<a l:href="http://www.mono-project.com">Mono</a>], [<a l:href="http://www.ecma-international.org">ECMA], </a>[<a l:href="http://www.microsoft.com/net">.NET</a>]</p>
<p>• <strong>Apache web server</strong>. Это популярный открытый веб-сервер. По сути, это  <emphasis>самый </emphasis> популярный веб-сервер на планете. На нём работает более половины всех сайтов. Да, Apache действительно обслуживает больше сайтов, чем все остальные веб-серверы</p>
<p>(включая Microsoft IIS) вместе взятые. <a l:href="http://httpd.apache.org">[Apache]</a></p>
<p>• <strong>MySQL</strong>. Это чрезвычайно популярный открытый сервер баз данных. Он наиболее</p>
<p>известен своей ошеломляющей скоростью. Это его обозначают буквой «M» в соче-тании «LAMP», на котором работает большинство сайтов в Интернете. [<a l:href="http://www.mysql.comMySQL">MySQL]</a></p>
<p>• <strong>VLC Player</strong>. Это проигрыватель, который может воспроизводить всё, начиная от</p>
<p>DivX и до MP3, до Ogg, до VCD, до DVD, до … и кто сказал, что это не забавно?</p>
<p>;-) <a l:href="http://www.videolan.org/vlc/">[VLC media player</a>]</p>
<p>• <strong>GeexBox </strong>– дистрибутив GNU/Linux, созданный для проигрывания фильмов сразу</p>
<p>после загрузки с CD! <a l:href="http://geexbox.org/en/start.html">[GeexBox</a>]</p>
<p>Этот список предназначен только лишь для того, чтобы вкратце передать вам мысль, на самом же деле существует ещё огромное множество свободного ПО, такого как язык</p>
<p>Perl, язык PHP, система управления содержимым веб-сайтов Drupal, сервер баз данных</p>
<p>PostgreSQL, игра TORCS, среда разработки KDevelop, проигрыватель Xine, текстовый редактор VIM, редактор Quanta+, аудио-плеер Banshee, графический редактор GIMP, … этот</p>
<p>список можно продолжать вечно.</p>
<p>Чтобы отследить свежие слухи в мире свободного ПО, посетите следующие сайты:</p>
<p>• <a l:href="http://www.linux.com">linux.com</a></p>
<p>• <a l:href="http://www.linuxtoday.com">LinuxToday</a></p>
<p>• <a l:href="http://newsforge.com">NewsForge</a></p>
<p>• <a l:href="http://www.distrowatch.com">DistroWatch</a></p>
<p>Узнать больше о свободном ПО можно на следующих сайтах:</p>
<p><strong>20.1. Free/Libre and Open Source Software (FLOSS)</strong>1</p>
<p>150</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• <a l:href="http://www.sourceforge.net">SourceForge</a></p>
<p>• <a l:href="http://www.freshmeat.net">FreshMeat</a></p>
<p>Так что вперёд – осваивать бескрайний, свободный и открытый мир СПО!</p>
<p><strong>20.1. Free/Libre and Open Source Software (FLOSS)</strong>1</p>
<p>151</p>
<p><strong>Приложение: о книге</strong></p>
<p>21.1 Колофон</p>
<p>Практически все программы, которые я использовал при написании этой книги, являются</p>
<p> <emphasis>свободными</emphasis>.</p>
<p>21.1.1 Рождение книги</p>
<p>При написании первого черновика этой книги в основе моей системы была Red Hat 9.0</p>
<p>Linux, но уже шестую версию черновика я писал на Fedora Core 3 Linux.</p>
<p>В начале для написания книги я использовал KWord (как я и описывал в  <emphasis>Предисловии</emphasis>).</p>
<p>21.1.2 Отрочество</p>
<p>Позже я перешёл на формат DocBook XML и использовал Kate, но это показалось мне</p>
<p>слишком скучным. Поэтому я перешёл на OpenOffice, который замечательно подходил</p>
<p>со своим уровнем управления форматированием и возможностью генерировать PDF, но</p>
<p>он выдавал слишком небрежные HTML-страницы.</p>
<p>Наконец, я открыл для себя XEmacs и переписал всю книгу с нуля в формате DocBook XML</p>
<p>(снова), так как решил, что этот формат – надолго.</p>
<p>Для шестой версии черновика я решил использовать Quanta+. При этом я использовал</p>
<p>стандартные таблицы стилей XSL, которые шли в комплекте с Fedora Core 3 Linux. Потом</p>
<p>я написал CSS документ, чтобы придать цвет и стиль HTML-страницам. Я также на ско-рую руку написал лексический анализатор (конечно, на Python), который осуществлял</p>
<p>автоматическую подсветку синтаксиса в примерах программ.</p>
<p>Для седьмой редакции я использовал <a l:href="http://www.mediawiki.org">MediaWiki </a>в качестве основы для своего <a l:href="http://www.swaroopch.com/notes/">сай-</a></p>
<p><a l:href="http://www.swaroopch.com/notes/">та</a>. Теперь я всё редактирую прямо на сайте, а читатели могут сразу же читать/редактировать/обсуждать содержимое на вики-странице.</p>
<p>Благодаря <a l:href="https://addons.mozilla.org/en-US/firefox/addon/394">расширению ViewSourceWith для Firefox</a>, которое интегрируется с Vim, я про-должал использовать Vim для редактирования.</p>
<p>152</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>21.1.3 Сейчас</p>
<p>Использую <a l:href="http://www.swaroopch.com/notes/vim">Vim</a>, <a l:href="http://johnmacfarlane.net/pandoc/README.html">Pandoc, </a>и Mac OS X.</p>
<p>21.2 Об авторе</p>
<p><a l:href="http://www.swaroopch.com/about/">http://www.swaroopch.com/about/</a></p>
<p><strong>21.2. Об авторе</strong></p>
<p>153</p>
<p><strong>Приложение: История версий</strong></p>
<p>• <strong>2.0 </strong>(20/10/2012)</p>
<p><strong>– </strong>Переписано в формате <a l:href="http://johnmacfarlane.net/pandoc/README.html">Pandoc </a>Спасибо моей жене, которая перевела большую</p>
<p>часть текста из формата Mediawiki</p>
<p><strong>– </strong>Упрощение текста, удаление таких необязательных разделов, как nonlocal и</p>
<p>метаклассы</p>
<p>• <strong>1.90 </strong>(04/09/2008)</p>
<p><strong>– </strong>Возобновление после перерыва в 3.5 года!</p>
<p><strong>– </strong>Обновление для Python 3.0</p>
<p><strong>– </strong>Переписано в формате <a l:href="http://www.mediawiki.org">MediaWiki </a>(снова)</p>
<p>• <strong>1.20 </strong>(13/01/2005)</p>
<p><strong>– </strong>Полностью переписано в <a l:href="https://en.wikipedia.org/wiki/Quanta_Plus">Quanta+ </a>на <a l:href="http://fedoraproject.org/">Fedora </a>Core 3 со множеством исправлений</p>
<p>и дополнений. Много новых примеров. Заново переписан формат DocBook.</p>
<p>• <strong>1.15 </strong>(28/03/2004)</p>
<p><strong>– </strong>Незначительные исправления.</p>
<p>154</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• <strong>1.12 </strong>(16/03/2004)</p>
<p><strong>– </strong>Дополнения и исправления.</p>
<p>• <strong>1.10 </strong>(09/03/2004)</p>
<p><strong>– </strong>Исправления опечаток, благодаря множеству отзывов заинтересованных читателей.</p>
<p>• <strong>1.00 </strong>(08/03/2004)</p>
<p><strong>– </strong>После колоссального числа отзывов и предложений от читателей я произвёл</p>
<p>значительную переработку текста наряду с исправлением опечаток.</p>
<p>• 0.99 (22/02/2004)</p>
<p><strong>– </strong>Добавлена новая глава о модулях. Также добавлен фрагмент о переменном числе аргументов в функциях.</p>
<p>• 0.98 (16/02/2004)</p>
<p><strong>– </strong>Написан скрипт на Python и таблица стилей CSS для улучшения вывода в</p>
<p>XHTML, включая недоделанный-но-функциональный лексический анализа-</p>
<p>тор для подсветки синтаксиса в примерах программ</p>
<p>• 0.97 (13/02/2004)</p>
<p><strong>– </strong>Ещё один заново переписанный черновик в формате DocBook XML (снова).</p>
<p>Книга существенно улучшена – она стала значительно более связанной и чи-</p>
<p>табельной.</p>
<p>155</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• 0.93 (25/01/2004)</p>
<p><strong>– </strong>Добавлено описание IDLE и другие вещи, относящиеся к Windows.</p>
<p>• 0.92 (05/01/2004)</p>
<p><strong>– </strong>Изменения в нескольких примерах.</p>
<p>• 0.91 (30/12/2003)</p>
<p><strong>– </strong>Исправлены опечатки. Сделаны наброски многих разделов.</p>
<p>• 0.90 (18/12/2003)</p>
<p><strong>– </strong>Добавлены 2 главы. Формат <a l:href="https://en.wikipedia.org/wiki/OpenOffice">OpenOffice </a>с исправлениями.</p>
<p>• 0.60 (21/11/2003)</p>
<p><strong>– </strong>Полностью переписано и расширено.</p>
<p>• 0.20 (20/11/2003)</p>
<p><strong>– </strong>Исправлены некоторые опечатки и ошибки.</p>
<p>156</p>
<p>A Byte of Python (Russian), Версия 2.02</p>
<p>• 0.15 (20/11/2003)</p>
<p><strong>– </strong>Переведено в формат <a l:href="https://en.wikipedia.org/wiki/DocBook">DocBook XML </a>при помощи XEmacs.</p>
<p>• 0.10 (14/11/2003)</p>
<p><strong>– </strong>Самый первый набросок в редакторе <a l:href="https://en.wikipedia.org/wiki/Kword">KWord. </a></p>
<p>157</p>
<p><strong>Приложение: Инструкция по переводу</strong></p>
<p>Полный исходный текст книги доступен в Git-репозитории <a l:href="https://github.com/swaroopch/byte_of_python">https://github.com/swaroopch/</a></p>
<p><a l:href="https://github.com/swaroopch/byte_of_python">byte_of_python </a>.</p>
<p><a l:href="https://help.github.com/articles/fork-a-repo">Создайте ответвление репозитория. </a></p>
<p>Затем скачайте репозиторий на свой компьютер. Для этого нужно быть знакомым с <a l:href="http://www.git-scm.com">Git. </a></p>
<p>Отредактируйте файлы .pd на своём родном языке. Прочитайте <a l:href="http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown">Pandoc README, </a>чтобы</p>
<p>познакомиться с форматированием текста</p>
<p>Затем следуйте указаниям в <a l:href="http://github.com/swaroopch/byte_of_python#README">README </a>для установки программ, необходимых для конвер-тирования исходных файлов в PDF и т.п.</p>
<p>158</p>
<p><strong>Document Outline</strong></p>
<p>Обложка</p>
<p>«Укус Питона» – «A Byte of Python» по-русски</p>
<p>Кто читает «A Byte of Python»?</p>
<p>Лицензия</p>
<p>Читать</p>
<p>Купить книгу</p>
<p>Скачать</p>
<p>Книга на вашем родном языке</p>
<p>Переводы</p>
<p>Доступные переводыпереводы</p>
<p>Предисловие</p>
<p>Для кого эта книга</p>
<p>Немного истории</p>
<p>Состояние книги</p>
<p>Официальная веб-страница</p>
<p>К размышлению</p>
<p>Введение</p>
<p>Особенности Python</p>
<p>Python 2 против 3</p>
<p>Что говорят программисты</p>
<p>Установка</p>
<p>Установка в GNU/Linux и BSD</p>
<p>Установка в Windows</p>
<p>Для пользователей Mac OS X</p>
<p>Резюме</p>
<p>Первые шаги</p>
<p>Использование командной строки интерпретатора</p>
<p>Выбор редактора</p>
<p>Использование программных файлов</p>
<p>Получение помощи</p>
<p>Резюме</p>
<p>Основы</p>
<p>Комментарии</p>
<p>Литеральные константы</p>
<p>Числа</p>
<p>Строки</p>
<p>Переменные</p>
<p>Имена идентификаторов</p>
<p>Типы данных</p>
<p>Объекты</p>
<p>Логические и физические строки</p>
<p>Отступы</p>
<p>Резюме</p>
<p>Операторы и выражения</p>
<p>Операторы</p>
<p>Порядок вычисления</p>
<p>Изменение порядка вычисления</p>
<p>Ассоциативность</p>
<p>Выражения</p>
<p>Резюме</p>
<p>Поток команд</p>
<p>Оператор if</p>
<p>Оператор while</p>
<p>Цикл for</p>
<p>Оператор break</p>
<p>Оператор continue</p>
<p>Резюме</p>
<p>Функции</p>
<p>Параметры функций</p>
<p>Локальные переменные</p>
<p>Зарезервированное слово «global»</p>
<p>Зарезервированное слово «nonlocal»</p>
<p>Значения аргументов по умолчанию</p>
<p>Ключевые аргументы</p>
<p>Переменное число параметров</p>
<p>Только ключевые параметры</p>
<p>Оператор «return»</p>
<p>Строки документации</p>
<p>Аннотации</p>
<p>Резюме</p>
<p>Модули</p>
<p>Файлы байткода .pyc</p>
<p>Оператор from … import …</p>
<p>Имя модуля – __name__</p>
<p>Создание собственных модулей</p>
<p>Функция dir</p>
<p>Пакеты</p>
<p>Резюме</p>
<p>Структуры данных</p>
<p>Список</p>
<p>Краткое введение в объекты и классы</p>
<p>Кортеж</p>
<p>Словарь</p>
<p>Последовательности</p>
<p>Множество</p>
<p>Ссылки</p>
<p>Ещё о строках</p>
<p>Резюме</p>
<p>Решение задач</p>
<p>Задача</p>
<p>Решение</p>
<p>Вторая версия</p>
<p>Третья версия</p>
<p>Четвёртая версия</p>
<p>Дополнительные усовершенствования</p>
<p>Процесс разработки программного обеспечения</p>
<p>Резюме</p>
<p>Объектно-ориентированное программирование</p>
<p>self</p>
<p>Классы</p>
<p>Методы объектов</p>
<p>Метод __init__</p>
<p>Переменные класса и объекта</p>
<p>Наследование</p>
<p>Метаклассы</p>
<p>Резюме</p>
<p>Ввод-вывод</p>
<p>Ввод от пользователя</p>
<p>Файлы</p>
<p>Pickle</p>
<p>Резюме</p>
<p>Исключения</p>
<p>Ошибки</p>
<p>Исключения</p>
<p>Обработка исключений</p>
<p>Вызов исключения</p>
<p>Try .. Finally</p>
<p>Оператор with</p>
<p>Резюме</p>
<p>Стандартная библиотека</p>
<p>Модуль sys</p>
<p>Модуль logging</p>
<p>Серия «Модуль недели»</p>
<p>Резюме</p>
<p>Дополнительно</p>
<p>Передача кортежей</p>
<p>Специальные методы</p>
<p>Блоки в одно выражение</p>
<p>Lambda-формы</p>
<p>Генераторы списков</p>
<p>Передача кортежей и словарей в функции</p>
<p>exec и eval</p>
<p>Оператор assert</p>
<p>Функция repr</p>
<p>Управляющие последовательности</p>
<p>Необрабатываемые строки</p>
<p>Резюме</p>
<p>Что дальше</p>
<p>Упражнения</p>
<p>Примеры программ</p>
<p>Вопросы и ответы</p>
<p>Советы и рекомендации</p>
<p>Учебники</p>
<p>Видео</p>
<p>Обсуждение</p>
<p>Новости</p>
<p>Установка библиотек</p>
<p>Графические программы</p>
<p>Резюме по инструментам ГИП</p>
<p>Различные реализации</p>
<p>Функциональное программирование (для хорошо подготовленных читателей)</p>
<p>Резюме</p>
<p>Приложение: FLOSS</p>
<p>Free/Libre and Open Source Software (FLOSS)</p>
<p>Приложение: о книге</p>
<p>Колофон</p>
<p>Об авторе</p>
<p>Приложение: История версий</p>
<p>Приложение: Инструкция по переводу</p>
<empty-line/>
</section>
</body>
<binary id="img_1" content-type="image/png">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
c6/Z9IuBF9+bsnkl0YBp7Vv9uvfQ3Y4Rpm3bcmA/tVjb0g0fQQC4B0zHjh3lIvR6/apVqx6P
5yV+WfnDjn+Nq+bOspr7ffJFsJv1POuu1eSWbDi+85tXzlDn+v1imoVV8ir7/EST3iyQyt1b
U54vF4JNbxKJ03i7l2tJ721yk95IGk/3u20y1vRb59ft+HNeuvd7PUcMqYFPIMATpXzPS3zp
pZe8vb2ZIhQKxZNwTYed1ajYfyOOOZXOv8ClF15Rz4zeELzt4x1rO5+J+Gl476iyHilj3b09
76E+Gm9v+q8mL1XNTZe/abvJTl4tFg1s3zYIn2cAuNfd8GO/hE0mdfHXPLjZudes1+/nenaT
lTQ4Tla0daqNPDbKzR0tAwDIsNJpOjDqwc9Uhd10MR1NBBgAIMNKS5ZlrGMAgMcVfj8MAACQ
YQAAAMgwAAAAZBgAACDDAAAAkGEAAADIMAAAQIYBAAAgwwAAAJBhAAAAyDAAAECGAQAAIMMA
AACQYQAAgAwDAABAhgEAACDDAAAAkGEAAIAMAwAAQIYBAAAgwwAAABkGAACADAMAAECGAQAA
IMMAAAAZBgAAgAwDAABAhgEAADIMAAAAGQYAAIAMAwAAQIYBAAAyDAAAABkGAACADAMAAGQY
AAAAMgwAAAAZBgAAgAwDAABkGAAAADIMAAAAGQYAAMgwAAAAZBgAAAAyDAAAABkGAADIMAAA
AGQYAAAAMgwAAJBhAAAAyDAAAABkGAAAADIMAACQYQAAAMgwAAAAZBgAACDDAAAAkGEAAADI
MAAAAGQYAAAgwwAAAJBhAAAAyDAAAECGAQAAIMMAAACQYQAAAMgwAABAhgEAACDDAAAAkGEA
AIAMAwAAQIYBAAAgwwAAAJBhAACADAMAAECGAQAAIMMAAAAZBgAAgAwDAABAhgEAACDDAAAA
GQYAAIAMAwAAQIYBAAAyDAAAABkGAACADAMAAECGAQAAMgwAAAAZBgAAgAwDAABkGAAAADIM
AAAAGQYAAIAMAwAAZBgAAAAyDAAAABkGAADIMAAAAGQYAAAAMgwAAAAZBgAAyDAAAABkGAAA
ADIMAACQYQAAAMgwAAAAZBgAAAAyDAAAkGEAAADIMAAAAGQYAAAgwwAAAJBhAAAAyDAAAABk
GAAAIMMAAACQYQAAAMgwAABAhgEAACDDAAAAkGEAAADIMAAAQIYBAAAgwwAAAJBhAACADAMA
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
ZcVuf37ypgHfDKqgICKKPXLJKFpOrZ40PTeYNIFVKTbb+RFXqtxj1+6KN4pExuObl9LQqp7k
cirWN5AOZ9uKPSzrPNGQ26RM7gHlAv+IGNGU7Kj/0SsNzq1esfNkoo4UjEIlEZEl2ywygtWQ
RTLZlQxJdiJZlnhRkp17SEbBMAqLg4jI7hAdDsEmO9ehSiZSOgyZVlESBZtdYvhrC9569880
zw7tm1cjEhSs69JczpdROIi8OGNyls1mc8g58w1886dFb/WpeXTlnI/WnpVdLVppWkCyZF25
yTToPfHrjwZR7IaEDEPlp4dRwv6DR/ccpmadqnMOl3PPX/mii8YoLJkp6WYLEVGAKu2GoUD1
tEHNvej3o9eKVkYoMiOdm0jU4Kmuz3bt0mfyR591qequc1MSqQy3sx2SzPN2gRQMCUTuQd5k
vPDP8SQjk3c6mVG4bDofH3ciR2YWL5OoN1iJCjeLOfNWEu/f84PFk1+qeXnbmawCa8q65/NR
s7alRnaIbljL2+xgGUYWeAsR8XZRcp5gV+YU6DA468D4t357zifvVjft/+7j8acz5busKfzD
P9d7KgVDDEOKEv5dvhh7YO/eg/v2/bV3T+z5CwXeLVhaUkIix6l8ff3q1YusVy/Szz9AqVQl
JiQU3jLLlWHFHhYXhQrvn9gSU3XpoK6to6KimreOHjT/rEjSUx9vj0n/X3RUVFTb/pdHffNh
l0CJSOXj4vxb3lm4/I8dURGp8t6JICL36IkxtOTViLqNViVUjoidPnX9FVI638pfiFy1+5SY
lj/3j27dtvdSr5ZFrhaz+cSc3h6T+WnX1lFRUVHPDJo0au6WDzv4O2QKb/9yxJ+Topu3/d7U
bmhuscENunWiLzpHRa2/YiEiYuImRjePioqecDlm1zstRXI5lapB3wk095WoqMmxlpLOMZSA
nA8P57N07Ub2CUm9cM0gc8RwIU/Vpy2/H7cyDMPf2L8uuV7XSB3DevhSipnPd5KJGIZhmTuz
Y50n1LiQVm3oyNqdNy0CI/GGbJ7PSEwg6tk72lMyXCFiRGJcluZ6vgxDJItCbo0ZhmHk7MQj
Z4012g16d0BNOmFwMOUjpF6LN1jMt1NuJBjsRN6BnkqjW+SLISl7Nv9VsV93ndHOuJp7/sq7
WjQm69yK77aFTJn7Sasrv8zZHldgnqKyyStt6fCSzSfiBYZhGMmadvXCtQyXMwqq3ZLo9PXb
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
CJzw6DzJRIagOo0cuqzxy1qfrPVRlVeechlENOetglH9ug1Ojw9tlq+//loIIYUM/JZCElHg
dxubImz/8dTU2O21Gm9Wv6/WXmG317n9evP62/6QRbqOFPLrr79uR/0d7yTuuhq73e6P0kkM
n72mwm6v9fn1SJ3EqGl6mkTsJIa7srLGpZ/WTt729u/c/hNT/++U/tMV9Sd7K19Yv638xLc5
0uH1a0LXuGYwxjq3ft1+eHPeQd/pav/6I0Yn1R/zOCz6zVrSjj1z1YxtgdMDrl/45Exb/26x
Dgm9lfueXcAuGztExfC4A4Jf0QsSjJigpofSoyndLIrbL90+rijMTKSqxFQyEVMZCSLGnf/3
XfWhkmrbwGaTyTU1NevXr+/Tp09aWlq7azuZ//y0hUUvbnrpZ6mBblPy9tO3rPws8MeLVm19
KTeBmKfw/aW3L9vWeKPLVm1dZMp/fPr2y7a+9Av6btM103evyn8219LOGjpyR77bVF9GQqy3
5CeXj5n2fv2Z0X94+4lROS23cXLPumlzljWeHf3oqmevzw3dkq/yX9GfJtqpPXMmz9lHRHTR
c+8/NyLLgv7/o612k6fXoRNFjBt+l5aemODXdE0zDEMyIXwOV06CfnHWLmuaUlESf6x2aGsH
3vELH7vflpsaZXe+yn8tWsBGjx1s6vr2t9fYO37E6Py5xMhjRgsnenDNx9NzfW8/cd1Tywdt
eX5CfBve0AtmTUwj0lQhROxTH109pdORqZhOr7/t8wahl7u8LDXO5PAaHr9QFFIVUriiKqSS
VFUiSeV1vhfyj9zQ1xCCGreTlZU1d+7c3bt3e73etWvXlpSUtKuGU/kLNxFR3j+PXzihPxFV
Hdy68rOZHx94pK/q/u5osdnKOa9+/ZrbV+fO3PD5rP9Kt/rd9uOHT1qsvDZOI49KnDNzPJGu
6EKYWpliDVtDdnZ28B0pLS1te/2MMXOcRh6VccFj7SQy7bo3P3xsWG4i1W2Yc8ljGw/uuHdY
8PWr970+bc7qmcs+nHV1rtXw20uPF9Qmhn8daU0kIjXob807SfVbk+ecs+TDdybmHtow51eT
1/19x82pp6uTt+kpFuPcV5fctg1T9Keh/n+ah+Qf2JekSk3zmxSrIYQgIZlqIi8jjVSzYlKZ
VstqeFaCv6Iupdro3bJ+2XjgNfJe/MVjMwZ+8Mnk1Ob188ItY+/4bPW2Rf3MUloSiJiFc9HF
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
g369dMaqiQ++NmLz47/5f/OWTJ8U+J6rS5etm3/u2LsuWTbrmpGr+o27eULuFzOfylv/0oQl
M/Jm33cLEV1z0yVUKDjnnLjWc/R9RCtmTO3rdzlFbAPSzpyv64z9dtZ1WtQf611z+Y1/HHOP
PPf8sjpxosJIjKM4i+rwefKn7/i44O9/2bfq/UkfVbkrL1x5bbVbq9Z1znnjXP+FF144cuTI
3bt3jxw58oILLvj2229jmm9x/PvzbTTjod6ukyftjDEprVf/YdKqx3Yef6jsyZd2BW5yyYwl
k3ITPS71/k/e6bbw5genvVe/rQHTVi+5SMokSjEF1m0RJSmcC9GeT/u28Y6EfQiklELGEy2f
dsPywNVmvvR6WgppgoQQFFjUIATnvp0zZ+ovvDtpYELTg+vXaoho1QNXrSIiogvuf++ZqxOa
KtfiL35g/ZLkm2Y/2HC3acqCNRclXrpxyaxf3jdlMRHRsCXrl6R4nbWqpFzinAvm3zlzpr70
ncm5SY0twJ2WOzcvmz7h7muJiIat2DrHXOfwn7ZO3oZPW3dkvq4r3kqI9dPinVj/IP/3l/e0
HC48kU4e4qQYUjLD7fCfqpHM0KVuMCldbqZazcWOnynpOcFzNvXb4TyJyNQ4epZETGjZo2cR
vXL31L4+Vx2XrMcF88Y8+fDU60bOennuxZJyKZBHigz0V9+wx9bPevimKdcuJqJhM5YsuSK1
rsphTiGNS845a+jYjQuV29L+0Z9o7Wj/aJF21VVXNa24aVhc5HA4Fi1aFMNns5WknN7p/qqS
Kg+XFNezbw+L4SoqqemW1bMb0/ycrAlxjpIijzmtd4bV66cEq2JIXdONmgpXcs9si+HiaqJF
YSbVV1JUaRAxX9HzU2aNfT//ojhvrB23LS8tY/4irw58cL3T62/ftzB8U+Le+E1t35ys/mef
4/ILnUu/zmTq4r9NWasLv1mxljmLh786odSjk8/Isqb8ddjTwdtUFGXp0qWPPPJI4EMXMX3+
35Kc3TONlZ8s8zdcISGjV/ckcnmVeMXvdvsoLrGbSS8rq9aJFGu3Ht3TudvuM8gUl5icwKqK
y1lG7wyrt6S4mhIyczKt1SXFLqOdx6nQO9LGt0sZYwmZvTITmqbfffYKkdpDdZSVOzVSkvr2
Sa8pKXRxU1bfHLKXnnIZTVswJfXOyWgaLglPSVElbz4bn5SRlRHP7bU+MpkSk5MVV2WZ3Ruf
ltU9gTx+bk2I81SV2926KbFHTgaVFFYYZMo6K4fZS8udenAnYfGpfTJM9lpfXEqaUVXi8IvT
1sk7kkNtebu6s97V60jOdVH9115wWBVu4obu9ni9gvuFmswOHFQdqWOjbVNJ6tMnw1dVUuUJ
GqJ5C5+fMmvs+x9fFOeTUhJZs/pkM59fYa4KT2JOuiwpqjSkTOzRJ1NxnCx3MlNSVq8M8no4
WeNN3vJyuybVHn1zmL30lEsnJalPnzRHSZHTiK39G59ojbHSkfafP39+ampq41OYBYuUYQsX
LOyUNT9MMakKccOQTefJMAQxk4lxQ0giUkxmRRiGaLp7xR8/ff8r47duG+3zdNoMRocWFP2Y
5jDbV/bH/67NOmvAk7eOCpqHoE0HNuQVbFpxw+paf+05L15W7daIS/Lzd2/7k7XY3GIL5eXl
2dnZnbtmjCkmk0khYehGswfaZLYojGTI5RSy+eDdtlH4O/IjWPNGzGQxKySloeui+VOo6RnU
lk7CzBazwnU/l2dOJz+N7d/B/tMV9f/y0m95dSXjBpOCcTcf8CBLLP1+3cZvrONjrT/swVMx
KTL4CBtCUU0K40ZgIVIntX+kI0Y72v+pp56KlGGm0EgMnK6sqszIyOiE99yExptthPP6POe8
4SknuGiRK/1vWv7ZdFZTVCF+uAmHNr2Ia8sXOXdN/bHObyRbqbyqdu3HB9OSElKT41IT41IS
rbYBE94/sOHWN24uddmr3RoZgjRxzYBhliKTkKLF9nv06BFlUrydzS4EN8JsTfP7OrHpWgh7
Rzq++q4zOonm46HbFH4j1k7iM4wfoJN3ZO1ZVzxtu6j/dEX9JcUsJ1slj0FckFeqxe9Ki1Yu
zg77jIu+r343LftsulJTVMGD1zdorQwGOPd3evtHOmLE2v52uz14v+HXdLTMZEU5dOjQ6NGj
KWRVUtj1OW1ZZBJ+I4yklI2B3/ia0Vdn1x31rzyj3OFINbTl8hZt2rn1t1iy1UX1t1p2sEHZ
1t3Hi/P+Uej2c6/GvZrw6ULjMq3bz39zV497Nv2edGZR4l+/7XfmQrVxNXZMs0xhS21j/4lt
WrUNyzujLD1tX/1naCc5bZ28q9v/TO8/0evf832/vnZLryS7r8ZuVroJph+vzHDE9adwGRC9
fl+tXa9pOnj+BNr/4MGDihLx6zjYuHHjQr951ufzpaamjh8/vm/fvlg+BAAAP4jCwsK8vLza
2tq4uDjWXCDYwo/DzGZzZWVlXl7ekCFDBg8enJaWhv80gfpRP+pH/aj/tNVfU1Nz5MiRw4cP
V1VVJSQkRBrS1Y/DKORbqgzD0DRN07TgURqF/E+WFieiT3mFPQsAAD8BLaIu+GzjR7uasqf5
h70aR1fBpxVFsVqtZrPZZDK1GIRRw+IOE4X7zmkiUlU1Li7OarVGya2wZ0ODChkGAIAMaxFm
waEVPc+i7MvUajXBK7LC/p+F4A+Bhv1fDC0+Rt1ZX5MFAABnUJi1SKxI12lxuvX/4xw2LWON
07CjxRYbabUaAAA4c6Mr9CDfvshoexKZonx9Udjbh34BT9gthI7eohcHAAA/1dFY6NgrUoy1
8s1SzbfAGFOi3LLFpGT0asKGbfSyAADgpzogixQZ0f9Kzd8eixRMjWdNYXcfdnRFzb/ePnTE
Fv3fgiDGAAD+k8dhkYY3ocs3oodcMCX6KCrsRsNOYrZY9Rj6vhweUQCA/7RxWOhqw0gJEho0
rQYTY0yJkjStpmjocC96BCLMAAB+2tHV9hCKvvojSuIE/8kUZQAYaVV9pO9CDZ0zxCwiAMB/
ToZFurDV9RPtHv/8f2AvukwzZGHpAAAAAElFTkSuQmCC</binary>
<binary id="img_0" content-type="image/png">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
jNGUKOJSGgAAAABJRU5ErkJggg==</binary>
</FictionBook>